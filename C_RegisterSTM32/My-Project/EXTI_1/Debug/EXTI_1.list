
EXTI_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014adc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bbc  08014cac  08014cac  00024cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016868  08016868  000300a0  2**0
                  CONTENTS
  4 .ARM          00000008  08016868  08016868  00026868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016870  08016870  000300a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016870  08016870  00026870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016874  08016874  00026874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08016878  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009570  200000a0  08016918  000300a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009610  08016918  00039610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040eae  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000872e  00000000  00000000  00070f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000034e8  00000000  00000000  000796b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003150  00000000  00000000  0007cb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037947  00000000  00000000  0007fce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000439a0  00000000  00000000  000b762f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00130058  00000000  00000000  000fafcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0022b027  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e470  00000000  00000000  0022b078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014c94 	.word	0x08014c94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	08014c94 	.word	0x08014c94

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4a07      	ldr	r2, [pc, #28]	; (8000614 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	4a06      	ldr	r2, [pc, #24]	; (8000618 <vApplicationGetIdleTaskMemory+0x30>)
 80005fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2280      	movs	r2, #128	; 0x80
 8000604:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	200000bc 	.word	0x200000bc
 8000618:	20000114 	.word	0x20000114

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b092      	sub	sp, #72	; 0x48
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f002 fc0a 	bl	8002e3a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f8b5 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f001 f8af 	bl	800178c <MX_GPIO_Init>
  MX_ADC3_Init();
 800062e:	f000 f971 	bl	8000914 <MX_ADC3_Init>
  MX_CRC_Init();
 8000632:	f000 f9c1 	bl	80009b8 <MX_CRC_Init>
  MX_DCMI_Init();
 8000636:	f000 f9e1 	bl	80009fc <MX_DCMI_Init>
  MX_DMA2D_Init();
 800063a:	f000 fa13 	bl	8000a64 <MX_DMA2D_Init>
  MX_ETH_Init();
 800063e:	f000 fa43 	bl	8000ac8 <MX_ETH_Init>
  MX_FMC_Init();
 8000642:	f001 f853 	bl	80016ec <MX_FMC_Init>
  MX_I2C1_Init();
 8000646:	f000 fa81 	bl	8000b4c <MX_I2C1_Init>
  MX_I2C3_Init();
 800064a:	f000 fabf 	bl	8000bcc <MX_I2C3_Init>
  MX_LTDC_Init();
 800064e:	f000 fafd 	bl	8000c4c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000652:	f000 fb7d 	bl	8000d50 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000656:	f000 fba7 	bl	8000da8 <MX_RTC_Init>
  MX_SAI2_Init();
 800065a:	f000 fc4b 	bl	8000ef4 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 800065e:	f000 fcf1 	bl	8001044 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000662:	f000 fd0f 	bl	8001084 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000666:	f000 fd3d 	bl	80010e4 <MX_SPI2_Init>
  MX_TIM1_Init();
 800066a:	f000 fd79 	bl	8001160 <MX_TIM1_Init>
  MX_TIM2_Init();
 800066e:	f000 fe23 	bl	80012b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000672:	f000 fe97 	bl	80013a4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000676:	f000 ff0d 	bl	8001494 <MX_TIM5_Init>
  MX_TIM8_Init();
 800067a:	f000 ff83 	bl	8001584 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800067e:	f000 ffd5 	bl	800162c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000682:	f001 f803 	bl	800168c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000686:	f00d fd9d 	bl	800e1c4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 800068a:	f00d ffeb 	bl	800e664 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800068e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000692:	2000      	movs	r0, #0
 8000694:	f00e f87e 	bl	800e794 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+(BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4));
 8000698:	f00e f854 	bl	800e744 <BSP_LCD_GetXSize>
 800069c:	4604      	mov	r4, r0
 800069e:	f00e f865 	bl	800e76c <BSP_LCD_GetYSize>
 80006a2:	4603      	mov	r3, r0
 80006a4:	fb04 f303 	mul.w	r3, r4, r3
 80006a8:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	4619      	mov	r1, r3
 80006b0:	2001      	movs	r0, #1
 80006b2:	f00e f86f 	bl	800e794 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 80006b6:	f00e fabb 	bl	800ec30 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f00e f8ca 	bl	800e854 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80006c0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80006c4:	f00e f938 	bl	800e938 <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f00e f8c3 	bl	800e854 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80006ce:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80006d2:	f00e f931 	bl	800e938 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80006d6:	4826      	ldr	r0, [pc, #152]	; (8000770 <main+0x154>)
 80006d8:	f00e f8fe 	bl	800e8d8 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80006dc:	4825      	ldr	r0, [pc, #148]	; (8000774 <main+0x158>)
 80006de:	f00e f8c9 	bl	800e874 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80006e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006e6:	f00e f8dd 	bl	800e8a4 <BSP_LCD_SetBackColor>

char buffer[20];
uint8_t Test[] = "Hello World !!!\r\n"; //Data to send
 80006ea:	4b23      	ldr	r3, [pc, #140]	; (8000778 <main+0x15c>)
 80006ec:	f107 0420 	add.w	r4, r7, #32
 80006f0:	461d      	mov	r5, r3
 80006f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f6:	682b      	ldr	r3, [r5, #0]
 80006f8:	8023      	strh	r3, [r4, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <main+0x160>)
 80006fc:	1d3c      	adds	r4, r7, #4
 80006fe:	461d      	mov	r5, r3
 8000700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000704:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000708:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f011 f855 	bl	80117c0 <osThreadCreate>
 8000716:	4603      	mov	r3, r0
 8000718:	4a19      	ldr	r2, [pc, #100]	; (8000780 <main+0x164>)
 800071a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800071c:	f011 f82d 	bl	801177a <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		BSP_LCD_Clear(LCD_COLOR_BLUE);
 8000720:	4818      	ldr	r0, [pc, #96]	; (8000784 <main+0x168>)
 8000722:	f00e f909 	bl	800e938 <BSP_LCD_Clear>
		sprintf(buffer,"count=%d",count_);
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <main+0x16c>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	461a      	mov	r2, r3
 800072c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000730:	4916      	ldr	r1, [pc, #88]	; (800078c <main+0x170>)
 8000732:	4618      	mov	r0, r3
 8000734:	f013 ff3e 	bl	80145b4 <siprintf>
		BSP_LCD_DisplayStringAt(0, LINE(4), (uint8_t *)buffer, CENTER_MODE);
 8000738:	f00e f8e8 	bl	800e90c <BSP_LCD_GetFont>
 800073c:	4603      	mov	r3, r0
 800073e:	88db      	ldrh	r3, [r3, #6]
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	b299      	uxth	r1, r3
 8000744:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000748:	2301      	movs	r3, #1
 800074a:	2000      	movs	r0, #0
 800074c:	f00e f960 	bl	800ea10 <BSP_LCD_DisplayStringAt>
		HAL_Delay(100);
 8000750:	2064      	movs	r0, #100	; 0x64
 8000752:	f002 fb9f 	bl	8002e94 <HAL_Delay>

		HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);// Sending in normal mode
 8000756:	f107 0120 	add.w	r1, r7, #32
 800075a:	230a      	movs	r3, #10
 800075c:	2212      	movs	r2, #18
 800075e:	480c      	ldr	r0, [pc, #48]	; (8000790 <main+0x174>)
 8000760:	f00b fb00 	bl	800bd64 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8000764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000768:	f002 fb94 	bl	8002e94 <HAL_Delay>
		BSP_LCD_Clear(LCD_COLOR_BLUE);
 800076c:	e7d8      	b.n	8000720 <main+0x104>
 800076e:	bf00      	nop
 8000770:	2000000c 	.word	0x2000000c
 8000774:	ff000080 	.word	0xff000080
 8000778:	08014cc4 	.word	0x08014cc4
 800077c:	08014cd8 	.word	0x08014cd8
 8000780:	20000af8 	.word	0x20000af8
 8000784:	ff0000ff 	.word	0xff0000ff
 8000788:	20000b5e 	.word	0x20000b5e
 800078c:	08014cb8 	.word	0x08014cb8
 8000790:	200009bc 	.word	0x200009bc

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b0b4      	sub	sp, #208	; 0xd0
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800079e:	2230      	movs	r2, #48	; 0x30
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f013 fe0e 	bl	80143c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	2284      	movs	r2, #132	; 0x84
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f013 fdff 	bl	80143c4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007c6:	f006 feab 	bl	8007520 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b4f      	ldr	r3, [pc, #316]	; (8000908 <SystemClock_Config+0x174>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	4a4e      	ldr	r2, [pc, #312]	; (8000908 <SystemClock_Config+0x174>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	6413      	str	r3, [r2, #64]	; 0x40
 80007d6:	4b4c      	ldr	r3, [pc, #304]	; (8000908 <SystemClock_Config+0x174>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e2:	4b4a      	ldr	r3, [pc, #296]	; (800090c <SystemClock_Config+0x178>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a49      	ldr	r2, [pc, #292]	; (800090c <SystemClock_Config+0x178>)
 80007e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ec:	6013      	str	r3, [r2, #0]
 80007ee:	4b47      	ldr	r3, [pc, #284]	; (800090c <SystemClock_Config+0x178>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007fa:	2309      	movs	r3, #9
 80007fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000800:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000804:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080e:	2302      	movs	r3, #2
 8000810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000814:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000818:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800081c:	2319      	movs	r3, #25
 800081e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000822:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000826:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082a:	2302      	movs	r3, #2
 800082c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000830:	2309      	movs	r3, #9
 8000832:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800083a:	4618      	mov	r0, r3
 800083c:	f006 ff92 	bl	8007764 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000846:	f001 fa21 	bl	8001c8c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800084a:	f006 fe79 	bl	8007540 <HAL_PWREx_EnableOverDrive>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000854:	f001 fa1a 	bl	8001c8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000858:	230f      	movs	r3, #15
 800085a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	2302      	movs	r3, #2
 8000860:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800086a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800086e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000876:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800087a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800087e:	2106      	movs	r1, #6
 8000880:	4618      	mov	r0, r3
 8000882:	f007 fa13 	bl	8007cac <HAL_RCC_ClockConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800088c:	f001 f9fe 	bl	8001c8c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <SystemClock_Config+0x17c>)
 8000892:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000894:	2364      	movs	r3, #100	; 0x64
 8000896:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800089c:	2302      	movs	r3, #2
 800089e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80008a4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008a8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80008aa:	2305      	movs	r3, #5
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80008b2:	2303      	movs	r3, #3
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80008ba:	2301      	movs	r3, #1
 80008bc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80008be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008c2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80008ca:	2300      	movs	r3, #0
 80008cc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008ce:	2300      	movs	r3, #0
 80008d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80008d2:	2300      	movs	r3, #0
 80008d4:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80008da:	2300      	movs	r3, #0
 80008dc:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80008de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80008e6:	2300      	movs	r3, #0
 80008e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ec:	f107 0308 	add.w	r3, r7, #8
 80008f0:	4618      	mov	r0, r3
 80008f2:	f007 fbf3 	bl	80080dc <HAL_RCCEx_PeriphCLKConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 80008fc:	f001 f9c6 	bl	8001c8c <Error_Handler>
  }
}
 8000900:	bf00      	nop
 8000902:	37d0      	adds	r7, #208	; 0xd0
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40007000 	.word	0x40007000
 8000910:	01b14868 	.word	0x01b14868

08000914 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800091a:	463b      	mov	r3, r7
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000926:	4b21      	ldr	r3, [pc, #132]	; (80009ac <MX_ADC3_Init+0x98>)
 8000928:	4a21      	ldr	r2, [pc, #132]	; (80009b0 <MX_ADC3_Init+0x9c>)
 800092a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800092c:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <MX_ADC3_Init+0x98>)
 800092e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000932:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000934:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <MX_ADC3_Init+0x98>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800093a:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <MX_ADC3_Init+0x98>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <MX_ADC3_Init+0x98>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <MX_ADC3_Init+0x98>)
 8000948:	2200      	movs	r2, #0
 800094a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <MX_ADC3_Init+0x98>)
 8000950:	2200      	movs	r2, #0
 8000952:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <MX_ADC3_Init+0x98>)
 8000956:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <MX_ADC3_Init+0xa0>)
 8000958:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_ADC3_Init+0x98>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_ADC3_Init+0x98>)
 8000962:	2201      	movs	r2, #1
 8000964:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_ADC3_Init+0x98>)
 8000968:	2200      	movs	r2, #0
 800096a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_ADC3_Init+0x98>)
 8000970:	2201      	movs	r2, #1
 8000972:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000974:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_ADC3_Init+0x98>)
 8000976:	f002 fab1 	bl	8002edc <HAL_ADC_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000980:	f001 f984 	bl	8001c8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000984:	2304      	movs	r3, #4
 8000986:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000988:	2301      	movs	r3, #1
 800098a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000990:	463b      	mov	r3, r7
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_ADC3_Init+0x98>)
 8000996:	f002 fae5 	bl	8002f64 <HAL_ADC_ConfigChannel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80009a0:	f001 f974 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000314 	.word	0x20000314
 80009b0:	40012200 	.word	0x40012200
 80009b4:	0f000001 	.word	0x0f000001

080009b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009bc:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <MX_CRC_Init+0x3c>)
 80009be:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <MX_CRC_Init+0x40>)
 80009c0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_CRC_Init+0x3c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <MX_CRC_Init+0x3c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_CRC_Init+0x3c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <MX_CRC_Init+0x3c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_CRC_Init+0x3c>)
 80009dc:	2201      	movs	r2, #1
 80009de:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_CRC_Init+0x3c>)
 80009e2:	f002 fde5 	bl	80035b0 <HAL_CRC_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80009ec:	f001 f94e 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	2000035c 	.word	0x2000035c
 80009f8:	40023000 	.word	0x40023000

080009fc <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_DCMI_Init+0x60>)
 8000a02:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <MX_DCMI_Init+0x64>)
 8000a04:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_DCMI_Init+0x60>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MX_DCMI_Init+0x60>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MX_DCMI_Init+0x60>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_DCMI_Init+0x60>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_DCMI_Init+0x60>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000a24:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <MX_DCMI_Init+0x60>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_DCMI_Init+0x60>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <MX_DCMI_Init+0x60>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_DCMI_Init+0x60>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <MX_DCMI_Init+0x60>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_DCMI_Init+0x60>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_DCMI_Init+0x60>)
 8000a4a:	f002 fe9b 	bl	8003784 <HAL_DCMI_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000a54:	f001 f91a 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000380 	.word	0x20000380
 8000a60:	50050000 	.word	0x50050000

08000a64 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_DMA2D_Init+0x5c>)
 8000a6a:	4a16      	ldr	r2, [pc, #88]	; (8000ac4 <MX_DMA2D_Init+0x60>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_DMA2D_Init+0x5c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_DMA2D_Init+0x5c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_DMA2D_Init+0x5c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_DMA2D_Init+0x5c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_DMA2D_Init+0x5c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_DMA2D_Init+0x5c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <MX_DMA2D_Init+0x5c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a98:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <MX_DMA2D_Init+0x5c>)
 8000a9a:	f003 f945 	bl	8003d28 <HAL_DMA2D_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000aa4:	f001 f8f2 	bl	8001c8c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_DMA2D_Init+0x5c>)
 8000aac:	f003 fbaa 	bl	8004204 <HAL_DMA2D_ConfigLayer>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000ab6:	f001 f8e9 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200003d0 	.word	0x200003d0
 8000ac4:	4002b000 	.word	0x4002b000

08000ac8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000acc:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <MX_ETH_Init+0x78>)
 8000ace:	4a1d      	ldr	r2, [pc, #116]	; (8000b44 <MX_ETH_Init+0x7c>)
 8000ad0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000ad2:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_ETH_Init+0x78>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8000ad8:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <MX_ETH_Init+0x78>)
 8000ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ade:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <MX_ETH_Init+0x78>)
 8000ae2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ae6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_ETH_Init+0x78>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_ETH_Init+0x80>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_ETH_Init+0x80>)
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_ETH_Init+0x80>)
 8000afc:	22e1      	movs	r2, #225	; 0xe1
 8000afe:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_ETH_Init+0x80>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <MX_ETH_Init+0x80>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_ETH_Init+0x80>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_ETH_Init+0x78>)
 8000b14:	4a0c      	ldr	r2, [pc, #48]	; (8000b48 <MX_ETH_Init+0x80>)
 8000b16:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_ETH_Init+0x78>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_ETH_Init+0x78>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_ETH_Init+0x78>)
 8000b26:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b2a:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_ETH_Init+0x78>)
 8000b2e:	f003 fc97 	bl	8004460 <HAL_ETH_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000b38:	f001 f8a8 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000410 	.word	0x20000410
 8000b44:	40028000 	.word	0x40028000
 8000b48:	20000afc 	.word	0x20000afc

08000b4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b52:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <MX_I2C1_Init+0x78>)
 8000b54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000b56:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b58:	4a1b      	ldr	r2, [pc, #108]	; (8000bc8 <MX_I2C1_Init+0x7c>)
 8000b5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b5c:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b68:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b86:	480e      	ldr	r0, [pc, #56]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b88:	f006 f82a 	bl	8006be0 <HAL_I2C_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b92:	f001 f87b 	bl	8001c8c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b96:	2100      	movs	r1, #0
 8000b98:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b9a:	f006 f8b1 	bl	8006d00 <HAL_I2CEx_ConfigAnalogFilter>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ba4:	f001 f872 	bl	8001c8c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000bac:	f006 f8f3 	bl	8006d96 <HAL_I2CEx_ConfigDigitalFilter>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bb6:	f001 f869 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000458 	.word	0x20000458
 8000bc4:	40005400 	.word	0x40005400
 8000bc8:	00c0eaff 	.word	0x00c0eaff

08000bcc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000bd2:	4a1c      	ldr	r2, [pc, #112]	; (8000c44 <MX_I2C3_Init+0x78>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000bd8:	4a1b      	ldr	r2, [pc, #108]	; (8000c48 <MX_I2C3_Init+0x7c>)
 8000bda:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be8:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c06:	480e      	ldr	r0, [pc, #56]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000c08:	f005 ffea 	bl	8006be0 <HAL_I2C_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000c12:	f001 f83b 	bl	8001c8c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c16:	2100      	movs	r1, #0
 8000c18:	4809      	ldr	r0, [pc, #36]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000c1a:	f006 f871 	bl	8006d00 <HAL_I2CEx_ConfigAnalogFilter>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000c24:	f001 f832 	bl	8001c8c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000c2c:	f006 f8b3 	bl	8006d96 <HAL_I2CEx_ConfigDigitalFilter>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000c36:	f001 f829 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200004a4 	.word	0x200004a4
 8000c44:	40005c00 	.word	0x40005c00
 8000c48:	00c0eaff 	.word	0x00c0eaff

08000c4c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08e      	sub	sp, #56	; 0x38
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2234      	movs	r2, #52	; 0x34
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f013 fbb3 	bl	80143c4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c5e:	4b3a      	ldr	r3, [pc, #232]	; (8000d48 <MX_LTDC_Init+0xfc>)
 8000c60:	4a3a      	ldr	r2, [pc, #232]	; (8000d4c <MX_LTDC_Init+0x100>)
 8000c62:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c64:	4b38      	ldr	r3, [pc, #224]	; (8000d48 <MX_LTDC_Init+0xfc>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c6a:	4b37      	ldr	r3, [pc, #220]	; (8000d48 <MX_LTDC_Init+0xfc>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c70:	4b35      	ldr	r3, [pc, #212]	; (8000d48 <MX_LTDC_Init+0xfc>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c76:	4b34      	ldr	r3, [pc, #208]	; (8000d48 <MX_LTDC_Init+0xfc>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000c7c:	4b32      	ldr	r3, [pc, #200]	; (8000d48 <MX_LTDC_Init+0xfc>)
 8000c7e:	2228      	movs	r2, #40	; 0x28
 8000c80:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000c82:	4b31      	ldr	r3, [pc, #196]	; (8000d48 <MX_LTDC_Init+0xfc>)
 8000c84:	2209      	movs	r2, #9
 8000c86:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000c88:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <MX_LTDC_Init+0xfc>)
 8000c8a:	2235      	movs	r2, #53	; 0x35
 8000c8c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000c8e:	4b2e      	ldr	r3, [pc, #184]	; (8000d48 <MX_LTDC_Init+0xfc>)
 8000c90:	220b      	movs	r2, #11
 8000c92:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000c94:	4b2c      	ldr	r3, [pc, #176]	; (8000d48 <MX_LTDC_Init+0xfc>)
 8000c96:	f240 2215 	movw	r2, #533	; 0x215
 8000c9a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000c9c:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <MX_LTDC_Init+0xfc>)
 8000c9e:	f240 121b 	movw	r2, #283	; 0x11b
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000ca4:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <MX_LTDC_Init+0xfc>)
 8000ca6:	f240 2235 	movw	r2, #565	; 0x235
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000cac:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <MX_LTDC_Init+0xfc>)
 8000cae:	f240 121d 	movw	r2, #285	; 0x11d
 8000cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000cb4:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <MX_LTDC_Init+0xfc>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000cbc:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <MX_LTDC_Init+0xfc>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000cc4:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <MX_LTDC_Init+0xfc>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ccc:	481e      	ldr	r0, [pc, #120]	; (8000d48 <MX_LTDC_Init+0xfc>)
 8000cce:	f006 f8af 	bl	8006e30 <HAL_LTDC_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000cd8:	f000 ffd8 	bl	8001c8c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000ce0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ce4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000cea:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000cee:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000cf4:	23ff      	movs	r3, #255	; 0xff
 8000cf6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000cfc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d00:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000d02:	2307      	movs	r3, #7
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000d06:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000d0c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000d12:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000d16:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_LTDC_Init+0xfc>)
 8000d32:	f006 fa0f 	bl	8007154 <HAL_LTDC_ConfigLayer>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000d3c:	f000 ffa6 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	3738      	adds	r7, #56	; 0x38
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200004f0 	.word	0x200004f0
 8000d4c:	40016800 	.word	0x40016800

08000d50 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <MX_QUADSPI_Init+0x50>)
 8000d56:	4a13      	ldr	r2, [pc, #76]	; (8000da4 <MX_QUADSPI_Init+0x54>)
 8000d58:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_QUADSPI_Init+0x50>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_QUADSPI_Init+0x50>)
 8000d62:	2204      	movs	r2, #4
 8000d64:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_QUADSPI_Init+0x50>)
 8000d68:	2210      	movs	r2, #16
 8000d6a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_QUADSPI_Init+0x50>)
 8000d6e:	2218      	movs	r2, #24
 8000d70:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_QUADSPI_Init+0x50>)
 8000d74:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000d78:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_QUADSPI_Init+0x50>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <MX_QUADSPI_Init+0x50>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_QUADSPI_Init+0x50>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <MX_QUADSPI_Init+0x50>)
 8000d8e:	f006 fc27 	bl	80075e0 <HAL_QSPI_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000d98:	f000 ff78 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000598 	.word	0x20000598
 8000da4:	a0001000 	.word	0xa0001000

08000da8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b092      	sub	sp, #72	; 0x48
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000dae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]
 8000dbe:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	222c      	movs	r2, #44	; 0x2c
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f013 fafa 	bl	80143c4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000dd0:	4b46      	ldr	r3, [pc, #280]	; (8000eec <MX_RTC_Init+0x144>)
 8000dd2:	4a47      	ldr	r2, [pc, #284]	; (8000ef0 <MX_RTC_Init+0x148>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000dd6:	4b45      	ldr	r3, [pc, #276]	; (8000eec <MX_RTC_Init+0x144>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ddc:	4b43      	ldr	r3, [pc, #268]	; (8000eec <MX_RTC_Init+0x144>)
 8000dde:	227f      	movs	r2, #127	; 0x7f
 8000de0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000de2:	4b42      	ldr	r3, [pc, #264]	; (8000eec <MX_RTC_Init+0x144>)
 8000de4:	22ff      	movs	r2, #255	; 0xff
 8000de6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000de8:	4b40      	ldr	r3, [pc, #256]	; (8000eec <MX_RTC_Init+0x144>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000dee:	4b3f      	ldr	r3, [pc, #252]	; (8000eec <MX_RTC_Init+0x144>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000df4:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <MX_RTC_Init+0x144>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000dfa:	483c      	ldr	r0, [pc, #240]	; (8000eec <MX_RTC_Init+0x144>)
 8000dfc:	f007 fea2 	bl	8008b44 <HAL_RTC_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000e06:	f000 ff41 	bl	8001c8c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e28:	2201      	movs	r2, #1
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	482f      	ldr	r0, [pc, #188]	; (8000eec <MX_RTC_Init+0x144>)
 8000e2e:	f007 ff1b 	bl	8008c68 <HAL_RTC_SetTime>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000e38:	f000 ff28 	bl	8001c8c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000e42:	2301      	movs	r3, #1
 8000e44:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e58:	2201      	movs	r2, #1
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4823      	ldr	r0, [pc, #140]	; (8000eec <MX_RTC_Init+0x144>)
 8000e5e:	f007 ffc1 	bl	8008de4 <HAL_RTC_SetDate>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000e68:	f000 ff10 	bl	8001c8c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4812      	ldr	r0, [pc, #72]	; (8000eec <MX_RTC_Init+0x144>)
 8000ea4:	f008 f846 	bl	8008f34 <HAL_RTC_SetAlarm>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000eae:	f000 feed 	bl	8001c8c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480b      	ldr	r0, [pc, #44]	; (8000eec <MX_RTC_Init+0x144>)
 8000ec0:	f008 f838 	bl	8008f34 <HAL_RTC_SetAlarm>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000eca:	f000 fedf 	bl	8001c8c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000ece:	2202      	movs	r2, #2
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4806      	ldr	r0, [pc, #24]	; (8000eec <MX_RTC_Init+0x144>)
 8000ed4:	f008 f9b8 	bl	8009248 <HAL_RTCEx_SetTimeStamp>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000ede:	f000 fed5 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	3748      	adds	r7, #72	; 0x48
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200005e4 	.word	0x200005e4
 8000ef0:	40002800 	.word	0x40002800

08000ef4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000ef8:	4b4d      	ldr	r3, [pc, #308]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000efa:	4a4e      	ldr	r2, [pc, #312]	; (8001034 <MX_SAI2_Init+0x140>)
 8000efc:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000efe:	4b4c      	ldr	r3, [pc, #304]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000f04:	4b4a      	ldr	r3, [pc, #296]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000f0a:	4b49      	ldr	r3, [pc, #292]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f0c:	2240      	movs	r2, #64	; 0x40
 8000f0e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f10:	4b47      	ldr	r3, [pc, #284]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f16:	4b46      	ldr	r3, [pc, #280]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f1c:	4b44      	ldr	r3, [pc, #272]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f22:	4b43      	ldr	r3, [pc, #268]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000f28:	4b41      	ldr	r3, [pc, #260]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f2e:	4b40      	ldr	r3, [pc, #256]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000f34:	4b3e      	ldr	r3, [pc, #248]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f36:	4a40      	ldr	r2, [pc, #256]	; (8001038 <MX_SAI2_Init+0x144>)
 8000f38:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f3a:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f40:	4b3b      	ldr	r3, [pc, #236]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f46:	4b3a      	ldr	r3, [pc, #232]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f4c:	4b38      	ldr	r3, [pc, #224]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000f52:	4b37      	ldr	r3, [pc, #220]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f54:	2208      	movs	r2, #8
 8000f56:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000f58:	4b35      	ldr	r3, [pc, #212]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f5e:	4b34      	ldr	r3, [pc, #208]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f64:	4b32      	ldr	r3, [pc, #200]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f6a:	4b31      	ldr	r3, [pc, #196]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000f70:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f76:	4b2e      	ldr	r3, [pc, #184]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000f7c:	4b2c      	ldr	r3, [pc, #176]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000f82:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000f88:	4829      	ldr	r0, [pc, #164]	; (8001030 <MX_SAI2_Init+0x13c>)
 8000f8a:	f008 f9b3 	bl	80092f4 <HAL_SAI_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000f94:	f000 fe7a 	bl	8001c8c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000f98:	4b28      	ldr	r3, [pc, #160]	; (800103c <MX_SAI2_Init+0x148>)
 8000f9a:	4a29      	ldr	r2, [pc, #164]	; (8001040 <MX_SAI2_Init+0x14c>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f9e:	4b27      	ldr	r3, [pc, #156]	; (800103c <MX_SAI2_Init+0x148>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000fa4:	4b25      	ldr	r3, [pc, #148]	; (800103c <MX_SAI2_Init+0x148>)
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000faa:	4b24      	ldr	r3, [pc, #144]	; (800103c <MX_SAI2_Init+0x148>)
 8000fac:	2240      	movs	r2, #64	; 0x40
 8000fae:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000fb0:	4b22      	ldr	r3, [pc, #136]	; (800103c <MX_SAI2_Init+0x148>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000fb6:	4b21      	ldr	r3, [pc, #132]	; (800103c <MX_SAI2_Init+0x148>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <MX_SAI2_Init+0x148>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	; (800103c <MX_SAI2_Init+0x148>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000fc8:	4b1c      	ldr	r3, [pc, #112]	; (800103c <MX_SAI2_Init+0x148>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000fce:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_SAI2_Init+0x148>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <MX_SAI2_Init+0x148>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_SAI2_Init+0x148>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <MX_SAI2_Init+0x148>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <MX_SAI2_Init+0x148>)
 8000fe8:	2208      	movs	r2, #8
 8000fea:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <MX_SAI2_Init+0x148>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <MX_SAI2_Init+0x148>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ff8:	4b10      	ldr	r3, [pc, #64]	; (800103c <MX_SAI2_Init+0x148>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_SAI2_Init+0x148>)
 8001000:	2200      	movs	r2, #0
 8001002:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <MX_SAI2_Init+0x148>)
 8001006:	2200      	movs	r2, #0
 8001008:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_SAI2_Init+0x148>)
 800100c:	2200      	movs	r2, #0
 800100e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <MX_SAI2_Init+0x148>)
 8001012:	2201      	movs	r2, #1
 8001014:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_SAI2_Init+0x148>)
 8001018:	2200      	movs	r2, #0
 800101a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800101c:	4807      	ldr	r0, [pc, #28]	; (800103c <MX_SAI2_Init+0x148>)
 800101e:	f008 f969 	bl	80092f4 <HAL_SAI_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001028:	f000 fe30 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000604 	.word	0x20000604
 8001034:	40015c04 	.word	0x40015c04
 8001038:	0002ee00 	.word	0x0002ee00
 800103c:	20000688 	.word	0x20000688
 8001040:	40015c24 	.word	0x40015c24

08001044 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_SDMMC1_SD_Init+0x38>)
 800104a:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <MX_SDMMC1_SD_Init+0x3c>)
 800104c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <MX_SDMMC1_SD_Init+0x38>)
 8001050:	2200      	movs	r2, #0
 8001052:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_SDMMC1_SD_Init+0x38>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <MX_SDMMC1_SD_Init+0x38>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_SDMMC1_SD_Init+0x38>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001066:	4b05      	ldr	r3, [pc, #20]	; (800107c <MX_SDMMC1_SD_Init+0x38>)
 8001068:	2200      	movs	r2, #0
 800106a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <MX_SDMMC1_SD_Init+0x38>)
 800106e:	2200      	movs	r2, #0
 8001070:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	2000070c 	.word	0x2000070c
 8001080:	40012c00 	.word	0x40012c00

08001084 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <MX_SPDIFRX_Init+0x5c>)
 800108a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800108e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_SPDIFRX_Init+0x5c>)
 8001092:	2200      	movs	r2, #0
 8001094:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <MX_SPDIFRX_Init+0x5c>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <MX_SPDIFRX_Init+0x5c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_SPDIFRX_Init+0x5c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <MX_SPDIFRX_Init+0x5c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_SPDIFRX_Init+0x5c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <MX_SPDIFRX_Init+0x5c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_SPDIFRX_Init+0x5c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <MX_SPDIFRX_Init+0x5c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_SPDIFRX_Init+0x5c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <MX_SPDIFRX_Init+0x5c>)
 80010ce:	f009 fbe5 	bl	800a89c <HAL_SPDIFRX_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80010d8:	f000 fdd8 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000790 	.word	0x20000790

080010e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010e8:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <MX_SPI2_Init+0x74>)
 80010ea:	4a1c      	ldr	r2, [pc, #112]	; (800115c <MX_SPI2_Init+0x78>)
 80010ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010ee:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <MX_SPI2_Init+0x74>)
 80010f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <MX_SPI2_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <MX_SPI2_Init+0x74>)
 80010fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001102:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <MX_SPI2_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <MX_SPI2_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_SPI2_Init+0x74>)
 8001112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001116:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <MX_SPI2_Init+0x74>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_SPI2_Init+0x74>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_SPI2_Init+0x74>)
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <MX_SPI2_Init+0x74>)
 800112c:	2200      	movs	r2, #0
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001130:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_SPI2_Init+0x74>)
 8001132:	2207      	movs	r2, #7
 8001134:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <MX_SPI2_Init+0x74>)
 8001138:	2200      	movs	r2, #0
 800113a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_SPI2_Init+0x74>)
 800113e:	2208      	movs	r2, #8
 8001140:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_SPI2_Init+0x74>)
 8001144:	f009 fc06 	bl	800a954 <HAL_SPI_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800114e:	f000 fd9d 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200007dc 	.word	0x200007dc
 800115c:	40003800 	.word	0x40003800

08001160 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b09a      	sub	sp, #104	; 0x68
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001166:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001180:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
 8001190:	615a      	str	r2, [r3, #20]
 8001192:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	222c      	movs	r2, #44	; 0x2c
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f013 f912 	bl	80143c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011a0:	4b43      	ldr	r3, [pc, #268]	; (80012b0 <MX_TIM1_Init+0x150>)
 80011a2:	4a44      	ldr	r2, [pc, #272]	; (80012b4 <MX_TIM1_Init+0x154>)
 80011a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011a6:	4b42      	ldr	r3, [pc, #264]	; (80012b0 <MX_TIM1_Init+0x150>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ac:	4b40      	ldr	r3, [pc, #256]	; (80012b0 <MX_TIM1_Init+0x150>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011b2:	4b3f      	ldr	r3, [pc, #252]	; (80012b0 <MX_TIM1_Init+0x150>)
 80011b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ba:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <MX_TIM1_Init+0x150>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011c0:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <MX_TIM1_Init+0x150>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c6:	4b3a      	ldr	r3, [pc, #232]	; (80012b0 <MX_TIM1_Init+0x150>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011cc:	4838      	ldr	r0, [pc, #224]	; (80012b0 <MX_TIM1_Init+0x150>)
 80011ce:	f009 fc6c 	bl	800aaaa <HAL_TIM_Base_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011d8:	f000 fd58 	bl	8001c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011e6:	4619      	mov	r1, r3
 80011e8:	4831      	ldr	r0, [pc, #196]	; (80012b0 <MX_TIM1_Init+0x150>)
 80011ea:	f009 ffbd 	bl	800b168 <HAL_TIM_ConfigClockSource>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80011f4:	f000 fd4a 	bl	8001c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011f8:	482d      	ldr	r0, [pc, #180]	; (80012b0 <MX_TIM1_Init+0x150>)
 80011fa:	f009 fd25 	bl	800ac48 <HAL_TIM_PWM_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001204:	f000 fd42 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001214:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001218:	4619      	mov	r1, r3
 800121a:	4825      	ldr	r0, [pc, #148]	; (80012b0 <MX_TIM1_Init+0x150>)
 800121c:	f00a fc2a 	bl	800ba74 <HAL_TIMEx_MasterConfigSynchronization>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001226:	f000 fd31 	bl	8001c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800122a:	2360      	movs	r3, #96	; 0x60
 800122c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001232:	2300      	movs	r3, #0
 8001234:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001236:	2300      	movs	r3, #0
 8001238:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800123e:	2300      	movs	r3, #0
 8001240:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001246:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800124a:	2200      	movs	r2, #0
 800124c:	4619      	mov	r1, r3
 800124e:	4818      	ldr	r0, [pc, #96]	; (80012b0 <MX_TIM1_Init+0x150>)
 8001250:	f009 fe7a 	bl	800af48 <HAL_TIM_PWM_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800125a:	f000 fd17 	bl	8001c8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001272:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001276:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001280:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4619      	mov	r1, r3
 8001292:	4807      	ldr	r0, [pc, #28]	; (80012b0 <MX_TIM1_Init+0x150>)
 8001294:	f00a fc7c 	bl	800bb90 <HAL_TIMEx_ConfigBreakDeadTime>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800129e:	f000 fcf5 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012a2:	4803      	ldr	r0, [pc, #12]	; (80012b0 <MX_TIM1_Init+0x150>)
 80012a4:	f001 fa74 	bl	8002790 <HAL_TIM_MspPostInit>

}
 80012a8:	bf00      	nop
 80012aa:	3768      	adds	r7, #104	; 0x68
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000840 	.word	0x20000840
 80012b4:	40010000 	.word	0x40010000

080012b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08e      	sub	sp, #56	; 0x38
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d8:	463b      	mov	r3, r7
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]
 80012e6:	615a      	str	r2, [r3, #20]
 80012e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ea:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <MX_TIM2_Init+0xe8>)
 80012ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012f2:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <MX_TIM2_Init+0xe8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f8:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <MX_TIM2_Init+0xe8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80012fe:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <MX_TIM2_Init+0xe8>)
 8001300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001304:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001306:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <MX_TIM2_Init+0xe8>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130c:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <MX_TIM2_Init+0xe8>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001312:	4823      	ldr	r0, [pc, #140]	; (80013a0 <MX_TIM2_Init+0xe8>)
 8001314:	f009 fbc9 	bl	800aaaa <HAL_TIM_Base_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800131e:	f000 fcb5 	bl	8001c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132c:	4619      	mov	r1, r3
 800132e:	481c      	ldr	r0, [pc, #112]	; (80013a0 <MX_TIM2_Init+0xe8>)
 8001330:	f009 ff1a 	bl	800b168 <HAL_TIM_ConfigClockSource>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800133a:	f000 fca7 	bl	8001c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <MX_TIM2_Init+0xe8>)
 8001340:	f009 fc82 	bl	800ac48 <HAL_TIM_PWM_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800134a:	f000 fc9f 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	4810      	ldr	r0, [pc, #64]	; (80013a0 <MX_TIM2_Init+0xe8>)
 800135e:	f00a fb89 	bl	800ba74 <HAL_TIMEx_MasterConfigSynchronization>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001368:	f000 fc90 	bl	8001c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136c:	2360      	movs	r3, #96	; 0x60
 800136e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800137c:	463b      	mov	r3, r7
 800137e:	2200      	movs	r2, #0
 8001380:	4619      	mov	r1, r3
 8001382:	4807      	ldr	r0, [pc, #28]	; (80013a0 <MX_TIM2_Init+0xe8>)
 8001384:	f009 fde0 	bl	800af48 <HAL_TIM_PWM_ConfigChannel>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800138e:	f000 fc7d 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001392:	4803      	ldr	r0, [pc, #12]	; (80013a0 <MX_TIM2_Init+0xe8>)
 8001394:	f001 f9fc 	bl	8002790 <HAL_TIM_MspPostInit>

}
 8001398:	bf00      	nop
 800139a:	3738      	adds	r7, #56	; 0x38
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000088c 	.word	0x2000088c

080013a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08e      	sub	sp, #56	; 0x38
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c4:	463b      	mov	r3, r7
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
 80013d2:	615a      	str	r2, [r3, #20]
 80013d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013d6:	4b2d      	ldr	r3, [pc, #180]	; (800148c <MX_TIM3_Init+0xe8>)
 80013d8:	4a2d      	ldr	r2, [pc, #180]	; (8001490 <MX_TIM3_Init+0xec>)
 80013da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013dc:	4b2b      	ldr	r3, [pc, #172]	; (800148c <MX_TIM3_Init+0xe8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e2:	4b2a      	ldr	r3, [pc, #168]	; (800148c <MX_TIM3_Init+0xe8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013e8:	4b28      	ldr	r3, [pc, #160]	; (800148c <MX_TIM3_Init+0xe8>)
 80013ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f0:	4b26      	ldr	r3, [pc, #152]	; (800148c <MX_TIM3_Init+0xe8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f6:	4b25      	ldr	r3, [pc, #148]	; (800148c <MX_TIM3_Init+0xe8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013fc:	4823      	ldr	r0, [pc, #140]	; (800148c <MX_TIM3_Init+0xe8>)
 80013fe:	f009 fb54 	bl	800aaaa <HAL_TIM_Base_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001408:	f000 fc40 	bl	8001c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001412:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001416:	4619      	mov	r1, r3
 8001418:	481c      	ldr	r0, [pc, #112]	; (800148c <MX_TIM3_Init+0xe8>)
 800141a:	f009 fea5 	bl	800b168 <HAL_TIM_ConfigClockSource>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001424:	f000 fc32 	bl	8001c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001428:	4818      	ldr	r0, [pc, #96]	; (800148c <MX_TIM3_Init+0xe8>)
 800142a:	f009 fc0d 	bl	800ac48 <HAL_TIM_PWM_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001434:	f000 fc2a 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	4811      	ldr	r0, [pc, #68]	; (800148c <MX_TIM3_Init+0xe8>)
 8001448:	f00a fb14 	bl	800ba74 <HAL_TIMEx_MasterConfigSynchronization>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001452:	f000 fc1b 	bl	8001c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001456:	2360      	movs	r3, #96	; 0x60
 8001458:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001466:	463b      	mov	r3, r7
 8001468:	2200      	movs	r2, #0
 800146a:	4619      	mov	r1, r3
 800146c:	4807      	ldr	r0, [pc, #28]	; (800148c <MX_TIM3_Init+0xe8>)
 800146e:	f009 fd6b 	bl	800af48 <HAL_TIM_PWM_ConfigChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001478:	f000 fc08 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800147c:	4803      	ldr	r0, [pc, #12]	; (800148c <MX_TIM3_Init+0xe8>)
 800147e:	f001 f987 	bl	8002790 <HAL_TIM_MspPostInit>

}
 8001482:	bf00      	nop
 8001484:	3738      	adds	r7, #56	; 0x38
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200008d8 	.word	0x200008d8
 8001490:	40000400 	.word	0x40000400

08001494 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08e      	sub	sp, #56	; 0x38
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b4:	463b      	mov	r3, r7
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]
 80014c2:	615a      	str	r2, [r3, #20]
 80014c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014c6:	4b2d      	ldr	r3, [pc, #180]	; (800157c <MX_TIM5_Init+0xe8>)
 80014c8:	4a2d      	ldr	r2, [pc, #180]	; (8001580 <MX_TIM5_Init+0xec>)
 80014ca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <MX_TIM5_Init+0xe8>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b2a      	ldr	r3, [pc, #168]	; (800157c <MX_TIM5_Init+0xe8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80014d8:	4b28      	ldr	r3, [pc, #160]	; (800157c <MX_TIM5_Init+0xe8>)
 80014da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014de:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <MX_TIM5_Init+0xe8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e6:	4b25      	ldr	r3, [pc, #148]	; (800157c <MX_TIM5_Init+0xe8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80014ec:	4823      	ldr	r0, [pc, #140]	; (800157c <MX_TIM5_Init+0xe8>)
 80014ee:	f009 fadc 	bl	800aaaa <HAL_TIM_Base_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80014f8:	f000 fbc8 	bl	8001c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001506:	4619      	mov	r1, r3
 8001508:	481c      	ldr	r0, [pc, #112]	; (800157c <MX_TIM5_Init+0xe8>)
 800150a:	f009 fe2d 	bl	800b168 <HAL_TIM_ConfigClockSource>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001514:	f000 fbba 	bl	8001c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001518:	4818      	ldr	r0, [pc, #96]	; (800157c <MX_TIM5_Init+0xe8>)
 800151a:	f009 fb95 	bl	800ac48 <HAL_TIM_PWM_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001524:	f000 fbb2 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	4811      	ldr	r0, [pc, #68]	; (800157c <MX_TIM5_Init+0xe8>)
 8001538:	f00a fa9c 	bl	800ba74 <HAL_TIMEx_MasterConfigSynchronization>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001542:	f000 fba3 	bl	8001c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001546:	2360      	movs	r3, #96	; 0x60
 8001548:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001556:	463b      	mov	r3, r7
 8001558:	220c      	movs	r2, #12
 800155a:	4619      	mov	r1, r3
 800155c:	4807      	ldr	r0, [pc, #28]	; (800157c <MX_TIM5_Init+0xe8>)
 800155e:	f009 fcf3 	bl	800af48 <HAL_TIM_PWM_ConfigChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001568:	f000 fb90 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800156c:	4803      	ldr	r0, [pc, #12]	; (800157c <MX_TIM5_Init+0xe8>)
 800156e:	f001 f90f 	bl	8002790 <HAL_TIM_MspPostInit>

}
 8001572:	bf00      	nop
 8001574:	3738      	adds	r7, #56	; 0x38
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000924 	.word	0x20000924
 8001580:	40000c00 	.word	0x40000c00

08001584 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0310 	add.w	r3, r7, #16
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015a2:	4b20      	ldr	r3, [pc, #128]	; (8001624 <MX_TIM8_Init+0xa0>)
 80015a4:	4a20      	ldr	r2, [pc, #128]	; (8001628 <MX_TIM8_Init+0xa4>)
 80015a6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015a8:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <MX_TIM8_Init+0xa0>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ae:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <MX_TIM8_Init+0xa0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <MX_TIM8_Init+0xa0>)
 80015b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <MX_TIM8_Init+0xa0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <MX_TIM8_Init+0xa0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <MX_TIM8_Init+0xa0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80015ce:	4815      	ldr	r0, [pc, #84]	; (8001624 <MX_TIM8_Init+0xa0>)
 80015d0:	f009 fa6b 	bl	800aaaa <HAL_TIM_Base_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80015da:	f000 fb57 	bl	8001c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	4619      	mov	r1, r3
 80015ea:	480e      	ldr	r0, [pc, #56]	; (8001624 <MX_TIM8_Init+0xa0>)
 80015ec:	f009 fdbc 	bl	800b168 <HAL_TIM_ConfigClockSource>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80015f6:	f000 fb49 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	4619      	mov	r1, r3
 800160a:	4806      	ldr	r0, [pc, #24]	; (8001624 <MX_TIM8_Init+0xa0>)
 800160c:	f00a fa32 	bl	800ba74 <HAL_TIMEx_MasterConfigSynchronization>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001616:	f000 fb39 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000970 	.word	0x20000970
 8001628:	40010400 	.word	0x40010400

0800162c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <MX_USART1_UART_Init+0x58>)
 8001632:	4a15      	ldr	r2, [pc, #84]	; (8001688 <MX_USART1_UART_Init+0x5c>)
 8001634:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <MX_USART1_UART_Init+0x58>)
 8001638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800163c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_USART1_UART_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <MX_USART1_UART_Init+0x58>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_USART1_UART_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <MX_USART1_UART_Init+0x58>)
 8001652:	220c      	movs	r2, #12
 8001654:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <MX_USART1_UART_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MX_USART1_UART_Init+0x58>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <MX_USART1_UART_Init+0x58>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <MX_USART1_UART_Init+0x58>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_USART1_UART_Init+0x58>)
 8001670:	f00a fb2a 	bl	800bcc8 <HAL_UART_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800167a:	f000 fb07 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200009bc 	.word	0x200009bc
 8001688:	40011000 	.word	0x40011000

0800168c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 8001692:	4a15      	ldr	r2, [pc, #84]	; (80016e8 <MX_USART6_UART_Init+0x5c>)
 8001694:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 8001698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800169c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 80016d0:	f00a fafa 	bl	800bcc8 <HAL_UART_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80016da:	f000 fad7 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000a40 	.word	0x20000a40
 80016e8:	40011400 	.word	0x40011400

080016ec <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
 8001700:	615a      	str	r2, [r3, #20]
 8001702:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001704:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <MX_FMC_Init+0x98>)
 8001706:	4a20      	ldr	r2, [pc, #128]	; (8001788 <MX_FMC_Init+0x9c>)
 8001708:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800170a:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <MX_FMC_Init+0x98>)
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001710:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <MX_FMC_Init+0x98>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001716:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <MX_FMC_Init+0x98>)
 8001718:	2204      	movs	r2, #4
 800171a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <MX_FMC_Init+0x98>)
 800171e:	2210      	movs	r2, #16
 8001720:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <MX_FMC_Init+0x98>)
 8001724:	2240      	movs	r2, #64	; 0x40
 8001726:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <MX_FMC_Init+0x98>)
 800172a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800172e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_FMC_Init+0x98>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <MX_FMC_Init+0x98>)
 8001738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800173c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_FMC_Init+0x98>)
 8001740:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001744:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_FMC_Init+0x98>)
 8001748:	2200      	movs	r2, #0
 800174a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800174c:	2302      	movs	r3, #2
 800174e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001750:	2307      	movs	r3, #7
 8001752:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001754:	2304      	movs	r3, #4
 8001756:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001758:	2307      	movs	r3, #7
 800175a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800175c:	2303      	movs	r3, #3
 800175e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001760:	2302      	movs	r3, #2
 8001762:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001764:	2302      	movs	r3, #2
 8001766:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_FMC_Init+0x98>)
 800176e:	f009 f816 	bl	800a79e <HAL_SDRAM_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001778:	f000 fa88 	bl	8001c8c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800177c:	bf00      	nop
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000ac4 	.word	0x20000ac4
 8001788:	a0000140 	.word	0xa0000140

0800178c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b090      	sub	sp, #64	; 0x40
 8001790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017a2:	4baf      	ldr	r3, [pc, #700]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4aae      	ldr	r2, [pc, #696]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017a8:	f043 0310 	orr.w	r3, r3, #16
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4bac      	ldr	r3, [pc, #688]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0310 	and.w	r3, r3, #16
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017ba:	4ba9      	ldr	r3, [pc, #676]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4aa8      	ldr	r2, [pc, #672]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4ba6      	ldr	r3, [pc, #664]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	4ba3      	ldr	r3, [pc, #652]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4aa2      	ldr	r2, [pc, #648]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4ba0      	ldr	r3, [pc, #640]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	623b      	str	r3, [r7, #32]
 80017e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ea:	4b9d      	ldr	r3, [pc, #628]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a9c      	ldr	r2, [pc, #624]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017f0:	f043 0308 	orr.w	r3, r3, #8
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b9a      	ldr	r3, [pc, #616]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	61fb      	str	r3, [r7, #28]
 8001800:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001802:	4b97      	ldr	r3, [pc, #604]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a96      	ldr	r2, [pc, #600]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b94      	ldr	r3, [pc, #592]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	4b91      	ldr	r3, [pc, #580]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a90      	ldr	r2, [pc, #576]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b8e      	ldr	r3, [pc, #568]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001832:	4b8b      	ldr	r3, [pc, #556]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a8a      	ldr	r2, [pc, #552]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001838:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b88      	ldr	r3, [pc, #544]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800184a:	4b85      	ldr	r3, [pc, #532]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a84      	ldr	r2, [pc, #528]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b82      	ldr	r3, [pc, #520]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001862:	4b7f      	ldr	r3, [pc, #508]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a7e      	ldr	r2, [pc, #504]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001868:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b7c      	ldr	r3, [pc, #496]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800187a:	4b79      	ldr	r3, [pc, #484]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a78      	ldr	r2, [pc, #480]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001880:	f043 0320 	orr.w	r3, r3, #32
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b76      	ldr	r3, [pc, #472]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0320 	and.w	r3, r3, #32
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001892:	4b73      	ldr	r3, [pc, #460]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a72      	ldr	r2, [pc, #456]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b70      	ldr	r3, [pc, #448]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80018aa:	2201      	movs	r2, #1
 80018ac:	2120      	movs	r1, #32
 80018ae:	486d      	ldr	r0, [pc, #436]	; (8001a64 <MX_GPIO_Init+0x2d8>)
 80018b0:	f003 fc00 	bl	80050b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ARDUINO_D8_GPIO_Port, ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2104      	movs	r1, #4
 80018b8:	486b      	ldr	r0, [pc, #428]	; (8001a68 <MX_GPIO_Init+0x2dc>)
 80018ba:	f003 fbfb 	bl	80050b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80018be:	2201      	movs	r2, #1
 80018c0:	2108      	movs	r1, #8
 80018c2:	486a      	ldr	r0, [pc, #424]	; (8001a6c <MX_GPIO_Init+0x2e0>)
 80018c4:	f003 fbf6 	bl	80050b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ce:	4866      	ldr	r0, [pc, #408]	; (8001a68 <MX_GPIO_Init+0x2dc>)
 80018d0:	f003 fbf0 	bl	80050b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018da:	4865      	ldr	r0, [pc, #404]	; (8001a70 <MX_GPIO_Init+0x2e4>)
 80018dc:	f003 fbea 	bl	80050b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	21c8      	movs	r1, #200	; 0xc8
 80018e4:	4863      	ldr	r0, [pc, #396]	; (8001a74 <MX_GPIO_Init+0x2e8>)
 80018e6:	f003 fbe5 	bl	80050b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80018ea:	2308      	movs	r3, #8
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ee:	2300      	movs	r3, #0
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fa:	4619      	mov	r1, r3
 80018fc:	485e      	ldr	r0, [pc, #376]	; (8001a78 <MX_GPIO_Init+0x2ec>)
 80018fe:	f003 fa15 	bl	8004d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001902:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001914:	230a      	movs	r3, #10
 8001916:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800191c:	4619      	mov	r1, r3
 800191e:	4857      	ldr	r0, [pc, #348]	; (8001a7c <MX_GPIO_Init+0x2f0>)
 8001920:	f003 fa04 	bl	8004d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192a:	2300      	movs	r3, #0
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001936:	4619      	mov	r1, r3
 8001938:	4851      	ldr	r0, [pc, #324]	; (8001a80 <MX_GPIO_Init+0x2f4>)
 800193a:	f003 f9f7 	bl	8004d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800193e:	2320      	movs	r3, #32
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001952:	4619      	mov	r1, r3
 8001954:	4843      	ldr	r0, [pc, #268]	; (8001a64 <MX_GPIO_Init+0x2d8>)
 8001956:	f003 f9e9 	bl	8004d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI3_Pin */
  GPIO_InitStruct.Pin = EXTI3_Pin;
 800195a:	2308      	movs	r3, #8
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800195e:	4b49      	ldr	r3, [pc, #292]	; (8001a84 <MX_GPIO_Init+0x2f8>)
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001962:	2301      	movs	r3, #1
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EXTI3_GPIO_Port, &GPIO_InitStruct);
 8001966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800196a:	4619      	mov	r1, r3
 800196c:	483e      	ldr	r0, [pc, #248]	; (8001a68 <MX_GPIO_Init+0x2dc>)
 800196e:	f003 f9dd 	bl	8004d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001972:	f241 0304 	movw	r3, #4100	; 0x1004
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001978:	2301      	movs	r3, #1
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001988:	4619      	mov	r1, r3
 800198a:	4837      	ldr	r0, [pc, #220]	; (8001a68 <MX_GPIO_Init+0x2dc>)
 800198c:	f003 f9ce 	bl	8004d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001996:	2300      	movs	r3, #0
 8001998:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a2:	4619      	mov	r1, r3
 80019a4:	4838      	ldr	r0, [pc, #224]	; (8001a88 <MX_GPIO_Init+0x2fc>)
 80019a6:	f003 f9c1 	bl	8004d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80019aa:	2308      	movs	r3, #8
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	2301      	movs	r3, #1
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80019ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019be:	4619      	mov	r1, r3
 80019c0:	482a      	ldr	r0, [pc, #168]	; (8001a6c <MX_GPIO_Init+0x2e0>)
 80019c2:	f003 f9b3 	bl	8004d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80019c6:	2310      	movs	r3, #16
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ca:	2300      	movs	r3, #0
 80019cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d6:	4619      	mov	r1, r3
 80019d8:	4822      	ldr	r0, [pc, #136]	; (8001a64 <MX_GPIO_Init+0x2d8>)
 80019da:	f003 f9a7 	bl	8004d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80019de:	f248 0304 	movw	r3, #32772	; 0x8004
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e4:	2300      	movs	r3, #0
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f0:	4619      	mov	r1, r3
 80019f2:	481f      	ldr	r0, [pc, #124]	; (8001a70 <MX_GPIO_Init+0x2e4>)
 80019f4:	f003 f99a 	bl	8004d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80019f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4817      	ldr	r0, [pc, #92]	; (8001a70 <MX_GPIO_Init+0x2e4>)
 8001a12:	f003 f98b 	bl	8004d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <MX_GPIO_Init+0x300>)
 8001a1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001a24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480f      	ldr	r0, [pc, #60]	; (8001a68 <MX_GPIO_Init+0x2dc>)
 8001a2c:	f003 f97e 	bl	8004d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001a30:	2310      	movs	r3, #16
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a40:	230a      	movs	r3, #10
 8001a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001a44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4809      	ldr	r0, [pc, #36]	; (8001a70 <MX_GPIO_Init+0x2e4>)
 8001a4c:	f003 f96e 	bl	8004d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001a50:	23c8      	movs	r3, #200	; 0xc8
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a5c:	e018      	b.n	8001a90 <MX_GPIO_Init+0x304>
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020c00 	.word	0x40020c00
 8001a68:	40022000 	.word	0x40022000
 8001a6c:	40022800 	.word	0x40022800
 8001a70:	40021c00 	.word	0x40021c00
 8001a74:	40021800 	.word	0x40021800
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	40022400 	.word	0x40022400
 8001a84:	10310000 	.word	0x10310000
 8001a88:	40020800 	.word	0x40020800
 8001a8c:	10120000 	.word	0x10120000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4827      	ldr	r0, [pc, #156]	; (8001b38 <MX_GPIO_Init+0x3ac>)
 8001a9c:	f003 f946 	bl	8004d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001aa0:	2305      	movs	r3, #5
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aac:	2303      	movs	r3, #3
 8001aae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ab0:	230a      	movs	r3, #10
 8001ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4820      	ldr	r0, [pc, #128]	; (8001b3c <MX_GPIO_Init+0x3b0>)
 8001abc:	f003 f936 	bl	8004d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001acc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4819      	ldr	r0, [pc, #100]	; (8001b38 <MX_GPIO_Init+0x3ac>)
 8001ad4:	f003 f92a 	bl	8004d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001ad8:	2328      	movs	r3, #40	; 0x28
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ae8:	230a      	movs	r3, #10
 8001aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af0:	4619      	mov	r1, r3
 8001af2:	4813      	ldr	r0, [pc, #76]	; (8001b40 <MX_GPIO_Init+0x3b4>)
 8001af4:	f003 f91a 	bl	8004d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI6_Pin */
  GPIO_InitStruct.Pin = EXTI6_Pin;
 8001af8:	2340      	movs	r3, #64	; 0x40
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_GPIO_Init+0x3b8>)
 8001afe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EXTI6_GPIO_Port, &GPIO_InitStruct);
 8001b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b08:	4619      	mov	r1, r3
 8001b0a:	480f      	ldr	r0, [pc, #60]	; (8001b48 <MX_GPIO_Init+0x3bc>)
 8001b0c:	f003 f90e 	bl	8004d2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2105      	movs	r1, #5
 8001b14:	2009      	movs	r0, #9
 8001b16:	f001 fd21 	bl	800355c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001b1a:	2009      	movs	r0, #9
 8001b1c:	f001 fd3a 	bl	8003594 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2105      	movs	r1, #5
 8001b24:	2017      	movs	r0, #23
 8001b26:	f001 fd19 	bl	800355c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b2a:	2017      	movs	r0, #23
 8001b2c:	f001 fd32 	bl	8003594 <HAL_NVIC_EnableIRQ>

}
 8001b30:	bf00      	nop
 8001b32:	3740      	adds	r7, #64	; 0x40
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40021800 	.word	0x40021800
 8001b3c:	40020800 	.word	0x40020800
 8001b40:	40020000 	.word	0x40020000
 8001b44:	10310000 	.word	0x10310000
 8001b48:	40021c00 	.word	0x40021c00

08001b4c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  a= HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3);
 8001b56:	2108      	movs	r1, #8
 8001b58:	4834      	ldr	r0, [pc, #208]	; (8001c2c <HAL_GPIO_EXTI_Callback+0xe0>)
 8001b5a:	f003 fa93 	bl	8005084 <HAL_GPIO_ReadPin>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b33      	ldr	r3, [pc, #204]	; (8001c30 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001b64:	701a      	strb	r2, [r3, #0]
  b = HAL_GPIO_ReadPin(GPIOH,GPIO_PIN_6);
 8001b66:	2140      	movs	r1, #64	; 0x40
 8001b68:	4832      	ldr	r0, [pc, #200]	; (8001c34 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001b6a:	f003 fa8b 	bl	8005084 <HAL_GPIO_ReadPin>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b31      	ldr	r3, [pc, #196]	; (8001c38 <HAL_GPIO_EXTI_Callback+0xec>)
 8001b74:	701a      	strb	r2, [r3, #0]
  ab=b<<1|a;
 8001b76:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <HAL_GPIO_EXTI_Callback+0xec>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	b25a      	sxtb	r2, r3
 8001b7e:	4b2c      	ldr	r3, [pc, #176]	; (8001c30 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	b25b      	sxtb	r3, r3
 8001b84:	4313      	orrs	r3, r2
 8001b86:	b25b      	sxtb	r3, r3
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <HAL_GPIO_EXTI_Callback+0xf0>)
 8001b8c:	701a      	strb	r2, [r3, #0]
  c=ab<<2|pre_ab;
 8001b8e:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <HAL_GPIO_EXTI_Callback+0xf0>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	b25a      	sxtb	r2, r3
 8001b96:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	b25b      	sxtb	r3, r3
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	b25b      	sxtb	r3, r3
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001ba4:	701a      	strb	r2, [r3, #0]
  pre_ab=ab;
 8001ba6:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <HAL_GPIO_EXTI_Callback+0xf0>)
 8001ba8:	781a      	ldrb	r2, [r3, #0]
 8001baa:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001bac:	701a      	strb	r2, [r3, #0]
  if((c%5)!=0){
 8001bae:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001bb0:	781a      	ldrb	r2, [r3, #0]
 8001bb2:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8001bb8:	0899      	lsrs	r1, r3, #2
 8001bba:	460b      	mov	r3, r1
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d02d      	beq.n	8001c24 <HAL_GPIO_EXTI_Callback+0xd8>
	  c=c|0x06;
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	f043 0306 	orr.w	r3, r3, #6
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001bd4:	701a      	strb	r2, [r3, #0]
  if(c%3==0){
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001bd8:	781a      	ldrb	r2, [r3, #0]
 8001bda:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <HAL_GPIO_EXTI_Callback+0x100>)
 8001bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8001be0:	0859      	lsrs	r1, r3, #1
 8001be2:	460b      	mov	r3, r1
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	440b      	add	r3, r1
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d106      	bne.n	8001bfe <HAL_GPIO_EXTI_Callback+0xb2>
	  count_+=1;
 8001bf0:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <HAL_GPIO_EXTI_Callback+0x104>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <HAL_GPIO_EXTI_Callback+0x104>)
 8001bfa:	801a      	strh	r2, [r3, #0]
  }
  else if(c%3!=0){
	  count_-=1;
  }
  }
}
 8001bfc:	e012      	b.n	8001c24 <HAL_GPIO_EXTI_Callback+0xd8>
  else if(c%3!=0){
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_GPIO_EXTI_Callback+0x100>)
 8001c04:	fba3 1302 	umull	r1, r3, r3, r2
 8001c08:	0859      	lsrs	r1, r3, #1
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	440b      	add	r3, r1
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_GPIO_EXTI_Callback+0xd8>
	  count_-=1;
 8001c18:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HAL_GPIO_EXTI_Callback+0x104>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_GPIO_EXTI_Callback+0x104>)
 8001c22:	801a      	strh	r2, [r3, #0]
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40022000 	.word	0x40022000
 8001c30:	20000b58 	.word	0x20000b58
 8001c34:	40021c00 	.word	0x40021c00
 8001c38:	20000b59 	.word	0x20000b59
 8001c3c:	20000b5a 	.word	0x20000b5a
 8001c40:	20000b5c 	.word	0x20000b5c
 8001c44:	20000b5b 	.word	0x20000b5b
 8001c48:	cccccccd 	.word	0xcccccccd
 8001c4c:	aaaaaaab 	.word	0xaaaaaaab
 8001c50:	20000b5e 	.word	0x20000b5e

08001c54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001c5c:	f012 f874 	bl	8013d48 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c60:	2001      	movs	r0, #1
 8001c62:	f00f fdf9 	bl	8011858 <osDelay>
 8001c66:	e7fb      	b.n	8001c60 <StartDefaultTask+0xc>

08001c68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c7a:	f001 f8eb 	bl	8002e54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40001000 	.word	0x40001000

08001c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c90:	b672      	cpsid	i
}
 8001c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <Error_Handler+0x8>
	...

08001c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	4a10      	ldr	r2, [pc, #64]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	210f      	movs	r1, #15
 8001cd2:	f06f 0001 	mvn.w	r0, #1
 8001cd6:	f001 fc41 	bl	800355c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800

08001ce8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a21      	ldr	r2, [pc, #132]	; (8001d8c <HAL_ADC_MspInit+0xa4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d13c      	bne.n	8001d84 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001d0a:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <HAL_ADC_MspInit+0xa8>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	4a20      	ldr	r2, [pc, #128]	; (8001d90 <HAL_ADC_MspInit+0xa8>)
 8001d10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d14:	6453      	str	r3, [r2, #68]	; 0x44
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <HAL_ADC_MspInit+0xa8>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d22:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <HAL_ADC_MspInit+0xa8>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a1a      	ldr	r2, [pc, #104]	; (8001d90 <HAL_ADC_MspInit+0xa8>)
 8001d28:	f043 0320 	orr.w	r3, r3, #32
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <HAL_ADC_MspInit+0xa8>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0320 	and.w	r3, r3, #32
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_ADC_MspInit+0xa8>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <HAL_ADC_MspInit+0xa8>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_ADC_MspInit+0xa8>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001d52:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001d56:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4619      	mov	r1, r3
 8001d66:	480b      	ldr	r0, [pc, #44]	; (8001d94 <HAL_ADC_MspInit+0xac>)
 8001d68:	f002 ffe0 	bl	8004d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d70:	2303      	movs	r3, #3
 8001d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4806      	ldr	r0, [pc, #24]	; (8001d98 <HAL_ADC_MspInit+0xb0>)
 8001d80:	f002 ffd4 	bl	8004d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d84:	bf00      	nop
 8001d86:	3728      	adds	r7, #40	; 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40012200 	.word	0x40012200
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40021400 	.word	0x40021400
 8001d98:	40020000 	.word	0x40020000

08001d9c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <HAL_CRC_MspInit+0x38>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d10b      	bne.n	8001dc6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_CRC_MspInit+0x3c>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <HAL_CRC_MspInit+0x3c>)
 8001db4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <HAL_CRC_MspInit+0x3c>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40023000 	.word	0x40023000
 8001dd8:	40023800 	.word	0x40023800

08001ddc <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08e      	sub	sp, #56	; 0x38
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a50      	ldr	r2, [pc, #320]	; (8001f3c <HAL_DCMI_MspInit+0x160>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	f040 809a 	bne.w	8001f34 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001e00:	4b4f      	ldr	r3, [pc, #316]	; (8001f40 <HAL_DCMI_MspInit+0x164>)
 8001e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e04:	4a4e      	ldr	r2, [pc, #312]	; (8001f40 <HAL_DCMI_MspInit+0x164>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6353      	str	r3, [r2, #52]	; 0x34
 8001e0c:	4b4c      	ldr	r3, [pc, #304]	; (8001f40 <HAL_DCMI_MspInit+0x164>)
 8001e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	623b      	str	r3, [r7, #32]
 8001e16:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e18:	4b49      	ldr	r3, [pc, #292]	; (8001f40 <HAL_DCMI_MspInit+0x164>)
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	4a48      	ldr	r2, [pc, #288]	; (8001f40 <HAL_DCMI_MspInit+0x164>)
 8001e1e:	f043 0310 	orr.w	r3, r3, #16
 8001e22:	6313      	str	r3, [r2, #48]	; 0x30
 8001e24:	4b46      	ldr	r3, [pc, #280]	; (8001f40 <HAL_DCMI_MspInit+0x164>)
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e30:	4b43      	ldr	r3, [pc, #268]	; (8001f40 <HAL_DCMI_MspInit+0x164>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	4a42      	ldr	r2, [pc, #264]	; (8001f40 <HAL_DCMI_MspInit+0x164>)
 8001e36:	f043 0308 	orr.w	r3, r3, #8
 8001e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3c:	4b40      	ldr	r3, [pc, #256]	; (8001f40 <HAL_DCMI_MspInit+0x164>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e48:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <HAL_DCMI_MspInit+0x164>)
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4c:	4a3c      	ldr	r2, [pc, #240]	; (8001f40 <HAL_DCMI_MspInit+0x164>)
 8001e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e52:	6313      	str	r3, [r2, #48]	; 0x30
 8001e54:	4b3a      	ldr	r3, [pc, #232]	; (8001f40 <HAL_DCMI_MspInit+0x164>)
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e60:	4b37      	ldr	r3, [pc, #220]	; (8001f40 <HAL_DCMI_MspInit+0x164>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	4a36      	ldr	r2, [pc, #216]	; (8001f40 <HAL_DCMI_MspInit+0x164>)
 8001e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6c:	4b34      	ldr	r3, [pc, #208]	; (8001f40 <HAL_DCMI_MspInit+0x164>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e78:	4b31      	ldr	r3, [pc, #196]	; (8001f40 <HAL_DCMI_MspInit+0x164>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	4a30      	ldr	r2, [pc, #192]	; (8001f40 <HAL_DCMI_MspInit+0x164>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6313      	str	r3, [r2, #48]	; 0x30
 8001e84:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <HAL_DCMI_MspInit+0x164>)
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001e90:	2360      	movs	r3, #96	; 0x60
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ea0:	230d      	movs	r3, #13
 8001ea2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4826      	ldr	r0, [pc, #152]	; (8001f44 <HAL_DCMI_MspInit+0x168>)
 8001eac:	f002 ff3e 	bl	8004d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001eb0:	2308      	movs	r3, #8
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ec0:	230d      	movs	r3, #13
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec8:	4619      	mov	r1, r3
 8001eca:	481f      	ldr	r0, [pc, #124]	; (8001f48 <HAL_DCMI_MspInit+0x16c>)
 8001ecc:	f002 ff2e 	bl	8004d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ee2:	230d      	movs	r3, #13
 8001ee4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eea:	4619      	mov	r1, r3
 8001eec:	4817      	ldr	r0, [pc, #92]	; (8001f4c <HAL_DCMI_MspInit+0x170>)
 8001eee:	f002 ff1d 	bl	8004d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001ef2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001f04:	230d      	movs	r3, #13
 8001f06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4810      	ldr	r0, [pc, #64]	; (8001f50 <HAL_DCMI_MspInit+0x174>)
 8001f10:	f002 ff0c 	bl	8004d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001f14:	2350      	movs	r3, #80	; 0x50
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001f24:	230d      	movs	r3, #13
 8001f26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4809      	ldr	r0, [pc, #36]	; (8001f54 <HAL_DCMI_MspInit+0x178>)
 8001f30:	f002 fefc 	bl	8004d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001f34:	bf00      	nop
 8001f36:	3738      	adds	r7, #56	; 0x38
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	50050000 	.word	0x50050000
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40020c00 	.word	0x40020c00
 8001f4c:	40021800 	.word	0x40021800
 8001f50:	40021c00 	.word	0x40021c00
 8001f54:	40020000 	.word	0x40020000

08001f58 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <HAL_DMA2D_MspInit+0x44>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d113      	bne.n	8001f92 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <HAL_DMA2D_MspInit+0x48>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a0c      	ldr	r2, [pc, #48]	; (8001fa0 <HAL_DMA2D_MspInit+0x48>)
 8001f70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <HAL_DMA2D_MspInit+0x48>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2105      	movs	r1, #5
 8001f86:	205a      	movs	r0, #90	; 0x5a
 8001f88:	f001 fae8 	bl	800355c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001f8c:	205a      	movs	r0, #90	; 0x5a
 8001f8e:	f001 fb01 	bl	8003594 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	4002b000 	.word	0x4002b000
 8001fa0:	40023800 	.word	0x40023800

08001fa4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08e      	sub	sp, #56	; 0x38
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a3f      	ldr	r2, [pc, #252]	; (80020c0 <HAL_ETH_MspInit+0x11c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d178      	bne.n	80020b8 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001fc6:	4b3f      	ldr	r3, [pc, #252]	; (80020c4 <HAL_ETH_MspInit+0x120>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a3e      	ldr	r2, [pc, #248]	; (80020c4 <HAL_ETH_MspInit+0x120>)
 8001fcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b3c      	ldr	r3, [pc, #240]	; (80020c4 <HAL_ETH_MspInit+0x120>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fda:	623b      	str	r3, [r7, #32]
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	4b39      	ldr	r3, [pc, #228]	; (80020c4 <HAL_ETH_MspInit+0x120>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a38      	ldr	r2, [pc, #224]	; (80020c4 <HAL_ETH_MspInit+0x120>)
 8001fe4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <HAL_ETH_MspInit+0x120>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ff2:	61fb      	str	r3, [r7, #28]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	4b33      	ldr	r3, [pc, #204]	; (80020c4 <HAL_ETH_MspInit+0x120>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a32      	ldr	r2, [pc, #200]	; (80020c4 <HAL_ETH_MspInit+0x120>)
 8001ffc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b30      	ldr	r3, [pc, #192]	; (80020c4 <HAL_ETH_MspInit+0x120>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800200e:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <HAL_ETH_MspInit+0x120>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a2c      	ldr	r2, [pc, #176]	; (80020c4 <HAL_ETH_MspInit+0x120>)
 8002014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <HAL_ETH_MspInit+0x120>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002026:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <HAL_ETH_MspInit+0x120>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4a26      	ldr	r2, [pc, #152]	; (80020c4 <HAL_ETH_MspInit+0x120>)
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_ETH_MspInit+0x120>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <HAL_ETH_MspInit+0x120>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a20      	ldr	r2, [pc, #128]	; (80020c4 <HAL_ETH_MspInit+0x120>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <HAL_ETH_MspInit+0x120>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002056:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002064:	2303      	movs	r3, #3
 8002066:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002068:	230b      	movs	r3, #11
 800206a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800206c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002070:	4619      	mov	r1, r3
 8002072:	4815      	ldr	r0, [pc, #84]	; (80020c8 <HAL_ETH_MspInit+0x124>)
 8002074:	f002 fe5a 	bl	8004d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002078:	2332      	movs	r3, #50	; 0x32
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002084:	2303      	movs	r3, #3
 8002086:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002088:	230b      	movs	r3, #11
 800208a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800208c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002090:	4619      	mov	r1, r3
 8002092:	480e      	ldr	r0, [pc, #56]	; (80020cc <HAL_ETH_MspInit+0x128>)
 8002094:	f002 fe4a 	bl	8004d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002098:	2386      	movs	r3, #134	; 0x86
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020a8:	230b      	movs	r3, #11
 80020aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b0:	4619      	mov	r1, r3
 80020b2:	4807      	ldr	r0, [pc, #28]	; (80020d0 <HAL_ETH_MspInit+0x12c>)
 80020b4:	f002 fe3a 	bl	8004d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80020b8:	bf00      	nop
 80020ba:	3738      	adds	r7, #56	; 0x38
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40028000 	.word	0x40028000
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40021800 	.word	0x40021800
 80020cc:	40020800 	.word	0x40020800
 80020d0:	40020000 	.word	0x40020000

080020d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08c      	sub	sp, #48	; 0x30
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 031c 	add.w	r3, r7, #28
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a2f      	ldr	r2, [pc, #188]	; (80021b0 <HAL_I2C_MspInit+0xdc>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d129      	bne.n	800214a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f6:	4b2f      	ldr	r3, [pc, #188]	; (80021b4 <HAL_I2C_MspInit+0xe0>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a2e      	ldr	r2, [pc, #184]	; (80021b4 <HAL_I2C_MspInit+0xe0>)
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b2c      	ldr	r3, [pc, #176]	; (80021b4 <HAL_I2C_MspInit+0xe0>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	61bb      	str	r3, [r7, #24]
 800210c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800210e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002114:	2312      	movs	r3, #18
 8002116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002118:	2301      	movs	r3, #1
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002120:	2304      	movs	r3, #4
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002124:	f107 031c 	add.w	r3, r7, #28
 8002128:	4619      	mov	r1, r3
 800212a:	4823      	ldr	r0, [pc, #140]	; (80021b8 <HAL_I2C_MspInit+0xe4>)
 800212c:	f002 fdfe 	bl	8004d2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002130:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_I2C_MspInit+0xe0>)
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	4a1f      	ldr	r2, [pc, #124]	; (80021b4 <HAL_I2C_MspInit+0xe0>)
 8002136:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800213a:	6413      	str	r3, [r2, #64]	; 0x40
 800213c:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_I2C_MspInit+0xe0>)
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002148:	e02d      	b.n	80021a6 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <HAL_I2C_MspInit+0xe8>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d128      	bne.n	80021a6 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <HAL_I2C_MspInit+0xe0>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	4a16      	ldr	r2, [pc, #88]	; (80021b4 <HAL_I2C_MspInit+0xe0>)
 800215a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215e:	6313      	str	r3, [r2, #48]	; 0x30
 8002160:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <HAL_I2C_MspInit+0xe0>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800216c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002172:	2312      	movs	r3, #18
 8002174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002176:	2301      	movs	r3, #1
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217a:	2303      	movs	r3, #3
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800217e:	2304      	movs	r3, #4
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002182:	f107 031c 	add.w	r3, r7, #28
 8002186:	4619      	mov	r1, r3
 8002188:	480d      	ldr	r0, [pc, #52]	; (80021c0 <HAL_I2C_MspInit+0xec>)
 800218a:	f002 fdcf 	bl	8004d2c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_I2C_MspInit+0xe0>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <HAL_I2C_MspInit+0xe0>)
 8002194:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002198:	6413      	str	r3, [r2, #64]	; 0x40
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_I2C_MspInit+0xe0>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
}
 80021a6:	bf00      	nop
 80021a8:	3730      	adds	r7, #48	; 0x30
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40005400 	.word	0x40005400
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020400 	.word	0x40020400
 80021bc:	40005c00 	.word	0x40005c00
 80021c0:	40021c00 	.word	0x40021c00

080021c4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08e      	sub	sp, #56	; 0x38
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a55      	ldr	r2, [pc, #340]	; (8002338 <HAL_LTDC_MspInit+0x174>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	f040 80a3 	bne.w	800232e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80021e8:	4b54      	ldr	r3, [pc, #336]	; (800233c <HAL_LTDC_MspInit+0x178>)
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	4a53      	ldr	r2, [pc, #332]	; (800233c <HAL_LTDC_MspInit+0x178>)
 80021ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021f2:	6453      	str	r3, [r2, #68]	; 0x44
 80021f4:	4b51      	ldr	r3, [pc, #324]	; (800233c <HAL_LTDC_MspInit+0x178>)
 80021f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021fc:	623b      	str	r3, [r7, #32]
 80021fe:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002200:	4b4e      	ldr	r3, [pc, #312]	; (800233c <HAL_LTDC_MspInit+0x178>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	4a4d      	ldr	r2, [pc, #308]	; (800233c <HAL_LTDC_MspInit+0x178>)
 8002206:	f043 0310 	orr.w	r3, r3, #16
 800220a:	6313      	str	r3, [r2, #48]	; 0x30
 800220c:	4b4b      	ldr	r3, [pc, #300]	; (800233c <HAL_LTDC_MspInit+0x178>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	f003 0310 	and.w	r3, r3, #16
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002218:	4b48      	ldr	r3, [pc, #288]	; (800233c <HAL_LTDC_MspInit+0x178>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	4a47      	ldr	r2, [pc, #284]	; (800233c <HAL_LTDC_MspInit+0x178>)
 800221e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002222:	6313      	str	r3, [r2, #48]	; 0x30
 8002224:	4b45      	ldr	r3, [pc, #276]	; (800233c <HAL_LTDC_MspInit+0x178>)
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002230:	4b42      	ldr	r3, [pc, #264]	; (800233c <HAL_LTDC_MspInit+0x178>)
 8002232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002234:	4a41      	ldr	r2, [pc, #260]	; (800233c <HAL_LTDC_MspInit+0x178>)
 8002236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800223a:	6313      	str	r3, [r2, #48]	; 0x30
 800223c:	4b3f      	ldr	r3, [pc, #252]	; (800233c <HAL_LTDC_MspInit+0x178>)
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002248:	4b3c      	ldr	r3, [pc, #240]	; (800233c <HAL_LTDC_MspInit+0x178>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	4a3b      	ldr	r2, [pc, #236]	; (800233c <HAL_LTDC_MspInit+0x178>)
 800224e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002252:	6313      	str	r3, [r2, #48]	; 0x30
 8002254:	4b39      	ldr	r3, [pc, #228]	; (800233c <HAL_LTDC_MspInit+0x178>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002260:	4b36      	ldr	r3, [pc, #216]	; (800233c <HAL_LTDC_MspInit+0x178>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	4a35      	ldr	r2, [pc, #212]	; (800233c <HAL_LTDC_MspInit+0x178>)
 8002266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226a:	6313      	str	r3, [r2, #48]	; 0x30
 800226c:	4b33      	ldr	r3, [pc, #204]	; (800233c <HAL_LTDC_MspInit+0x178>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002278:	2310      	movs	r3, #16
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002288:	230e      	movs	r3, #14
 800228a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800228c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002290:	4619      	mov	r1, r3
 8002292:	482b      	ldr	r0, [pc, #172]	; (8002340 <HAL_LTDC_MspInit+0x17c>)
 8002294:	f002 fd4a 	bl	8004d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002298:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	2302      	movs	r3, #2
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a6:	2300      	movs	r3, #0
 80022a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022aa:	230e      	movs	r3, #14
 80022ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80022ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b2:	4619      	mov	r1, r3
 80022b4:	4823      	ldr	r0, [pc, #140]	; (8002344 <HAL_LTDC_MspInit+0x180>)
 80022b6:	f002 fd39 	bl	8004d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80022ba:	23f7      	movs	r3, #247	; 0xf7
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c6:	2300      	movs	r3, #0
 80022c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022ca:	230e      	movs	r3, #14
 80022cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80022ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d2:	4619      	mov	r1, r3
 80022d4:	481c      	ldr	r0, [pc, #112]	; (8002348 <HAL_LTDC_MspInit+0x184>)
 80022d6:	f002 fd29 	bl	8004d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80022da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2300      	movs	r3, #0
 80022ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80022ec:	2309      	movs	r3, #9
 80022ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80022f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f4:	4619      	mov	r1, r3
 80022f6:	4815      	ldr	r0, [pc, #84]	; (800234c <HAL_LTDC_MspInit+0x188>)
 80022f8:	f002 fd18 	bl	8004d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80022fc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800230e:	230e      	movs	r3, #14
 8002310:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002316:	4619      	mov	r1, r3
 8002318:	480d      	ldr	r0, [pc, #52]	; (8002350 <HAL_LTDC_MspInit+0x18c>)
 800231a:	f002 fd07 	bl	8004d2c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	2105      	movs	r1, #5
 8002322:	2058      	movs	r0, #88	; 0x58
 8002324:	f001 f91a 	bl	800355c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002328:	2058      	movs	r0, #88	; 0x58
 800232a:	f001 f933 	bl	8003594 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800232e:	bf00      	nop
 8002330:	3738      	adds	r7, #56	; 0x38
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40016800 	.word	0x40016800
 800233c:	40023800 	.word	0x40023800
 8002340:	40021000 	.word	0x40021000
 8002344:	40022400 	.word	0x40022400
 8002348:	40022800 	.word	0x40022800
 800234c:	40021800 	.word	0x40021800
 8002350:	40022000 	.word	0x40022000

08002354 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08c      	sub	sp, #48	; 0x30
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 031c 	add.w	r3, r7, #28
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a3b      	ldr	r2, [pc, #236]	; (8002460 <HAL_QSPI_MspInit+0x10c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d170      	bne.n	8002458 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002376:	4b3b      	ldr	r3, [pc, #236]	; (8002464 <HAL_QSPI_MspInit+0x110>)
 8002378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237a:	4a3a      	ldr	r2, [pc, #232]	; (8002464 <HAL_QSPI_MspInit+0x110>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6393      	str	r3, [r2, #56]	; 0x38
 8002382:	4b38      	ldr	r3, [pc, #224]	; (8002464 <HAL_QSPI_MspInit+0x110>)
 8002384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800238e:	4b35      	ldr	r3, [pc, #212]	; (8002464 <HAL_QSPI_MspInit+0x110>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a34      	ldr	r2, [pc, #208]	; (8002464 <HAL_QSPI_MspInit+0x110>)
 8002394:	f043 0310 	orr.w	r3, r3, #16
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b32      	ldr	r3, [pc, #200]	; (8002464 <HAL_QSPI_MspInit+0x110>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a6:	4b2f      	ldr	r3, [pc, #188]	; (8002464 <HAL_QSPI_MspInit+0x110>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4a2e      	ldr	r2, [pc, #184]	; (8002464 <HAL_QSPI_MspInit+0x110>)
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
 80023b2:	4b2c      	ldr	r3, [pc, #176]	; (8002464 <HAL_QSPI_MspInit+0x110>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023be:	4b29      	ldr	r3, [pc, #164]	; (8002464 <HAL_QSPI_MspInit+0x110>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a28      	ldr	r2, [pc, #160]	; (8002464 <HAL_QSPI_MspInit+0x110>)
 80023c4:	f043 0308 	orr.w	r3, r3, #8
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b26      	ldr	r3, [pc, #152]	; (8002464 <HAL_QSPI_MspInit+0x110>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80023d6:	2304      	movs	r3, #4
 80023d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023da:	2302      	movs	r3, #2
 80023dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e2:	2303      	movs	r3, #3
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80023e6:	2309      	movs	r3, #9
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80023ea:	f107 031c 	add.w	r3, r7, #28
 80023ee:	4619      	mov	r1, r3
 80023f0:	481d      	ldr	r0, [pc, #116]	; (8002468 <HAL_QSPI_MspInit+0x114>)
 80023f2:	f002 fc9b 	bl	8004d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80023f6:	2340      	movs	r3, #64	; 0x40
 80023f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fa:	2302      	movs	r3, #2
 80023fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002402:	2303      	movs	r3, #3
 8002404:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002406:	230a      	movs	r3, #10
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800240a:	f107 031c 	add.w	r3, r7, #28
 800240e:	4619      	mov	r1, r3
 8002410:	4816      	ldr	r0, [pc, #88]	; (800246c <HAL_QSPI_MspInit+0x118>)
 8002412:	f002 fc8b 	bl	8004d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002416:	2304      	movs	r3, #4
 8002418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002422:	2303      	movs	r3, #3
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002426:	2309      	movs	r3, #9
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242a:	f107 031c 	add.w	r3, r7, #28
 800242e:	4619      	mov	r1, r3
 8002430:	480e      	ldr	r0, [pc, #56]	; (800246c <HAL_QSPI_MspInit+0x118>)
 8002432:	f002 fc7b 	bl	8004d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002436:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800243a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243c:	2302      	movs	r3, #2
 800243e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002444:	2303      	movs	r3, #3
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002448:	2309      	movs	r3, #9
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800244c:	f107 031c 	add.w	r3, r7, #28
 8002450:	4619      	mov	r1, r3
 8002452:	4807      	ldr	r0, [pc, #28]	; (8002470 <HAL_QSPI_MspInit+0x11c>)
 8002454:	f002 fc6a 	bl	8004d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002458:	bf00      	nop
 800245a:	3730      	adds	r7, #48	; 0x30
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	a0001000 	.word	0xa0001000
 8002464:	40023800 	.word	0x40023800
 8002468:	40021000 	.word	0x40021000
 800246c:	40020400 	.word	0x40020400
 8002470:	40020c00 	.word	0x40020c00

08002474 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a07      	ldr	r2, [pc, #28]	; (80024a0 <HAL_RTC_MspInit+0x2c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d105      	bne.n	8002492 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002486:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <HAL_RTC_MspInit+0x30>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248a:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <HAL_RTC_MspInit+0x30>)
 800248c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002490:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40002800 	.word	0x40002800
 80024a4:	40023800 	.word	0x40023800

080024a8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a25      	ldr	r2, [pc, #148]	; (800255c <HAL_SD_MspInit+0xb4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d144      	bne.n	8002554 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80024ca:	4b25      	ldr	r3, [pc, #148]	; (8002560 <HAL_SD_MspInit+0xb8>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	4a24      	ldr	r2, [pc, #144]	; (8002560 <HAL_SD_MspInit+0xb8>)
 80024d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024d4:	6453      	str	r3, [r2, #68]	; 0x44
 80024d6:	4b22      	ldr	r3, [pc, #136]	; (8002560 <HAL_SD_MspInit+0xb8>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e2:	4b1f      	ldr	r3, [pc, #124]	; (8002560 <HAL_SD_MspInit+0xb8>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a1e      	ldr	r2, [pc, #120]	; (8002560 <HAL_SD_MspInit+0xb8>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <HAL_SD_MspInit+0xb8>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024fa:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_SD_MspInit+0xb8>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a18      	ldr	r2, [pc, #96]	; (8002560 <HAL_SD_MspInit+0xb8>)
 8002500:	f043 0308 	orr.w	r3, r3, #8
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b16      	ldr	r3, [pc, #88]	; (8002560 <HAL_SD_MspInit+0xb8>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002512:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002516:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002520:	2303      	movs	r3, #3
 8002522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002524:	230c      	movs	r3, #12
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	4619      	mov	r1, r3
 800252e:	480d      	ldr	r0, [pc, #52]	; (8002564 <HAL_SD_MspInit+0xbc>)
 8002530:	f002 fbfc 	bl	8004d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002534:	2304      	movs	r3, #4
 8002536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002540:	2303      	movs	r3, #3
 8002542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002544:	230c      	movs	r3, #12
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	4619      	mov	r1, r3
 800254e:	4806      	ldr	r0, [pc, #24]	; (8002568 <HAL_SD_MspInit+0xc0>)
 8002550:	f002 fbec 	bl	8004d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002554:	bf00      	nop
 8002556:	3728      	adds	r7, #40	; 0x28
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40012c00 	.word	0x40012c00
 8002560:	40023800 	.word	0x40023800
 8002564:	40020800 	.word	0x40020800
 8002568:	40020c00 	.word	0x40020c00

0800256c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800258c:	d127      	bne.n	80025de <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800258e:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	4a15      	ldr	r2, [pc, #84]	; (80025e8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002598:	6413      	str	r3, [r2, #64]	; 0x40
 800259a:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <HAL_SPDIFRX_MspInit+0x7c>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_SPDIFRX_MspInit+0x7c>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a0f      	ldr	r2, [pc, #60]	; (80025e8 <HAL_SPDIFRX_MspInit+0x7c>)
 80025ac:	f043 0308 	orr.w	r3, r3, #8
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <HAL_SPDIFRX_MspInit+0x7c>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	2302      	movs	r3, #2
 80025c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ca:	2300      	movs	r3, #0
 80025cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80025ce:	2308      	movs	r3, #8
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4619      	mov	r1, r3
 80025d8:	4804      	ldr	r0, [pc, #16]	; (80025ec <HAL_SPDIFRX_MspInit+0x80>)
 80025da:	f002 fba7 	bl	8004d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80025de:	bf00      	nop
 80025e0:	3728      	adds	r7, #40	; 0x28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40020c00 	.word	0x40020c00

080025f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a25      	ldr	r2, [pc, #148]	; (80026a4 <HAL_SPI_MspInit+0xb4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d144      	bne.n	800269c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002612:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <HAL_SPI_MspInit+0xb8>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	4a24      	ldr	r2, [pc, #144]	; (80026a8 <HAL_SPI_MspInit+0xb8>)
 8002618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800261c:	6413      	str	r3, [r2, #64]	; 0x40
 800261e:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <HAL_SPI_MspInit+0xb8>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800262a:	4b1f      	ldr	r3, [pc, #124]	; (80026a8 <HAL_SPI_MspInit+0xb8>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	4a1e      	ldr	r2, [pc, #120]	; (80026a8 <HAL_SPI_MspInit+0xb8>)
 8002630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <HAL_SPI_MspInit+0xb8>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002642:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_SPI_MspInit+0xb8>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a18      	ldr	r2, [pc, #96]	; (80026a8 <HAL_SPI_MspInit+0xb8>)
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <HAL_SPI_MspInit+0xb8>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800265a:	2302      	movs	r3, #2
 800265c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002666:	2300      	movs	r3, #0
 8002668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800266a:	2305      	movs	r3, #5
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	4619      	mov	r1, r3
 8002674:	480d      	ldr	r0, [pc, #52]	; (80026ac <HAL_SPI_MspInit+0xbc>)
 8002676:	f002 fb59 	bl	8004d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800267a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800267e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002688:	2300      	movs	r3, #0
 800268a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800268c:	2305      	movs	r3, #5
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	4619      	mov	r1, r3
 8002696:	4806      	ldr	r0, [pc, #24]	; (80026b0 <HAL_SPI_MspInit+0xc0>)
 8002698:	f002 fb48 	bl	8004d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800269c:	bf00      	nop
 800269e:	3728      	adds	r7, #40	; 0x28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40003800 	.word	0x40003800
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40022000 	.word	0x40022000
 80026b0:	40020400 	.word	0x40020400

080026b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b089      	sub	sp, #36	; 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a2e      	ldr	r2, [pc, #184]	; (800277c <HAL_TIM_Base_MspInit+0xc8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d10c      	bne.n	80026e0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026c6:	4b2e      	ldr	r3, [pc, #184]	; (8002780 <HAL_TIM_Base_MspInit+0xcc>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	4a2d      	ldr	r2, [pc, #180]	; (8002780 <HAL_TIM_Base_MspInit+0xcc>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6453      	str	r3, [r2, #68]	; 0x44
 80026d2:	4b2b      	ldr	r3, [pc, #172]	; (8002780 <HAL_TIM_Base_MspInit+0xcc>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80026de:	e046      	b.n	800276e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e8:	d10c      	bne.n	8002704 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ea:	4b25      	ldr	r3, [pc, #148]	; (8002780 <HAL_TIM_Base_MspInit+0xcc>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a24      	ldr	r2, [pc, #144]	; (8002780 <HAL_TIM_Base_MspInit+0xcc>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
 80026f6:	4b22      	ldr	r3, [pc, #136]	; (8002780 <HAL_TIM_Base_MspInit+0xcc>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	61bb      	str	r3, [r7, #24]
 8002700:	69bb      	ldr	r3, [r7, #24]
}
 8002702:	e034      	b.n	800276e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a1e      	ldr	r2, [pc, #120]	; (8002784 <HAL_TIM_Base_MspInit+0xd0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10c      	bne.n	8002728 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800270e:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <HAL_TIM_Base_MspInit+0xcc>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a1b      	ldr	r2, [pc, #108]	; (8002780 <HAL_TIM_Base_MspInit+0xcc>)
 8002714:	f043 0302 	orr.w	r3, r3, #2
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_TIM_Base_MspInit+0xcc>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	697b      	ldr	r3, [r7, #20]
}
 8002726:	e022      	b.n	800276e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a16      	ldr	r2, [pc, #88]	; (8002788 <HAL_TIM_Base_MspInit+0xd4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d10c      	bne.n	800274c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002732:	4b13      	ldr	r3, [pc, #76]	; (8002780 <HAL_TIM_Base_MspInit+0xcc>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	4a12      	ldr	r2, [pc, #72]	; (8002780 <HAL_TIM_Base_MspInit+0xcc>)
 8002738:	f043 0308 	orr.w	r3, r3, #8
 800273c:	6413      	str	r3, [r2, #64]	; 0x40
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <HAL_TIM_Base_MspInit+0xcc>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	693b      	ldr	r3, [r7, #16]
}
 800274a:	e010      	b.n	800276e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0e      	ldr	r2, [pc, #56]	; (800278c <HAL_TIM_Base_MspInit+0xd8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d10b      	bne.n	800276e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002756:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <HAL_TIM_Base_MspInit+0xcc>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	4a09      	ldr	r2, [pc, #36]	; (8002780 <HAL_TIM_Base_MspInit+0xcc>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	6453      	str	r3, [r2, #68]	; 0x44
 8002762:	4b07      	ldr	r3, [pc, #28]	; (8002780 <HAL_TIM_Base_MspInit+0xcc>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
}
 800276e:	bf00      	nop
 8002770:	3724      	adds	r7, #36	; 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40010000 	.word	0x40010000
 8002780:	40023800 	.word	0x40023800
 8002784:	40000400 	.word	0x40000400
 8002788:	40000c00 	.word	0x40000c00
 800278c:	40010400 	.word	0x40010400

08002790 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08c      	sub	sp, #48	; 0x30
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 031c 	add.w	r3, r7, #28
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a45      	ldr	r2, [pc, #276]	; (80028c4 <HAL_TIM_MspPostInit+0x134>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d11d      	bne.n	80027ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b2:	4b45      	ldr	r3, [pc, #276]	; (80028c8 <HAL_TIM_MspPostInit+0x138>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	4a44      	ldr	r2, [pc, #272]	; (80028c8 <HAL_TIM_MspPostInit+0x138>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6313      	str	r3, [r2, #48]	; 0x30
 80027be:	4b42      	ldr	r3, [pc, #264]	; (80028c8 <HAL_TIM_MspPostInit+0x138>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	61bb      	str	r3, [r7, #24]
 80027c8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80027ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d0:	2302      	movs	r3, #2
 80027d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d8:	2300      	movs	r3, #0
 80027da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80027dc:	2301      	movs	r3, #1
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80027e0:	f107 031c 	add.w	r3, r7, #28
 80027e4:	4619      	mov	r1, r3
 80027e6:	4839      	ldr	r0, [pc, #228]	; (80028cc <HAL_TIM_MspPostInit+0x13c>)
 80027e8:	f002 faa0 	bl	8004d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80027ec:	e065      	b.n	80028ba <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM2)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f6:	d11d      	bne.n	8002834 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f8:	4b33      	ldr	r3, [pc, #204]	; (80028c8 <HAL_TIM_MspPostInit+0x138>)
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	4a32      	ldr	r2, [pc, #200]	; (80028c8 <HAL_TIM_MspPostInit+0x138>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6313      	str	r3, [r2, #48]	; 0x30
 8002804:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <HAL_TIM_MspPostInit+0x138>)
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002810:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002816:	2302      	movs	r3, #2
 8002818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002822:	2301      	movs	r3, #1
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002826:	f107 031c 	add.w	r3, r7, #28
 800282a:	4619      	mov	r1, r3
 800282c:	4827      	ldr	r0, [pc, #156]	; (80028cc <HAL_TIM_MspPostInit+0x13c>)
 800282e:	f002 fa7d 	bl	8004d2c <HAL_GPIO_Init>
}
 8002832:	e042      	b.n	80028ba <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a25      	ldr	r2, [pc, #148]	; (80028d0 <HAL_TIM_MspPostInit+0x140>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d11c      	bne.n	8002878 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800283e:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <HAL_TIM_MspPostInit+0x138>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a21      	ldr	r2, [pc, #132]	; (80028c8 <HAL_TIM_MspPostInit+0x138>)
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b1f      	ldr	r3, [pc, #124]	; (80028c8 <HAL_TIM_MspPostInit+0x138>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002856:	2310      	movs	r3, #16
 8002858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
 800285c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	2300      	movs	r3, #0
 8002864:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002866:	2302      	movs	r3, #2
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800286a:	f107 031c 	add.w	r3, r7, #28
 800286e:	4619      	mov	r1, r3
 8002870:	4818      	ldr	r0, [pc, #96]	; (80028d4 <HAL_TIM_MspPostInit+0x144>)
 8002872:	f002 fa5b 	bl	8004d2c <HAL_GPIO_Init>
}
 8002876:	e020      	b.n	80028ba <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a16      	ldr	r2, [pc, #88]	; (80028d8 <HAL_TIM_MspPostInit+0x148>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d11b      	bne.n	80028ba <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002882:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_TIM_MspPostInit+0x138>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a10      	ldr	r2, [pc, #64]	; (80028c8 <HAL_TIM_MspPostInit+0x138>)
 8002888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <HAL_TIM_MspPostInit+0x138>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800289a:	2301      	movs	r3, #1
 800289c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a6:	2300      	movs	r3, #0
 80028a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80028aa:	2302      	movs	r3, #2
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80028ae:	f107 031c 	add.w	r3, r7, #28
 80028b2:	4619      	mov	r1, r3
 80028b4:	4809      	ldr	r0, [pc, #36]	; (80028dc <HAL_TIM_MspPostInit+0x14c>)
 80028b6:	f002 fa39 	bl	8004d2c <HAL_GPIO_Init>
}
 80028ba:	bf00      	nop
 80028bc:	3730      	adds	r7, #48	; 0x30
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40010000 	.word	0x40010000
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40020000 	.word	0x40020000
 80028d0:	40000400 	.word	0x40000400
 80028d4:	40020400 	.word	0x40020400
 80028d8:	40000c00 	.word	0x40000c00
 80028dc:	40022000 	.word	0x40022000

080028e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08c      	sub	sp, #48	; 0x30
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e8:	f107 031c 	add.w	r3, r7, #28
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
 80028f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a3c      	ldr	r2, [pc, #240]	; (80029f0 <HAL_UART_MspInit+0x110>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d145      	bne.n	800298e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002902:	4b3c      	ldr	r3, [pc, #240]	; (80029f4 <HAL_UART_MspInit+0x114>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	4a3b      	ldr	r2, [pc, #236]	; (80029f4 <HAL_UART_MspInit+0x114>)
 8002908:	f043 0310 	orr.w	r3, r3, #16
 800290c:	6453      	str	r3, [r2, #68]	; 0x44
 800290e:	4b39      	ldr	r3, [pc, #228]	; (80029f4 <HAL_UART_MspInit+0x114>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f003 0310 	and.w	r3, r3, #16
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291a:	4b36      	ldr	r3, [pc, #216]	; (80029f4 <HAL_UART_MspInit+0x114>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	4a35      	ldr	r2, [pc, #212]	; (80029f4 <HAL_UART_MspInit+0x114>)
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	6313      	str	r3, [r2, #48]	; 0x30
 8002926:	4b33      	ldr	r3, [pc, #204]	; (80029f4 <HAL_UART_MspInit+0x114>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002932:	4b30      	ldr	r3, [pc, #192]	; (80029f4 <HAL_UART_MspInit+0x114>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a2f      	ldr	r2, [pc, #188]	; (80029f4 <HAL_UART_MspInit+0x114>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <HAL_UART_MspInit+0x114>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002956:	2300      	movs	r3, #0
 8002958:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800295a:	2307      	movs	r3, #7
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800295e:	f107 031c 	add.w	r3, r7, #28
 8002962:	4619      	mov	r1, r3
 8002964:	4824      	ldr	r0, [pc, #144]	; (80029f8 <HAL_UART_MspInit+0x118>)
 8002966:	f002 f9e1 	bl	8004d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800296a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800296e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002970:	2302      	movs	r3, #2
 8002972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002978:	2300      	movs	r3, #0
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800297c:	2307      	movs	r3, #7
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002980:	f107 031c 	add.w	r3, r7, #28
 8002984:	4619      	mov	r1, r3
 8002986:	481d      	ldr	r0, [pc, #116]	; (80029fc <HAL_UART_MspInit+0x11c>)
 8002988:	f002 f9d0 	bl	8004d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800298c:	e02c      	b.n	80029e8 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1b      	ldr	r2, [pc, #108]	; (8002a00 <HAL_UART_MspInit+0x120>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d127      	bne.n	80029e8 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002998:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <HAL_UART_MspInit+0x114>)
 800299a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299c:	4a15      	ldr	r2, [pc, #84]	; (80029f4 <HAL_UART_MspInit+0x114>)
 800299e:	f043 0320 	orr.w	r3, r3, #32
 80029a2:	6453      	str	r3, [r2, #68]	; 0x44
 80029a4:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <HAL_UART_MspInit+0x114>)
 80029a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b0:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <HAL_UART_MspInit+0x114>)
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	4a0f      	ldr	r2, [pc, #60]	; (80029f4 <HAL_UART_MspInit+0x114>)
 80029b6:	f043 0304 	orr.w	r3, r3, #4
 80029ba:	6313      	str	r3, [r2, #48]	; 0x30
 80029bc:	4b0d      	ldr	r3, [pc, #52]	; (80029f4 <HAL_UART_MspInit+0x114>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80029c8:	23c0      	movs	r3, #192	; 0xc0
 80029ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d4:	2303      	movs	r3, #3
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80029d8:	2308      	movs	r3, #8
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029dc:	f107 031c 	add.w	r3, r7, #28
 80029e0:	4619      	mov	r1, r3
 80029e2:	4808      	ldr	r0, [pc, #32]	; (8002a04 <HAL_UART_MspInit+0x124>)
 80029e4:	f002 f9a2 	bl	8004d2c <HAL_GPIO_Init>
}
 80029e8:	bf00      	nop
 80029ea:	3730      	adds	r7, #48	; 0x30
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40011000 	.word	0x40011000
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40020400 	.word	0x40020400
 80029fc:	40020000 	.word	0x40020000
 8002a00:	40011400 	.word	0x40011400
 8002a04:	40020800 	.word	0x40020800

08002a08 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002a1c:	4b3a      	ldr	r3, [pc, #232]	; (8002b08 <HAL_FMC_MspInit+0x100>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d16d      	bne.n	8002b00 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002a24:	4b38      	ldr	r3, [pc, #224]	; (8002b08 <HAL_FMC_MspInit+0x100>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002a2a:	4b38      	ldr	r3, [pc, #224]	; (8002b0c <HAL_FMC_MspInit+0x104>)
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	4a37      	ldr	r2, [pc, #220]	; (8002b0c <HAL_FMC_MspInit+0x104>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6393      	str	r3, [r2, #56]	; 0x38
 8002a36:	4b35      	ldr	r3, [pc, #212]	; (8002b0c <HAL_FMC_MspInit+0x104>)
 8002a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002a42:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002a46:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a50:	2303      	movs	r3, #3
 8002a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a54:	230c      	movs	r3, #12
 8002a56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	482c      	ldr	r0, [pc, #176]	; (8002b10 <HAL_FMC_MspInit+0x108>)
 8002a5e:	f002 f965 	bl	8004d2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002a62:	f248 1333 	movw	r3, #33075	; 0x8133
 8002a66:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a70:	2303      	movs	r3, #3
 8002a72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a74:	230c      	movs	r3, #12
 8002a76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a78:	1d3b      	adds	r3, r7, #4
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4825      	ldr	r0, [pc, #148]	; (8002b14 <HAL_FMC_MspInit+0x10c>)
 8002a7e:	f002 f955 	bl	8004d2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002a82:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002a86:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a90:	2303      	movs	r3, #3
 8002a92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a94:	230c      	movs	r3, #12
 8002a96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a98:	1d3b      	adds	r3, r7, #4
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	481e      	ldr	r0, [pc, #120]	; (8002b18 <HAL_FMC_MspInit+0x110>)
 8002a9e:	f002 f945 	bl	8004d2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002aa2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002aa6:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ab4:	230c      	movs	r3, #12
 8002ab6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	4619      	mov	r1, r3
 8002abc:	4817      	ldr	r0, [pc, #92]	; (8002b1c <HAL_FMC_MspInit+0x114>)
 8002abe:	f002 f935 	bl	8004d2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002ac2:	2328      	movs	r3, #40	; 0x28
 8002ac4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ad2:	230c      	movs	r3, #12
 8002ad4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ad6:	1d3b      	adds	r3, r7, #4
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4811      	ldr	r0, [pc, #68]	; (8002b20 <HAL_FMC_MspInit+0x118>)
 8002adc:	f002 f926 	bl	8004d2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002ae0:	2308      	movs	r3, #8
 8002ae2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aec:	2303      	movs	r3, #3
 8002aee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002af0:	230c      	movs	r3, #12
 8002af2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002af4:	1d3b      	adds	r3, r7, #4
 8002af6:	4619      	mov	r1, r3
 8002af8:	480a      	ldr	r0, [pc, #40]	; (8002b24 <HAL_FMC_MspInit+0x11c>)
 8002afa:	f002 f917 	bl	8004d2c <HAL_GPIO_Init>
 8002afe:	e000      	b.n	8002b02 <HAL_FMC_MspInit+0xfa>
    return;
 8002b00:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20000b04 	.word	0x20000b04
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40021800 	.word	0x40021800
 8002b18:	40020c00 	.word	0x40020c00
 8002b1c:	40021400 	.word	0x40021400
 8002b20:	40021c00 	.word	0x40021c00
 8002b24:	40020800 	.word	0x40020800

08002b28 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002b30:	f7ff ff6a 	bl	8002a08 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	; 0x28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a2b      	ldr	r2, [pc, #172]	; (8002bf8 <HAL_SAI_MspInit+0xbc>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d124      	bne.n	8002b98 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002b4e:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <HAL_SAI_MspInit+0xc0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10b      	bne.n	8002b6e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002b56:	4b2a      	ldr	r3, [pc, #168]	; (8002c00 <HAL_SAI_MspInit+0xc4>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	4a29      	ldr	r2, [pc, #164]	; (8002c00 <HAL_SAI_MspInit+0xc4>)
 8002b5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b60:	6453      	str	r3, [r2, #68]	; 0x44
 8002b62:	4b27      	ldr	r3, [pc, #156]	; (8002c00 <HAL_SAI_MspInit+0xc4>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002b6e:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <HAL_SAI_MspInit+0xc0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3301      	adds	r3, #1
 8002b74:	4a21      	ldr	r2, [pc, #132]	; (8002bfc <HAL_SAI_MspInit+0xc0>)
 8002b76:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002b78:	23f0      	movs	r3, #240	; 0xf0
 8002b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b84:	2300      	movs	r3, #0
 8002b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002b88:	230a      	movs	r3, #10
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	4619      	mov	r1, r3
 8002b92:	481c      	ldr	r0, [pc, #112]	; (8002c04 <HAL_SAI_MspInit+0xc8>)
 8002b94:	f002 f8ca 	bl	8004d2c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a1a      	ldr	r2, [pc, #104]	; (8002c08 <HAL_SAI_MspInit+0xcc>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d125      	bne.n	8002bee <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002ba2:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <HAL_SAI_MspInit+0xc0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10b      	bne.n	8002bc2 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <HAL_SAI_MspInit+0xc4>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	4a14      	ldr	r2, [pc, #80]	; (8002c00 <HAL_SAI_MspInit+0xc4>)
 8002bb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb6:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_SAI_MspInit+0xc4>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <HAL_SAI_MspInit+0xc0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	4a0c      	ldr	r2, [pc, #48]	; (8002bfc <HAL_SAI_MspInit+0xc0>)
 8002bca:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002bde:	230a      	movs	r3, #10
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002be2:	f107 0314 	add.w	r3, r7, #20
 8002be6:	4619      	mov	r1, r3
 8002be8:	4808      	ldr	r0, [pc, #32]	; (8002c0c <HAL_SAI_MspInit+0xd0>)
 8002bea:	f002 f89f 	bl	8004d2c <HAL_GPIO_Init>

    }
}
 8002bee:	bf00      	nop
 8002bf0:	3728      	adds	r7, #40	; 0x28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40015c04 	.word	0x40015c04
 8002bfc:	20000b08 	.word	0x20000b08
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40022000 	.word	0x40022000
 8002c08:	40015c24 	.word	0x40015c24
 8002c0c:	40021800 	.word	0x40021800

08002c10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08c      	sub	sp, #48	; 0x30
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002c20:	2200      	movs	r2, #0
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	2036      	movs	r0, #54	; 0x36
 8002c26:	f000 fc99 	bl	800355c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c2a:	2036      	movs	r0, #54	; 0x36
 8002c2c:	f000 fcb2 	bl	8003594 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c30:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <HAL_InitTick+0xa0>)
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	4a1e      	ldr	r2, [pc, #120]	; (8002cb0 <HAL_InitTick+0xa0>)
 8002c36:	f043 0310 	orr.w	r3, r3, #16
 8002c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3c:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <HAL_InitTick+0xa0>)
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c48:	f107 0210 	add.w	r2, r7, #16
 8002c4c:	f107 0314 	add.w	r3, r7, #20
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f005 fa10 	bl	8008078 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002c58:	f005 f9e6 	bl	8008028 <HAL_RCC_GetPCLK1Freq>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c64:	4a13      	ldr	r2, [pc, #76]	; (8002cb4 <HAL_InitTick+0xa4>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	0c9b      	lsrs	r3, r3, #18
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c70:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <HAL_InitTick+0xa8>)
 8002c72:	4a12      	ldr	r2, [pc, #72]	; (8002cbc <HAL_InitTick+0xac>)
 8002c74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c76:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <HAL_InitTick+0xa8>)
 8002c78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c7c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c7e:	4a0e      	ldr	r2, [pc, #56]	; (8002cb8 <HAL_InitTick+0xa8>)
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <HAL_InitTick+0xa8>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_InitTick+0xa8>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002c90:	4809      	ldr	r0, [pc, #36]	; (8002cb8 <HAL_InitTick+0xa8>)
 8002c92:	f007 ff0a 	bl	800aaaa <HAL_TIM_Base_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d104      	bne.n	8002ca6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002c9c:	4806      	ldr	r0, [pc, #24]	; (8002cb8 <HAL_InitTick+0xa8>)
 8002c9e:	f007 ff5b 	bl	800ab58 <HAL_TIM_Base_Start_IT>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	e000      	b.n	8002ca8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3730      	adds	r7, #48	; 0x30
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	431bde83 	.word	0x431bde83
 8002cb8:	20000b0c 	.word	0x20000b0c
 8002cbc:	40001000 	.word	0x40001000

08002cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cc4:	e7fe      	b.n	8002cc4 <NMI_Handler+0x4>

08002cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cca:	e7fe      	b.n	8002cca <HardFault_Handler+0x4>

08002ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cd0:	e7fe      	b.n	8002cd0 <MemManage_Handler+0x4>

08002cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cd6:	e7fe      	b.n	8002cd6 <BusFault_Handler+0x4>

08002cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cdc:	e7fe      	b.n	8002cdc <UsageFault_Handler+0x4>

08002cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002cf0:	2008      	movs	r0, #8
 8002cf2:	f002 f9f9 	bl	80050e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  /* USER CODE END EXTI3_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002cfe:	2040      	movs	r0, #64	; 0x40
 8002d00:	f002 f9f2 	bl	80050e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d0c:	4802      	ldr	r0, [pc, #8]	; (8002d18 <TIM6_DAC_IRQHandler+0x10>)
 8002d0e:	f007 fffc 	bl	800ad0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20000b0c 	.word	0x20000b0c

08002d1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002d20:	4802      	ldr	r0, [pc, #8]	; (8002d2c <OTG_FS_IRQHandler+0x10>)
 8002d22:	f002 fc63 	bl	80055ec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	200092fc 	.word	0x200092fc

08002d30 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002d34:	4802      	ldr	r0, [pc, #8]	; (8002d40 <LTDC_IRQHandler+0x10>)
 8002d36:	f004 f94b 	bl	8006fd0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	200004f0 	.word	0x200004f0

08002d44 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002d48:	4802      	ldr	r0, [pc, #8]	; (8002d54 <DMA2D_IRQHandler+0x10>)
 8002d4a:	f001 f94b 	bl	8003fe4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	200003d0 	.word	0x200003d0

08002d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d60:	4a14      	ldr	r2, [pc, #80]	; (8002db4 <_sbrk+0x5c>)
 8002d62:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <_sbrk+0x60>)
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d6c:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <_sbrk+0x64>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d102      	bne.n	8002d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <_sbrk+0x64>)
 8002d76:	4a12      	ldr	r2, [pc, #72]	; (8002dc0 <_sbrk+0x68>)
 8002d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d7a:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <_sbrk+0x64>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d207      	bcs.n	8002d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d88:	f011 fad4 	bl	8014334 <__errno>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	220c      	movs	r2, #12
 8002d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d96:	e009      	b.n	8002dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d98:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <_sbrk+0x64>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d9e:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <_sbrk+0x64>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	4a05      	ldr	r2, [pc, #20]	; (8002dbc <_sbrk+0x64>)
 8002da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002daa:	68fb      	ldr	r3, [r7, #12]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20050000 	.word	0x20050000
 8002db8:	00000400 	.word	0x00000400
 8002dbc:	20000b60 	.word	0x20000b60
 8002dc0:	20009610 	.word	0x20009610

08002dc4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <SystemInit+0x20>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dce:	4a05      	ldr	r2, [pc, #20]	; (8002de4 <SystemInit+0x20>)
 8002dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dec:	480d      	ldr	r0, [pc, #52]	; (8002e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dee:	490e      	ldr	r1, [pc, #56]	; (8002e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002df0:	4a0e      	ldr	r2, [pc, #56]	; (8002e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002df4:	e002      	b.n	8002dfc <LoopCopyDataInit>

08002df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dfa:	3304      	adds	r3, #4

08002dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e00:	d3f9      	bcc.n	8002df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e02:	4a0b      	ldr	r2, [pc, #44]	; (8002e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e04:	4c0b      	ldr	r4, [pc, #44]	; (8002e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e08:	e001      	b.n	8002e0e <LoopFillZerobss>

08002e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e0c:	3204      	adds	r2, #4

08002e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e10:	d3fb      	bcc.n	8002e0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e12:	f7ff ffd7 	bl	8002dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e16:	f011 fa93 	bl	8014340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e1a:	f7fd fbff 	bl	800061c <main>
  bx  lr    
 8002e1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e20:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e28:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002e2c:	08016878 	.word	0x08016878
  ldr r2, =_sbss
 8002e30:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002e34:	20009610 	.word	0x20009610

08002e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e38:	e7fe      	b.n	8002e38 <ADC_IRQHandler>

08002e3a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e3e:	2003      	movs	r0, #3
 8002e40:	f000 fb81 	bl	8003546 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7ff fee3 	bl	8002c10 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002e4a:	f7fe ff25 	bl	8001c98 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e58:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_IncTick+0x20>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_IncTick+0x24>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4413      	add	r3, r2
 8002e64:	4a04      	ldr	r2, [pc, #16]	; (8002e78 <HAL_IncTick+0x24>)
 8002e66:	6013      	str	r3, [r2, #0]
}
 8002e68:	bf00      	nop
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000008 	.word	0x20000008
 8002e78:	20000b64 	.word	0x20000b64

08002e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_GetTick+0x14>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000b64 	.word	0x20000b64

08002e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e9c:	f7ff ffee 	bl	8002e7c <HAL_GetTick>
 8002ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eac:	d005      	beq.n	8002eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <HAL_Delay+0x44>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eba:	bf00      	nop
 8002ebc:	f7ff ffde 	bl	8002e7c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d8f7      	bhi.n	8002ebc <HAL_Delay+0x28>
  {
  }
}
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000008 	.word	0x20000008

08002edc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e031      	b.n	8002f56 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fe fef4 	bl	8001ce8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d116      	bne.n	8002f48 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f1e:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <HAL_ADC_Init+0x84>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	f043 0202 	orr.w	r2, r3, #2
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f964 	bl	80031f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f023 0303 	bic.w	r3, r3, #3
 8002f3e:	f043 0201 	orr.w	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40
 8002f46:	e001      	b.n	8002f4c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	ffffeefd 	.word	0xffffeefd

08002f64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x1c>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e12a      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x272>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b09      	cmp	r3, #9
 8002f8e:	d93a      	bls.n	8003006 <HAL_ADC_ConfigChannel+0xa2>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f98:	d035      	beq.n	8003006 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68d9      	ldr	r1, [r3, #12]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4613      	mov	r3, r2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	4413      	add	r3, r2
 8002fae:	3b1e      	subs	r3, #30
 8002fb0:	2207      	movs	r2, #7
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	400a      	ands	r2, r1
 8002fbe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a87      	ldr	r2, [pc, #540]	; (80031e4 <HAL_ADC_ConfigChannel+0x280>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d10a      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68d9      	ldr	r1, [r3, #12]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	061a      	lsls	r2, r3, #24
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fde:	e035      	b.n	800304c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68d9      	ldr	r1, [r3, #12]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4403      	add	r3, r0
 8002ff8:	3b1e      	subs	r3, #30
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003004:	e022      	b.n	800304c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6919      	ldr	r1, [r3, #16]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	b29b      	uxth	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	4613      	mov	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	4413      	add	r3, r2
 800301a:	2207      	movs	r2, #7
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43da      	mvns	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	400a      	ands	r2, r1
 8003028:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6919      	ldr	r1, [r3, #16]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	b29b      	uxth	r3, r3
 800303a:	4618      	mov	r0, r3
 800303c:	4603      	mov	r3, r0
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4403      	add	r3, r0
 8003042:	409a      	lsls	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b06      	cmp	r3, #6
 8003052:	d824      	bhi.n	800309e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	3b05      	subs	r3, #5
 8003066:	221f      	movs	r2, #31
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43da      	mvns	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	400a      	ands	r2, r1
 8003074:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	b29b      	uxth	r3, r3
 8003082:	4618      	mov	r0, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	3b05      	subs	r3, #5
 8003090:	fa00 f203 	lsl.w	r2, r0, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	635a      	str	r2, [r3, #52]	; 0x34
 800309c:	e04c      	b.n	8003138 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d824      	bhi.n	80030f0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	3b23      	subs	r3, #35	; 0x23
 80030b8:	221f      	movs	r2, #31
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	400a      	ands	r2, r1
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	4618      	mov	r0, r3
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	3b23      	subs	r3, #35	; 0x23
 80030e2:	fa00 f203 	lsl.w	r2, r0, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30
 80030ee:	e023      	b.n	8003138 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	3b41      	subs	r3, #65	; 0x41
 8003102:	221f      	movs	r2, #31
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43da      	mvns	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	400a      	ands	r2, r1
 8003110:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	b29b      	uxth	r3, r3
 800311e:	4618      	mov	r0, r3
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	3b41      	subs	r3, #65	; 0x41
 800312c:	fa00 f203 	lsl.w	r2, r0, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a2a      	ldr	r2, [pc, #168]	; (80031e8 <HAL_ADC_ConfigChannel+0x284>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d10a      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x1f4>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800314a:	d105      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800314c:	4b27      	ldr	r3, [pc, #156]	; (80031ec <HAL_ADC_ConfigChannel+0x288>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	4a26      	ldr	r2, [pc, #152]	; (80031ec <HAL_ADC_ConfigChannel+0x288>)
 8003152:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003156:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a22      	ldr	r2, [pc, #136]	; (80031e8 <HAL_ADC_ConfigChannel+0x284>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d109      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x212>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b12      	cmp	r3, #18
 8003168:	d105      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800316a:	4b20      	ldr	r3, [pc, #128]	; (80031ec <HAL_ADC_ConfigChannel+0x288>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4a1f      	ldr	r2, [pc, #124]	; (80031ec <HAL_ADC_ConfigChannel+0x288>)
 8003170:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003174:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a1b      	ldr	r2, [pc, #108]	; (80031e8 <HAL_ADC_ConfigChannel+0x284>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d125      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x268>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a17      	ldr	r2, [pc, #92]	; (80031e4 <HAL_ADC_ConfigChannel+0x280>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d003      	beq.n	8003192 <HAL_ADC_ConfigChannel+0x22e>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b11      	cmp	r3, #17
 8003190:	d11c      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003192:	4b16      	ldr	r3, [pc, #88]	; (80031ec <HAL_ADC_ConfigChannel+0x288>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	4a15      	ldr	r2, [pc, #84]	; (80031ec <HAL_ADC_ConfigChannel+0x288>)
 8003198:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800319c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a10      	ldr	r2, [pc, #64]	; (80031e4 <HAL_ADC_ConfigChannel+0x280>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d111      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80031a8:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <HAL_ADC_ConfigChannel+0x28c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a11      	ldr	r2, [pc, #68]	; (80031f4 <HAL_ADC_ConfigChannel+0x290>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	0c9a      	lsrs	r2, r3, #18
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80031be:	e002      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f9      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	10000012 	.word	0x10000012
 80031e8:	40012000 	.word	0x40012000
 80031ec:	40012300 	.word	0x40012300
 80031f0:	20000000 	.word	0x20000000
 80031f4:	431bde83 	.word	0x431bde83

080031f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003200:	4b78      	ldr	r3, [pc, #480]	; (80033e4 <ADC_Init+0x1ec>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	4a77      	ldr	r2, [pc, #476]	; (80033e4 <ADC_Init+0x1ec>)
 8003206:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800320a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800320c:	4b75      	ldr	r3, [pc, #468]	; (80033e4 <ADC_Init+0x1ec>)
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4973      	ldr	r1, [pc, #460]	; (80033e4 <ADC_Init+0x1ec>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003228:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6859      	ldr	r1, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	021a      	lsls	r2, r3, #8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800324c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6859      	ldr	r1, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800326e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6899      	ldr	r1, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	4a58      	ldr	r2, [pc, #352]	; (80033e8 <ADC_Init+0x1f0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d022      	beq.n	80032d2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800329a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6899      	ldr	r1, [r3, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6899      	ldr	r1, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	e00f      	b.n	80032f2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0202 	bic.w	r2, r2, #2
 8003300:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6899      	ldr	r1, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	005a      	lsls	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3020 	ldrb.w	r3, [r3, #32]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01b      	beq.n	8003358 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800332e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800333e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	3b01      	subs	r3, #1
 800334c:	035a      	lsls	r2, r3, #13
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]
 8003356:	e007      	b.n	8003368 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003366:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003376:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	3b01      	subs	r3, #1
 8003384:	051a      	lsls	r2, r3, #20
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800339c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6899      	ldr	r1, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033aa:	025a      	lsls	r2, r3, #9
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6899      	ldr	r1, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	029a      	lsls	r2, r3, #10
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	609a      	str	r2, [r3, #8]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	40012300 	.word	0x40012300
 80033e8:	0f000001 	.word	0x0f000001

080033ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <__NVIC_SetPriorityGrouping+0x40>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003408:	4013      	ands	r3, r2
 800340a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <__NVIC_SetPriorityGrouping+0x44>)
 8003416:	4313      	orrs	r3, r2
 8003418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800341a:	4a04      	ldr	r2, [pc, #16]	; (800342c <__NVIC_SetPriorityGrouping+0x40>)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	60d3      	str	r3, [r2, #12]
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	e000ed00 	.word	0xe000ed00
 8003430:	05fa0000 	.word	0x05fa0000

08003434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003438:	4b04      	ldr	r3, [pc, #16]	; (800344c <__NVIC_GetPriorityGrouping+0x18>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	0a1b      	lsrs	r3, r3, #8
 800343e:	f003 0307 	and.w	r3, r3, #7
}
 8003442:	4618      	mov	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	2b00      	cmp	r3, #0
 8003460:	db0b      	blt.n	800347a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	f003 021f 	and.w	r2, r3, #31
 8003468:	4907      	ldr	r1, [pc, #28]	; (8003488 <__NVIC_EnableIRQ+0x38>)
 800346a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	2001      	movs	r0, #1
 8003472:	fa00 f202 	lsl.w	r2, r0, r2
 8003476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	e000e100 	.word	0xe000e100

0800348c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	6039      	str	r1, [r7, #0]
 8003496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349c:	2b00      	cmp	r3, #0
 800349e:	db0a      	blt.n	80034b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	490c      	ldr	r1, [pc, #48]	; (80034d8 <__NVIC_SetPriority+0x4c>)
 80034a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034aa:	0112      	lsls	r2, r2, #4
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	440b      	add	r3, r1
 80034b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034b4:	e00a      	b.n	80034cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	4908      	ldr	r1, [pc, #32]	; (80034dc <__NVIC_SetPriority+0x50>)
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	3b04      	subs	r3, #4
 80034c4:	0112      	lsls	r2, r2, #4
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	440b      	add	r3, r1
 80034ca:	761a      	strb	r2, [r3, #24]
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000e100 	.word	0xe000e100
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b089      	sub	sp, #36	; 0x24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f1c3 0307 	rsb	r3, r3, #7
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	bf28      	it	cs
 80034fe:	2304      	movcs	r3, #4
 8003500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3304      	adds	r3, #4
 8003506:	2b06      	cmp	r3, #6
 8003508:	d902      	bls.n	8003510 <NVIC_EncodePriority+0x30>
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3b03      	subs	r3, #3
 800350e:	e000      	b.n	8003512 <NVIC_EncodePriority+0x32>
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43da      	mvns	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	401a      	ands	r2, r3
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003528:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	fa01 f303 	lsl.w	r3, r1, r3
 8003532:	43d9      	mvns	r1, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003538:	4313      	orrs	r3, r2
         );
}
 800353a:	4618      	mov	r0, r3
 800353c:	3724      	adds	r7, #36	; 0x24
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff ff4c 	bl	80033ec <__NVIC_SetPriorityGrouping>
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800356e:	f7ff ff61 	bl	8003434 <__NVIC_GetPriorityGrouping>
 8003572:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	68b9      	ldr	r1, [r7, #8]
 8003578:	6978      	ldr	r0, [r7, #20]
 800357a:	f7ff ffb1 	bl	80034e0 <NVIC_EncodePriority>
 800357e:	4602      	mov	r2, r0
 8003580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003584:	4611      	mov	r1, r2
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff ff80 	bl	800348c <__NVIC_SetPriority>
}
 800358c:	bf00      	nop
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800359e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff ff54 	bl	8003450 <__NVIC_EnableIRQ>
}
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e054      	b.n	800366c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	7f5b      	ldrb	r3, [r3, #29]
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d105      	bne.n	80035d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fe fbe2 	bl	8001d9c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	791b      	ldrb	r3, [r3, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10c      	bne.n	8003600 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a22      	ldr	r2, [pc, #136]	; (8003674 <HAL_CRC_Init+0xc4>)
 80035ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0218 	bic.w	r2, r2, #24
 80035fc:	609a      	str	r2, [r3, #8]
 80035fe:	e00c      	b.n	800361a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6899      	ldr	r1, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	461a      	mov	r2, r3
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f834 	bl	8003678 <HAL_CRCEx_Polynomial_Set>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e028      	b.n	800366c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	795b      	ldrb	r3, [r3, #5]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d105      	bne.n	800362e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800362a:	611a      	str	r2, [r3, #16]
 800362c:	e004      	b.n	8003638 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6912      	ldr	r2, [r2, #16]
 8003636:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695a      	ldr	r2, [r3, #20]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699a      	ldr	r2, [r3, #24]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	04c11db7 	.word	0x04c11db7

08003678 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003688:	231f      	movs	r3, #31
 800368a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800368c:	bf00      	nop
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1e5a      	subs	r2, r3, #1
 8003692:	613a      	str	r2, [r7, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d009      	beq.n	80036ac <HAL_CRCEx_Polynomial_Set+0x34>
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	fa22 f303 	lsr.w	r3, r2, r3
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b18      	cmp	r3, #24
 80036b0:	d846      	bhi.n	8003740 <HAL_CRCEx_Polynomial_Set+0xc8>
 80036b2:	a201      	add	r2, pc, #4	; (adr r2, 80036b8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80036b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b8:	08003747 	.word	0x08003747
 80036bc:	08003741 	.word	0x08003741
 80036c0:	08003741 	.word	0x08003741
 80036c4:	08003741 	.word	0x08003741
 80036c8:	08003741 	.word	0x08003741
 80036cc:	08003741 	.word	0x08003741
 80036d0:	08003741 	.word	0x08003741
 80036d4:	08003741 	.word	0x08003741
 80036d8:	08003735 	.word	0x08003735
 80036dc:	08003741 	.word	0x08003741
 80036e0:	08003741 	.word	0x08003741
 80036e4:	08003741 	.word	0x08003741
 80036e8:	08003741 	.word	0x08003741
 80036ec:	08003741 	.word	0x08003741
 80036f0:	08003741 	.word	0x08003741
 80036f4:	08003741 	.word	0x08003741
 80036f8:	08003729 	.word	0x08003729
 80036fc:	08003741 	.word	0x08003741
 8003700:	08003741 	.word	0x08003741
 8003704:	08003741 	.word	0x08003741
 8003708:	08003741 	.word	0x08003741
 800370c:	08003741 	.word	0x08003741
 8003710:	08003741 	.word	0x08003741
 8003714:	08003741 	.word	0x08003741
 8003718:	0800371d 	.word	0x0800371d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	2b06      	cmp	r3, #6
 8003720:	d913      	bls.n	800374a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003726:	e010      	b.n	800374a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	2b07      	cmp	r3, #7
 800372c:	d90f      	bls.n	800374e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003732:	e00c      	b.n	800374e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	2b0f      	cmp	r3, #15
 8003738:	d90b      	bls.n	8003752 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800373e:	e008      	b.n	8003752 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	75fb      	strb	r3, [r7, #23]
      break;
 8003744:	e006      	b.n	8003754 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003746:	bf00      	nop
 8003748:	e004      	b.n	8003754 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800374a:	bf00      	nop
 800374c:	e002      	b.n	8003754 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800374e:	bf00      	nop
 8003750:	e000      	b.n	8003754 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003752:	bf00      	nop
  }
  if (status == HAL_OK)
 8003754:	7dfb      	ldrb	r3, [r7, #23]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10d      	bne.n	8003776 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f023 0118 	bic.w	r1, r3, #24
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	430a      	orrs	r2, r1
 8003774:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003776:	7dfb      	ldrb	r3, [r7, #23]
}
 8003778:	4618      	mov	r0, r3
 800377a:	371c      	adds	r7, #28
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e069      	b.n	800386a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d102      	bne.n	80037a8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fe fb1a 	bl	8001ddc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4b2a      	ldr	r3, [pc, #168]	; (8003874 <HAL_DCMI_Init+0xf0>)
 80037ca:	400b      	ands	r3, r1
 80037cc:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6819      	ldr	r1, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80037e2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80037ee:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80037fa:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003806:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003812:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b10      	cmp	r3, #16
 8003822:	d112      	bne.n	800384a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	7f1b      	ldrb	r3, [r3, #28]
 8003828:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	7f5b      	ldrb	r3, [r3, #29]
 800382e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003830:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	7f9b      	ldrb	r3, [r3, #30]
 8003836:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003838:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	7fdb      	ldrb	r3, [r3, #31]
 8003840:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003846:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003848:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 021e 	orr.w	r2, r2, #30
 8003858:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	ffe0f007 	.word	0xffe0f007

08003878 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003884:	f7ff fafa 	bl	8002e7c <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e099      	b.n	80039c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0201 	bic.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038b4:	e00f      	b.n	80038d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038b6:	f7ff fae1 	bl	8002e7c <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b05      	cmp	r3, #5
 80038c2:	d908      	bls.n	80038d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2203      	movs	r2, #3
 80038ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e078      	b.n	80039c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1e8      	bne.n	80038b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4b38      	ldr	r3, [pc, #224]	; (80039d0 <HAL_DMA_Init+0x158>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003902:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800390e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800391a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	2b04      	cmp	r3, #4
 800392e:	d107      	bne.n	8003940 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	4313      	orrs	r3, r2
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f023 0307 	bic.w	r3, r3, #7
 8003956:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	2b04      	cmp	r3, #4
 8003968:	d117      	bne.n	800399a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00e      	beq.n	800399a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f957 	bl	8003c30 <DMA_CheckFifoParam>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2240      	movs	r2, #64	; 0x40
 800398c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003996:	2301      	movs	r3, #1
 8003998:	e016      	b.n	80039c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f90e 	bl	8003bc4 <DMA_CalcBaseAndBitshift>
 80039a8:	4603      	mov	r3, r0
 80039aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	223f      	movs	r2, #63	; 0x3f
 80039b2:	409a      	lsls	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	f010803f 	.word	0xf010803f

080039d4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e050      	b.n	8003a88 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d101      	bne.n	80039f6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
 80039f4:	e048      	b.n	8003a88 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0201 	bic.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2200      	movs	r2, #0
 8003a14:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2200      	movs	r2, #0
 8003a24:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2221      	movs	r2, #33	; 0x21
 8003a34:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f8c4 	bl	8003bc4 <DMA_CalcBaseAndBitshift>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a44:	223f      	movs	r2, #63	; 0x3f
 8003a46:	409a      	lsls	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_DMA_Start_IT+0x26>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e048      	b.n	8003b48 <HAL_DMA_Start_IT+0xb8>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d137      	bne.n	8003b3a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2202      	movs	r2, #2
 8003ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f842 	bl	8003b68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae8:	223f      	movs	r2, #63	; 0x3f
 8003aea:	409a      	lsls	r2, r3
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0216 	orr.w	r2, r2, #22
 8003afe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695a      	ldr	r2, [r3, #20]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b0e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d007      	beq.n	8003b28 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0208 	orr.w	r2, r2, #8
 8003b26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	e005      	b.n	8003b46 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b42:	2302      	movs	r3, #2
 8003b44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b40      	cmp	r3, #64	; 0x40
 8003b94:	d108      	bne.n	8003ba8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ba6:	e007      	b.n	8003bb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	60da      	str	r2, [r3, #12]
}
 8003bb8:	bf00      	nop
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	3b10      	subs	r3, #16
 8003bd4:	4a13      	ldr	r2, [pc, #76]	; (8003c24 <DMA_CalcBaseAndBitshift+0x60>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bde:	4a12      	ldr	r2, [pc, #72]	; (8003c28 <DMA_CalcBaseAndBitshift+0x64>)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d908      	bls.n	8003c04 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <DMA_CalcBaseAndBitshift+0x68>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	1d1a      	adds	r2, r3, #4
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	659a      	str	r2, [r3, #88]	; 0x58
 8003c02:	e006      	b.n	8003c12 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <DMA_CalcBaseAndBitshift+0x68>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	aaaaaaab 	.word	0xaaaaaaab
 8003c28:	08014d60 	.word	0x08014d60
 8003c2c:	fffffc00 	.word	0xfffffc00

08003c30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d11f      	bne.n	8003c8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d856      	bhi.n	8003cfe <DMA_CheckFifoParam+0xce>
 8003c50:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <DMA_CheckFifoParam+0x28>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003c69 	.word	0x08003c69
 8003c5c:	08003c7b 	.word	0x08003c7b
 8003c60:	08003c69 	.word	0x08003c69
 8003c64:	08003cff 	.word	0x08003cff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d046      	beq.n	8003d02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c78:	e043      	b.n	8003d02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c82:	d140      	bne.n	8003d06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c88:	e03d      	b.n	8003d06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c92:	d121      	bne.n	8003cd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d837      	bhi.n	8003d0a <DMA_CheckFifoParam+0xda>
 8003c9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ca0 <DMA_CheckFifoParam+0x70>)
 8003c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca0:	08003cb1 	.word	0x08003cb1
 8003ca4:	08003cb7 	.word	0x08003cb7
 8003ca8:	08003cb1 	.word	0x08003cb1
 8003cac:	08003cc9 	.word	0x08003cc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb4:	e030      	b.n	8003d18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d025      	beq.n	8003d0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc6:	e022      	b.n	8003d0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ccc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cd0:	d11f      	bne.n	8003d12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cd6:	e01c      	b.n	8003d12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d903      	bls.n	8003ce6 <DMA_CheckFifoParam+0xb6>
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d003      	beq.n	8003cec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ce4:	e018      	b.n	8003d18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8003cea:	e015      	b.n	8003d18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00e      	beq.n	8003d16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8003cfc:	e00b      	b.n	8003d16 <DMA_CheckFifoParam+0xe6>
      break;
 8003cfe:	bf00      	nop
 8003d00:	e00a      	b.n	8003d18 <DMA_CheckFifoParam+0xe8>
      break;
 8003d02:	bf00      	nop
 8003d04:	e008      	b.n	8003d18 <DMA_CheckFifoParam+0xe8>
      break;
 8003d06:	bf00      	nop
 8003d08:	e006      	b.n	8003d18 <DMA_CheckFifoParam+0xe8>
      break;
 8003d0a:	bf00      	nop
 8003d0c:	e004      	b.n	8003d18 <DMA_CheckFifoParam+0xe8>
      break;
 8003d0e:	bf00      	nop
 8003d10:	e002      	b.n	8003d18 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d12:	bf00      	nop
 8003d14:	e000      	b.n	8003d18 <DMA_CheckFifoParam+0xe8>
      break;
 8003d16:	bf00      	nop
    }
  } 
  
  return status; 
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop

08003d28 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e039      	b.n	8003dae <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fe f902 	bl	8001f58 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d78:	f023 0107 	bic.w	r1, r3, #7
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d8e:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <HAL_DMA2D_Init+0x90>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	68d1      	ldr	r1, [r2, #12]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	430b      	orrs	r3, r1
 8003d9c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	ffffc000 	.word	0xffffc000

08003dbc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_DMA2D_Start+0x1c>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e018      	b.n	8003e0a <HAL_DMA2D_Start+0x4e>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 fa98 	bl	8004328 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b086      	sub	sp, #24
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
 8003e1a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d056      	beq.n	8003edc <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e2e:	f7ff f825 	bl	8002e7c <HAL_GetTick>
 8003e32:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003e34:	e04b      	b.n	8003ece <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d023      	beq.n	8003e90 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e56:	f043 0202 	orr.w	r2, r3, #2
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6c:	f043 0201 	orr.w	r2, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2221      	movs	r2, #33	; 0x21
 8003e7a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2204      	movs	r2, #4
 8003e80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0a5      	b.n	8003fdc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e96:	d01a      	beq.n	8003ece <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e98:	f7fe fff0 	bl	8002e7c <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d302      	bcc.n	8003eae <HAL_DMA2D_PollForTransfer+0x9c>
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10f      	bne.n	8003ece <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb2:	f043 0220 	orr.w	r2, r3, #32
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e086      	b.n	8003fdc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0ac      	beq.n	8003e36 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d061      	beq.n	8003fc2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003efe:	f7fe ffbd 	bl	8002e7c <HAL_GetTick>
 8003f02:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003f04:	e056      	b.n	8003fb4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d02e      	beq.n	8003f76 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f26:	f043 0204 	orr.w	r2, r3, #4
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d005      	beq.n	8003f44 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3c:	f043 0202 	orr.w	r2, r3, #2
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f52:	f043 0201 	orr.w	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2229      	movs	r2, #41	; 0x29
 8003f60:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2204      	movs	r2, #4
 8003f66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e032      	b.n	8003fdc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f7c:	d01a      	beq.n	8003fb4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f7e:	f7fe ff7d 	bl	8002e7c <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d302      	bcc.n	8003f94 <HAL_DMA2D_PollForTransfer+0x182>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10f      	bne.n	8003fb4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f98:	f043 0220 	orr.w	r2, r3, #32
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e013      	b.n	8003fdc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0a1      	beq.n	8003f06 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2212      	movs	r2, #18
 8003fc8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d026      	beq.n	8004054 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d021      	beq.n	8004054 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800401e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004024:	f043 0201 	orr.w	r2, r3, #1
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2201      	movs	r2, #1
 8004032:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2204      	movs	r2, #4
 8004038:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b00      	cmp	r3, #0
 800405c:	d026      	beq.n	80040ac <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d021      	beq.n	80040ac <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004076:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2220      	movs	r2, #32
 800407e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004084:	f043 0202 	orr.w	r2, r3, #2
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2204      	movs	r2, #4
 8004090:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d026      	beq.n	8004104 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d021      	beq.n	8004104 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ce:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2208      	movs	r2, #8
 80040d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040dc:	f043 0204 	orr.w	r2, r3, #4
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2204      	movs	r2, #4
 80040e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	d013      	beq.n	8004136 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00e      	beq.n	8004136 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004126:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2204      	movs	r2, #4
 800412e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f853 	bl	80041dc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d024      	beq.n	800418a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004146:	2b00      	cmp	r3, #0
 8004148:	d01f      	beq.n	800418a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004158:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2202      	movs	r2, #2
 8004160:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01f      	beq.n	80041d4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d01a      	beq.n	80041d4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041ac:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2210      	movs	r2, #16
 80041b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f80e 	bl	80041f0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_DMA2D_ConfigLayer+0x20>
 8004220:	2302      	movs	r3, #2
 8004222:	e079      	b.n	8004318 <HAL_DMA2D_ConfigLayer+0x114>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	3318      	adds	r3, #24
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4413      	add	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	041b      	lsls	r3, r3, #16
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800424e:	4b35      	ldr	r3, [pc, #212]	; (8004324 <HAL_DMA2D_ConfigLayer+0x120>)
 8004250:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b0a      	cmp	r3, #10
 8004258:	d003      	beq.n	8004262 <HAL_DMA2D_ConfigLayer+0x5e>
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b09      	cmp	r3, #9
 8004260:	d107      	bne.n	8004272 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	e005      	b.n	800427e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	061b      	lsls	r3, r3, #24
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d120      	bne.n	80042c6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	43db      	mvns	r3, r3
 800428e:	ea02 0103 	and.w	r1, r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	430a      	orrs	r2, r1
 800429a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b0a      	cmp	r3, #10
 80042ac:	d003      	beq.n	80042b6 <HAL_DMA2D_ConfigLayer+0xb2>
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b09      	cmp	r3, #9
 80042b4:	d127      	bne.n	8004306 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80042c2:	629a      	str	r2, [r3, #40]	; 0x28
 80042c4:	e01f      	b.n	8004306 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	43db      	mvns	r3, r3
 80042d0:	ea02 0103 	and.w	r1, r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	430a      	orrs	r2, r1
 80042dc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	6812      	ldr	r2, [r2, #0]
 80042e6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b0a      	cmp	r3, #10
 80042ee:	d003      	beq.n	80042f8 <HAL_DMA2D_ConfigLayer+0xf4>
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b09      	cmp	r3, #9
 80042f6:	d106      	bne.n	8004306 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004304:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	371c      	adds	r7, #28
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	ff03000f 	.word	0xff03000f

08004328 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004328:	b480      	push	{r7}
 800432a:	b08b      	sub	sp, #44	; 0x2c
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	041a      	lsls	r2, r3, #16
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	431a      	orrs	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004360:	d174      	bne.n	800444c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004368:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004370:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004378:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d108      	bne.n	800439a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	431a      	orrs	r2, r3
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	4313      	orrs	r3, r2
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	627b      	str	r3, [r7, #36]	; 0x24
 8004398:	e053      	b.n	8004442 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d106      	bne.n	80043b0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
 80043ae:	e048      	b.n	8004442 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d111      	bne.n	80043dc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	0cdb      	lsrs	r3, r3, #19
 80043bc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	0a9b      	lsrs	r3, r3, #10
 80043c2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	08db      	lsrs	r3, r3, #3
 80043c8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	02db      	lsls	r3, r3, #11
 80043d2:	4313      	orrs	r3, r2
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
 80043da:	e032      	b.n	8004442 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d117      	bne.n	8004414 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	0fdb      	lsrs	r3, r3, #31
 80043e8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	0cdb      	lsrs	r3, r3, #19
 80043ee:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	0adb      	lsrs	r3, r3, #11
 80043f4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	08db      	lsrs	r3, r3, #3
 80043fa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	029b      	lsls	r3, r3, #10
 8004404:	431a      	orrs	r2, r3
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	03db      	lsls	r3, r3, #15
 800440a:	4313      	orrs	r3, r2
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	4313      	orrs	r3, r2
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
 8004412:	e016      	b.n	8004442 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	0f1b      	lsrs	r3, r3, #28
 8004418:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	0d1b      	lsrs	r3, r3, #20
 800441e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	0b1b      	lsrs	r3, r3, #12
 8004424:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	011a      	lsls	r2, r3, #4
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	431a      	orrs	r2, r3
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	031b      	lsls	r3, r3, #12
 800443a:	4313      	orrs	r3, r2
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	4313      	orrs	r3, r2
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004448:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800444a:	e003      	b.n	8004454 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	60da      	str	r2, [r3, #12]
}
 8004454:	bf00      	nop
 8004456:	372c      	adds	r7, #44	; 0x2c
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	61fb      	str	r3, [r7, #28]
 800446c:	2300      	movs	r3, #0
 800446e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8004470:	4ba1      	ldr	r3, [pc, #644]	; (80046f8 <HAL_ETH_Init+0x298>)
 8004472:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004478:	2300      	movs	r3, #0
 800447a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e182      	b.n	800478c <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fd fd82 	bl	8001fa4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044a0:	4b96      	ldr	r3, [pc, #600]	; (80046fc <HAL_ETH_Init+0x29c>)
 80044a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a4:	4a95      	ldr	r2, [pc, #596]	; (80046fc <HAL_ETH_Init+0x29c>)
 80044a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044aa:	6453      	str	r3, [r2, #68]	; 0x44
 80044ac:	4b93      	ldr	r3, [pc, #588]	; (80046fc <HAL_ETH_Init+0x29c>)
 80044ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b4:	60bb      	str	r3, [r7, #8]
 80044b6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80044b8:	4b91      	ldr	r3, [pc, #580]	; (8004700 <HAL_ETH_Init+0x2a0>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	4a90      	ldr	r2, [pc, #576]	; (8004700 <HAL_ETH_Init+0x2a0>)
 80044be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044c2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80044c4:	4b8e      	ldr	r3, [pc, #568]	; (8004700 <HAL_ETH_Init+0x2a0>)
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	498c      	ldr	r1, [pc, #560]	; (8004700 <HAL_ETH_Init+0x2a0>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	f043 0301 	orr.w	r3, r3, #1
 80044e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044e8:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80044ea:	f7fe fcc7 	bl	8002e7c <HAL_GetTick>
 80044ee:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80044f0:	e011      	b.n	8004516 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80044f2:	f7fe fcc3 	bl	8002e7c <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004500:	d909      	bls.n	8004516 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2203      	movs	r2, #3
 8004506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e13a      	b.n	800478c <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e4      	bne.n	80044f2 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f023 031c 	bic.w	r3, r3, #28
 8004536:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004538:	f003 fd6a 	bl	8008010 <HAL_RCC_GetHCLKFreq>
 800453c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	4a70      	ldr	r2, [pc, #448]	; (8004704 <HAL_ETH_Init+0x2a4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d908      	bls.n	8004558 <HAL_ETH_Init+0xf8>
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	4a6f      	ldr	r2, [pc, #444]	; (8004708 <HAL_ETH_Init+0x2a8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d804      	bhi.n	8004558 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	f043 0308 	orr.w	r3, r3, #8
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	e027      	b.n	80045a8 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	4a6b      	ldr	r2, [pc, #428]	; (8004708 <HAL_ETH_Init+0x2a8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d908      	bls.n	8004572 <HAL_ETH_Init+0x112>
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	4a65      	ldr	r2, [pc, #404]	; (80046f8 <HAL_ETH_Init+0x298>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d204      	bcs.n	8004572 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f043 030c 	orr.w	r3, r3, #12
 800456e:	61fb      	str	r3, [r7, #28]
 8004570:	e01a      	b.n	80045a8 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	4a60      	ldr	r2, [pc, #384]	; (80046f8 <HAL_ETH_Init+0x298>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d303      	bcc.n	8004582 <HAL_ETH_Init+0x122>
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	4a63      	ldr	r2, [pc, #396]	; (800470c <HAL_ETH_Init+0x2ac>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d911      	bls.n	80045a6 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	4a61      	ldr	r2, [pc, #388]	; (800470c <HAL_ETH_Init+0x2ac>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d908      	bls.n	800459c <HAL_ETH_Init+0x13c>
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	4a60      	ldr	r2, [pc, #384]	; (8004710 <HAL_ETH_Init+0x2b0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d804      	bhi.n	800459c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	f043 0304 	orr.w	r3, r3, #4
 8004598:	61fb      	str	r3, [r7, #28]
 800459a:	e005      	b.n	80045a8 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f043 0310 	orr.w	r3, r3, #16
 80045a2:	61fb      	str	r3, [r7, #28]
 80045a4:	e000      	b.n	80045a8 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80045a6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80045b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80045b4:	2100      	movs	r1, #0
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f954 	bl	8004864 <HAL_ETH_WritePHYRegister>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00b      	beq.n	80045da <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80045c6:	6939      	ldr	r1, [r7, #16]
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f9b1 	bl	8004930 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e0d8      	b.n	800478c <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80045da:	f640 70ff 	movw	r0, #4095	; 0xfff
 80045de:	f7fe fc59 	bl	8002e94 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 80a5 	beq.w	8004736 <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80045ec:	f7fe fc46 	bl	8002e7c <HAL_GetTick>
 80045f0:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80045f2:	f107 030c 	add.w	r3, r7, #12
 80045f6:	461a      	mov	r2, r3
 80045f8:	2101      	movs	r1, #1
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f8ca 	bl	8004794 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004600:	f7fe fc3c 	bl	8002e7c <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	; 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d90f      	bls.n	8004632 <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004616:	6939      	ldr	r1, [r7, #16]
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f989 	bl	8004930 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e0ac      	b.n	800478c <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0da      	beq.n	80045f2 <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800463c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004640:	2100      	movs	r1, #0
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f90e 	bl	8004864 <HAL_ETH_WritePHYRegister>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00b      	beq.n	8004666 <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004652:	6939      	ldr	r1, [r7, #16]
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f96b 	bl	8004930 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004662:	2301      	movs	r3, #1
 8004664:	e092      	b.n	800478c <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004666:	f7fe fc09 	bl	8002e7c <HAL_GetTick>
 800466a:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800466c:	f107 030c 	add.w	r3, r7, #12
 8004670:	461a      	mov	r2, r3
 8004672:	2101      	movs	r1, #1
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f88d 	bl	8004794 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800467a:	f7fe fbff 	bl	8002e7c <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	f241 3288 	movw	r2, #5000	; 0x1388
 8004688:	4293      	cmp	r3, r2
 800468a:	d90f      	bls.n	80046ac <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004690:	6939      	ldr	r1, [r7, #16]
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f94c 	bl	8004930 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e06f      	b.n	800478c <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0da      	beq.n	800466c <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80046b6:	f107 030c 	add.w	r3, r7, #12
 80046ba:	461a      	mov	r2, r3
 80046bc:	2110      	movs	r1, #16
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f868 	bl	8004794 <HAL_ETH_ReadPHYRegister>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00b      	beq.n	80046e2 <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80046ce:	6939      	ldr	r1, [r7, #16]
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f92d 	bl	8004930 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80046de:	2301      	movs	r3, #1
 80046e0:	e054      	b.n	800478c <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d013      	beq.n	8004714 <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046f2:	60da      	str	r2, [r3, #12]
 80046f4:	e011      	b.n	800471a <HAL_ETH_Init+0x2ba>
 80046f6:	bf00      	nop
 80046f8:	03938700 	.word	0x03938700
 80046fc:	40023800 	.word	0x40023800
 8004700:	40013800 	.word	0x40013800
 8004704:	01312cff 	.word	0x01312cff
 8004708:	02160ebf 	.word	0x02160ebf
 800470c:	05f5e0ff 	.word	0x05f5e0ff
 8004710:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	609a      	str	r2, [r3, #8]
 800472a:	e026      	b.n	800477a <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004732:	609a      	str	r2, [r3, #8]
 8004734:	e021      	b.n	800477a <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	08db      	lsrs	r3, r3, #3
 800473c:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	085b      	lsrs	r3, r3, #1
 8004744:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8004746:	4313      	orrs	r3, r2
 8004748:	b29b      	uxth	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	2100      	movs	r1, #0
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f888 	bl	8004864 <HAL_ETH_WritePHYRegister>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00b      	beq.n	8004772 <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800475e:	6939      	ldr	r1, [r7, #16]
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f8e5 	bl	8004930 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e00c      	b.n	800478c <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004772:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004776:	f7fe fb8d 	bl	8002e94 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800477a:	6939      	ldr	r1, [r7, #16]
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f8d7 	bl	8004930 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3720      	adds	r7, #32
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	460b      	mov	r3, r1
 800479e:	607a      	str	r2, [r7, #4]
 80047a0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80047a2:	2300      	movs	r3, #0
 80047a4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80047a6:	2300      	movs	r3, #0
 80047a8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b82      	cmp	r3, #130	; 0x82
 80047b4:	d101      	bne.n	80047ba <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80047b6:	2302      	movs	r3, #2
 80047b8:	e050      	b.n	800485c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2282      	movs	r2, #130	; 0x82
 80047be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f003 031c 	and.w	r3, r3, #28
 80047d0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8a1b      	ldrh	r3, [r3, #16]
 80047d6:	02db      	lsls	r3, r3, #11
 80047d8:	b29b      	uxth	r3, r3
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80047e0:	897b      	ldrh	r3, [r7, #10]
 80047e2:	019b      	lsls	r3, r3, #6
 80047e4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f023 0302 	bic.w	r3, r3, #2
 80047f4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f043 0301 	orr.w	r3, r3, #1
 80047fc:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004806:	f7fe fb39 	bl	8002e7c <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800480c:	e015      	b.n	800483a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800480e:	f7fe fb35 	bl	8002e7c <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800481c:	d309      	bcc.n	8004832 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e014      	b.n	800485c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e4      	bne.n	800480e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	b29b      	uxth	r3, r3
 800484c:	461a      	mov	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3718      	adds	r7, #24
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	460b      	mov	r3, r1
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004876:	2300      	movs	r3, #0
 8004878:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b42      	cmp	r3, #66	; 0x42
 8004884:	d101      	bne.n	800488a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004886:	2302      	movs	r3, #2
 8004888:	e04e      	b.n	8004928 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2242      	movs	r2, #66	; 0x42
 800488e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f003 031c 	and.w	r3, r3, #28
 80048a0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8a1b      	ldrh	r3, [r3, #16]
 80048a6:	02db      	lsls	r3, r3, #11
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80048b0:	897b      	ldrh	r3, [r7, #10]
 80048b2:	019b      	lsls	r3, r3, #6
 80048b4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f043 0302 	orr.w	r3, r3, #2
 80048c4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80048e0:	f7fe facc 	bl	8002e7c <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80048e6:	e015      	b.n	8004914 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80048e8:	f7fe fac8 	bl	8002e7c <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f6:	d309      	bcc.n	800490c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e00d      	b.n	8004928 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1e4      	bne.n	80048e8 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b0b0      	sub	sp, #192	; 0xc0
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d007      	beq.n	8004956 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800494c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004954:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8004956:	2300      	movs	r3, #0
 8004958:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800495a:	2300      	movs	r3, #0
 800495c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800495e:	2300      	movs	r3, #0
 8004960:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004962:	2300      	movs	r3, #0
 8004964:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004966:	2300      	movs	r3, #0
 8004968:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800496a:	2300      	movs	r3, #0
 800496c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d103      	bne.n	800497e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800497a:	663b      	str	r3, [r7, #96]	; 0x60
 800497c:	e001      	b.n	8004982 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800497e:	2300      	movs	r3, #0
 8004980:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8004982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004986:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004988:	2300      	movs	r3, #0
 800498a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800498c:	2300      	movs	r3, #0
 800498e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004990:	2300      	movs	r3, #0
 8004992:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004994:	2300      	movs	r3, #0
 8004996:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004998:	2300      	movs	r3, #0
 800499a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800499c:	2340      	movs	r3, #64	; 0x40
 800499e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80049a0:	2300      	movs	r3, #0
 80049a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80049ac:	2300      	movs	r3, #0
 80049ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80049b2:	2300      	movs	r3, #0
 80049b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80049b8:	2300      	movs	r3, #0
 80049ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80049be:	2300      	movs	r3, #0
 80049c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80049d0:	2380      	movs	r3, #128	; 0x80
 80049d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80049d6:	2300      	movs	r3, #0
 80049d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80049dc:	2300      	movs	r3, #0
 80049de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80049e2:	2300      	movs	r3, #0
 80049e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80049e8:	2300      	movs	r3, #0
 80049ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80049ee:	2300      	movs	r3, #0
 80049f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8004a04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a08:	4ba9      	ldr	r3, [pc, #676]	; (8004cb0 <ETH_MACDMAConfig+0x380>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004a10:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004a14:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004a18:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004a1c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004a22:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004a24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004a26:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004a28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004a2a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004a30:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004a32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004a34:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004a36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004a38:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004a3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004a3c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004a40:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004a42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004a44:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004a46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a58:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a64:	2001      	movs	r0, #1
 8004a66:	f7fe fa15 	bl	8002e94 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a72:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004a74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004a76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004a78:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004a7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004a7c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8004a7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8004a82:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004a84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004a88:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004a8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004a8e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004a94:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004a98:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004aa0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004aa2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004aae:	2001      	movs	r0, #1
 8004ab0:	f7fe f9f0 	bl	8002e94 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004abc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ac6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004ad0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004adc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004ae0:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004aea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004aee:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004af0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004af4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004af6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004afa:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004afc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004b00:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004b06:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004b08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004b0c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004b0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b20:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b2c:	2001      	movs	r0, #1
 8004b2e:	f7fe f9b1 	bl	8002e94 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b3a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004b3c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004b40:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b56:	2001      	movs	r0, #1
 8004b58:	f7fe f99c 	bl	8002e94 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b64:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004b66:	2300      	movs	r3, #0
 8004b68:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004b6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b6e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004b70:	2300      	movs	r3, #0
 8004b72:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004b74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b78:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004b82:	2300      	movs	r3, #0
 8004b84:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004b86:	2300      	movs	r3, #0
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004b8a:	2304      	movs	r3, #4
 8004b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004b8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b98:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004b9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004b9e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ba4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004ba6:	2380      	movs	r3, #128	; 0x80
 8004ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8004bc0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004bc4:	4b3b      	ldr	r3, [pc, #236]	; (8004cb4 <ETH_MACDMAConfig+0x384>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004bcc:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004bce:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004bd0:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004bd2:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004bd4:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004bd6:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004bd8:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004bda:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004bdc:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004bde:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004be0:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004be2:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004be4:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004be8:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004bec:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004bee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c00:	461a      	mov	r2, r3
 8004c02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c06:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c16:	2001      	movs	r0, #1
 8004c18:	f7fe f93c 	bl	8002e94 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c24:	461a      	mov	r2, r3
 8004c26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c2a:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004c30:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004c34:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004c38:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004c3c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8004c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c40:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004c42:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8004c46:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c54:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c64:	2001      	movs	r0, #1
 8004c66:	f7fe f915 	bl	8002e94 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c72:	461a      	mov	r2, r3
 8004c74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c78:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d10b      	bne.n	8004c9a <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c8a:	69d9      	ldr	r1, [r3, #28]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	4b09      	ldr	r3, [pc, #36]	; (8004cb8 <ETH_MACDMAConfig+0x388>)
 8004c92:	430b      	orrs	r3, r1
 8004c94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c98:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f80a 	bl	8004cbc <ETH_MACAddressConfig>
}
 8004ca8:	bf00      	nop
 8004caa:	37c0      	adds	r7, #192	; 0xc0
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	ff20810f 	.word	0xff20810f
 8004cb4:	f8de3f23 	.word	0xf8de3f23
 8004cb8:	00010040 	.word	0x00010040

08004cbc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3305      	adds	r3, #5
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	021b      	lsls	r3, r3, #8
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	3204      	adds	r2, #4
 8004cd4:	7812      	ldrb	r2, [r2, #0]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	4b11      	ldr	r3, [pc, #68]	; (8004d24 <ETH_MACAddressConfig+0x68>)
 8004cde:	4413      	add	r3, r2
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	3303      	adds	r3, #3
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	061a      	lsls	r2, r3, #24
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3302      	adds	r3, #2
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	041b      	lsls	r3, r3, #16
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	021b      	lsls	r3, r3, #8
 8004d00:	4313      	orrs	r3, r2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	7812      	ldrb	r2, [r2, #0]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <ETH_MACAddressConfig+0x6c>)
 8004d0e:	4413      	add	r3, r2
 8004d10:	461a      	mov	r2, r3
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	6013      	str	r3, [r2, #0]
}
 8004d16:	bf00      	nop
 8004d18:	371c      	adds	r7, #28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	40028040 	.word	0x40028040
 8004d28:	40028044 	.word	0x40028044

08004d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b089      	sub	sp, #36	; 0x24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004d36:	2300      	movs	r3, #0
 8004d38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	e175      	b.n	8005038 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	f040 8164 	bne.w	8005032 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d00b      	beq.n	8004d8a <HAL_GPIO_Init+0x5e>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d007      	beq.n	8004d8a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d7e:	2b11      	cmp	r3, #17
 8004d80:	d003      	beq.n	8004d8a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b12      	cmp	r3, #18
 8004d88:	d130      	bne.n	8004dec <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	2203      	movs	r2, #3
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	43db      	mvns	r3, r3
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	091b      	lsrs	r3, r3, #4
 8004dd6:	f003 0201 	and.w	r2, r3, #1
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	2203      	movs	r2, #3
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	4013      	ands	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d003      	beq.n	8004e2c <HAL_GPIO_Init+0x100>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b12      	cmp	r3, #18
 8004e2a:	d123      	bne.n	8004e74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	08da      	lsrs	r2, r3, #3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3208      	adds	r2, #8
 8004e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	220f      	movs	r2, #15
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	08da      	lsrs	r2, r3, #3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3208      	adds	r2, #8
 8004e6e:	69b9      	ldr	r1, [r7, #24]
 8004e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	2203      	movs	r2, #3
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	43db      	mvns	r3, r3
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f003 0203 	and.w	r2, r3, #3
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 80be 	beq.w	8005032 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eb6:	4b66      	ldr	r3, [pc, #408]	; (8005050 <HAL_GPIO_Init+0x324>)
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eba:	4a65      	ldr	r2, [pc, #404]	; (8005050 <HAL_GPIO_Init+0x324>)
 8004ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ec2:	4b63      	ldr	r3, [pc, #396]	; (8005050 <HAL_GPIO_Init+0x324>)
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004ece:	4a61      	ldr	r2, [pc, #388]	; (8005054 <HAL_GPIO_Init+0x328>)
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	089b      	lsrs	r3, r3, #2
 8004ed4:	3302      	adds	r3, #2
 8004ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	220f      	movs	r2, #15
 8004ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eea:	43db      	mvns	r3, r3
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a58      	ldr	r2, [pc, #352]	; (8005058 <HAL_GPIO_Init+0x32c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d037      	beq.n	8004f6a <HAL_GPIO_Init+0x23e>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a57      	ldr	r2, [pc, #348]	; (800505c <HAL_GPIO_Init+0x330>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d031      	beq.n	8004f66 <HAL_GPIO_Init+0x23a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a56      	ldr	r2, [pc, #344]	; (8005060 <HAL_GPIO_Init+0x334>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d02b      	beq.n	8004f62 <HAL_GPIO_Init+0x236>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a55      	ldr	r2, [pc, #340]	; (8005064 <HAL_GPIO_Init+0x338>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d025      	beq.n	8004f5e <HAL_GPIO_Init+0x232>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a54      	ldr	r2, [pc, #336]	; (8005068 <HAL_GPIO_Init+0x33c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d01f      	beq.n	8004f5a <HAL_GPIO_Init+0x22e>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a53      	ldr	r2, [pc, #332]	; (800506c <HAL_GPIO_Init+0x340>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d019      	beq.n	8004f56 <HAL_GPIO_Init+0x22a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a52      	ldr	r2, [pc, #328]	; (8005070 <HAL_GPIO_Init+0x344>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d013      	beq.n	8004f52 <HAL_GPIO_Init+0x226>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a51      	ldr	r2, [pc, #324]	; (8005074 <HAL_GPIO_Init+0x348>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00d      	beq.n	8004f4e <HAL_GPIO_Init+0x222>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a50      	ldr	r2, [pc, #320]	; (8005078 <HAL_GPIO_Init+0x34c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d007      	beq.n	8004f4a <HAL_GPIO_Init+0x21e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a4f      	ldr	r2, [pc, #316]	; (800507c <HAL_GPIO_Init+0x350>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d101      	bne.n	8004f46 <HAL_GPIO_Init+0x21a>
 8004f42:	2309      	movs	r3, #9
 8004f44:	e012      	b.n	8004f6c <HAL_GPIO_Init+0x240>
 8004f46:	230a      	movs	r3, #10
 8004f48:	e010      	b.n	8004f6c <HAL_GPIO_Init+0x240>
 8004f4a:	2308      	movs	r3, #8
 8004f4c:	e00e      	b.n	8004f6c <HAL_GPIO_Init+0x240>
 8004f4e:	2307      	movs	r3, #7
 8004f50:	e00c      	b.n	8004f6c <HAL_GPIO_Init+0x240>
 8004f52:	2306      	movs	r3, #6
 8004f54:	e00a      	b.n	8004f6c <HAL_GPIO_Init+0x240>
 8004f56:	2305      	movs	r3, #5
 8004f58:	e008      	b.n	8004f6c <HAL_GPIO_Init+0x240>
 8004f5a:	2304      	movs	r3, #4
 8004f5c:	e006      	b.n	8004f6c <HAL_GPIO_Init+0x240>
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e004      	b.n	8004f6c <HAL_GPIO_Init+0x240>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e002      	b.n	8004f6c <HAL_GPIO_Init+0x240>
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <HAL_GPIO_Init+0x240>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	f002 0203 	and.w	r2, r2, #3
 8004f72:	0092      	lsls	r2, r2, #2
 8004f74:	4093      	lsls	r3, r2
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004f7c:	4935      	ldr	r1, [pc, #212]	; (8005054 <HAL_GPIO_Init+0x328>)
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	089b      	lsrs	r3, r3, #2
 8004f82:	3302      	adds	r3, #2
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f8a:	4b3d      	ldr	r3, [pc, #244]	; (8005080 <HAL_GPIO_Init+0x354>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	43db      	mvns	r3, r3
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	4013      	ands	r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fae:	4a34      	ldr	r2, [pc, #208]	; (8005080 <HAL_GPIO_Init+0x354>)
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004fb4:	4b32      	ldr	r3, [pc, #200]	; (8005080 <HAL_GPIO_Init+0x354>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fd8:	4a29      	ldr	r2, [pc, #164]	; (8005080 <HAL_GPIO_Init+0x354>)
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fde:	4b28      	ldr	r3, [pc, #160]	; (8005080 <HAL_GPIO_Init+0x354>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4013      	ands	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005002:	4a1f      	ldr	r2, [pc, #124]	; (8005080 <HAL_GPIO_Init+0x354>)
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005008:	4b1d      	ldr	r3, [pc, #116]	; (8005080 <HAL_GPIO_Init+0x354>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	43db      	mvns	r3, r3
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	4013      	ands	r3, r2
 8005016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800502c:	4a14      	ldr	r2, [pc, #80]	; (8005080 <HAL_GPIO_Init+0x354>)
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	3301      	adds	r3, #1
 8005036:	61fb      	str	r3, [r7, #28]
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	2b0f      	cmp	r3, #15
 800503c:	f67f ae86 	bls.w	8004d4c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005040:	bf00      	nop
 8005042:	bf00      	nop
 8005044:	3724      	adds	r7, #36	; 0x24
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40023800 	.word	0x40023800
 8005054:	40013800 	.word	0x40013800
 8005058:	40020000 	.word	0x40020000
 800505c:	40020400 	.word	0x40020400
 8005060:	40020800 	.word	0x40020800
 8005064:	40020c00 	.word	0x40020c00
 8005068:	40021000 	.word	0x40021000
 800506c:	40021400 	.word	0x40021400
 8005070:	40021800 	.word	0x40021800
 8005074:	40021c00 	.word	0x40021c00
 8005078:	40022000 	.word	0x40022000
 800507c:	40022400 	.word	0x40022400
 8005080:	40013c00 	.word	0x40013c00

08005084 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	460b      	mov	r3, r1
 800508e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	887b      	ldrh	r3, [r7, #2]
 8005096:	4013      	ands	r3, r2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800509c:	2301      	movs	r3, #1
 800509e:	73fb      	strb	r3, [r7, #15]
 80050a0:	e001      	b.n	80050a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050a2:	2300      	movs	r3, #0
 80050a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3714      	adds	r7, #20
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	807b      	strh	r3, [r7, #2]
 80050c0:	4613      	mov	r3, r2
 80050c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050c4:	787b      	ldrb	r3, [r7, #1]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050ca:	887a      	ldrh	r2, [r7, #2]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80050d0:	e003      	b.n	80050da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80050d2:	887b      	ldrh	r3, [r7, #2]
 80050d4:	041a      	lsls	r2, r3, #16
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	619a      	str	r2, [r3, #24]
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
	...

080050e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4603      	mov	r3, r0
 80050f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80050f2:	4b08      	ldr	r3, [pc, #32]	; (8005114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050f4:	695a      	ldr	r2, [r3, #20]
 80050f6:	88fb      	ldrh	r3, [r7, #6]
 80050f8:	4013      	ands	r3, r2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d006      	beq.n	800510c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050fe:	4a05      	ldr	r2, [pc, #20]	; (8005114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005100:	88fb      	ldrh	r3, [r7, #6]
 8005102:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005104:	88fb      	ldrh	r3, [r7, #6]
 8005106:	4618      	mov	r0, r3
 8005108:	f7fc fd20 	bl	8001b4c <HAL_GPIO_EXTI_Callback>
  }
}
 800510c:	bf00      	nop
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40013c00 	.word	0x40013c00

08005118 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800511a:	b08f      	sub	sp, #60	; 0x3c
 800511c:	af0a      	add	r7, sp, #40	; 0x28
 800511e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e054      	b.n	80051d4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d106      	bne.n	800514a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f00e fe53 	bl	8013df0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2203      	movs	r2, #3
 800514e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515a:	2b00      	cmp	r3, #0
 800515c:	d102      	bne.n	8005164 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4618      	mov	r0, r3
 800516a:	f008 f93e 	bl	800d3ea <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	603b      	str	r3, [r7, #0]
 8005174:	687e      	ldr	r6, [r7, #4]
 8005176:	466d      	mov	r5, sp
 8005178:	f106 0410 	add.w	r4, r6, #16
 800517c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800517e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005184:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005188:	e885 0003 	stmia.w	r5, {r0, r1}
 800518c:	1d33      	adds	r3, r6, #4
 800518e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005190:	6838      	ldr	r0, [r7, #0]
 8005192:	f008 f8c1 	bl	800d318 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2101      	movs	r1, #1
 800519c:	4618      	mov	r0, r3
 800519e:	f008 f935 	bl	800d40c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	603b      	str	r3, [r7, #0]
 80051a8:	687e      	ldr	r6, [r7, #4]
 80051aa:	466d      	mov	r5, sp
 80051ac:	f106 0410 	add.w	r4, r6, #16
 80051b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80051c0:	1d33      	adds	r3, r6, #4
 80051c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051c4:	6838      	ldr	r0, [r7, #0]
 80051c6:	f008 fa47 	bl	800d658 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051dc <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80051dc:	b590      	push	{r4, r7, lr}
 80051de:	b089      	sub	sp, #36	; 0x24
 80051e0:	af04      	add	r7, sp, #16
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	4608      	mov	r0, r1
 80051e6:	4611      	mov	r1, r2
 80051e8:	461a      	mov	r2, r3
 80051ea:	4603      	mov	r3, r0
 80051ec:	70fb      	strb	r3, [r7, #3]
 80051ee:	460b      	mov	r3, r1
 80051f0:	70bb      	strb	r3, [r7, #2]
 80051f2:	4613      	mov	r3, r2
 80051f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_HCD_HC_Init+0x28>
 8005200:	2302      	movs	r3, #2
 8005202:	e076      	b.n	80052f2 <HAL_HCD_HC_Init+0x116>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800520c:	78fb      	ldrb	r3, [r7, #3]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	212c      	movs	r1, #44	; 0x2c
 8005212:	fb01 f303 	mul.w	r3, r1, r3
 8005216:	4413      	add	r3, r2
 8005218:	333d      	adds	r3, #61	; 0x3d
 800521a:	2200      	movs	r2, #0
 800521c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800521e:	78fb      	ldrb	r3, [r7, #3]
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	212c      	movs	r1, #44	; 0x2c
 8005224:	fb01 f303 	mul.w	r3, r1, r3
 8005228:	4413      	add	r3, r2
 800522a:	3338      	adds	r3, #56	; 0x38
 800522c:	787a      	ldrb	r2, [r7, #1]
 800522e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	212c      	movs	r1, #44	; 0x2c
 8005236:	fb01 f303 	mul.w	r3, r1, r3
 800523a:	4413      	add	r3, r2
 800523c:	3340      	adds	r3, #64	; 0x40
 800523e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005240:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005242:	78fb      	ldrb	r3, [r7, #3]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	212c      	movs	r1, #44	; 0x2c
 8005248:	fb01 f303 	mul.w	r3, r1, r3
 800524c:	4413      	add	r3, r2
 800524e:	3339      	adds	r3, #57	; 0x39
 8005250:	78fa      	ldrb	r2, [r7, #3]
 8005252:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	212c      	movs	r1, #44	; 0x2c
 800525a:	fb01 f303 	mul.w	r3, r1, r3
 800525e:	4413      	add	r3, r2
 8005260:	333f      	adds	r3, #63	; 0x3f
 8005262:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005266:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005268:	78fb      	ldrb	r3, [r7, #3]
 800526a:	78ba      	ldrb	r2, [r7, #2]
 800526c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005270:	b2d0      	uxtb	r0, r2
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	212c      	movs	r1, #44	; 0x2c
 8005276:	fb01 f303 	mul.w	r3, r1, r3
 800527a:	4413      	add	r3, r2
 800527c:	333a      	adds	r3, #58	; 0x3a
 800527e:	4602      	mov	r2, r0
 8005280:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005282:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005286:	2b00      	cmp	r3, #0
 8005288:	da09      	bge.n	800529e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800528a:	78fb      	ldrb	r3, [r7, #3]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	212c      	movs	r1, #44	; 0x2c
 8005290:	fb01 f303 	mul.w	r3, r1, r3
 8005294:	4413      	add	r3, r2
 8005296:	333b      	adds	r3, #59	; 0x3b
 8005298:	2201      	movs	r2, #1
 800529a:	701a      	strb	r2, [r3, #0]
 800529c:	e008      	b.n	80052b0 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800529e:	78fb      	ldrb	r3, [r7, #3]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	212c      	movs	r1, #44	; 0x2c
 80052a4:	fb01 f303 	mul.w	r3, r1, r3
 80052a8:	4413      	add	r3, r2
 80052aa:	333b      	adds	r3, #59	; 0x3b
 80052ac:	2200      	movs	r2, #0
 80052ae:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	212c      	movs	r1, #44	; 0x2c
 80052b6:	fb01 f303 	mul.w	r3, r1, r3
 80052ba:	4413      	add	r3, r2
 80052bc:	333c      	adds	r3, #60	; 0x3c
 80052be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80052c2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6818      	ldr	r0, [r3, #0]
 80052c8:	787c      	ldrb	r4, [r7, #1]
 80052ca:	78ba      	ldrb	r2, [r7, #2]
 80052cc:	78f9      	ldrb	r1, [r7, #3]
 80052ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80052d0:	9302      	str	r3, [sp, #8]
 80052d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80052d6:	9301      	str	r3, [sp, #4]
 80052d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	4623      	mov	r3, r4
 80052e0:	f008 fb30 	bl	800d944 <USB_HC_Init>
 80052e4:	4603      	mov	r3, r0
 80052e6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd90      	pop	{r4, r7, pc}

080052fa <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b084      	sub	sp, #16
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	460b      	mov	r3, r1
 8005304:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005310:	2b01      	cmp	r3, #1
 8005312:	d101      	bne.n	8005318 <HAL_HCD_HC_Halt+0x1e>
 8005314:	2302      	movs	r3, #2
 8005316:	e00f      	b.n	8005338 <HAL_HCD_HC_Halt+0x3e>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	78fa      	ldrb	r2, [r7, #3]
 8005326:	4611      	mov	r1, r2
 8005328:	4618      	mov	r0, r3
 800532a:	f008 fd6c 	bl	800de06 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005336:	7bfb      	ldrb	r3, [r7, #15]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	4608      	mov	r0, r1
 800534a:	4611      	mov	r1, r2
 800534c:	461a      	mov	r2, r3
 800534e:	4603      	mov	r3, r0
 8005350:	70fb      	strb	r3, [r7, #3]
 8005352:	460b      	mov	r3, r1
 8005354:	70bb      	strb	r3, [r7, #2]
 8005356:	4613      	mov	r3, r2
 8005358:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	212c      	movs	r1, #44	; 0x2c
 8005360:	fb01 f303 	mul.w	r3, r1, r3
 8005364:	4413      	add	r3, r2
 8005366:	333b      	adds	r3, #59	; 0x3b
 8005368:	78ba      	ldrb	r2, [r7, #2]
 800536a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800536c:	78fb      	ldrb	r3, [r7, #3]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	212c      	movs	r1, #44	; 0x2c
 8005372:	fb01 f303 	mul.w	r3, r1, r3
 8005376:	4413      	add	r3, r2
 8005378:	333f      	adds	r3, #63	; 0x3f
 800537a:	787a      	ldrb	r2, [r7, #1]
 800537c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800537e:	7c3b      	ldrb	r3, [r7, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d112      	bne.n	80053aa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005384:	78fb      	ldrb	r3, [r7, #3]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	212c      	movs	r1, #44	; 0x2c
 800538a:	fb01 f303 	mul.w	r3, r1, r3
 800538e:	4413      	add	r3, r2
 8005390:	3342      	adds	r3, #66	; 0x42
 8005392:	2203      	movs	r2, #3
 8005394:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005396:	78fb      	ldrb	r3, [r7, #3]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	212c      	movs	r1, #44	; 0x2c
 800539c:	fb01 f303 	mul.w	r3, r1, r3
 80053a0:	4413      	add	r3, r2
 80053a2:	333d      	adds	r3, #61	; 0x3d
 80053a4:	7f3a      	ldrb	r2, [r7, #28]
 80053a6:	701a      	strb	r2, [r3, #0]
 80053a8:	e008      	b.n	80053bc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80053aa:	78fb      	ldrb	r3, [r7, #3]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	212c      	movs	r1, #44	; 0x2c
 80053b0:	fb01 f303 	mul.w	r3, r1, r3
 80053b4:	4413      	add	r3, r2
 80053b6:	3342      	adds	r3, #66	; 0x42
 80053b8:	2202      	movs	r2, #2
 80053ba:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80053bc:	787b      	ldrb	r3, [r7, #1]
 80053be:	2b03      	cmp	r3, #3
 80053c0:	f200 80c6 	bhi.w	8005550 <HAL_HCD_HC_SubmitRequest+0x210>
 80053c4:	a201      	add	r2, pc, #4	; (adr r2, 80053cc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80053c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ca:	bf00      	nop
 80053cc:	080053dd 	.word	0x080053dd
 80053d0:	0800553d 	.word	0x0800553d
 80053d4:	08005441 	.word	0x08005441
 80053d8:	080054bf 	.word	0x080054bf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80053dc:	7c3b      	ldrb	r3, [r7, #16]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	f040 80b8 	bne.w	8005554 <HAL_HCD_HC_SubmitRequest+0x214>
 80053e4:	78bb      	ldrb	r3, [r7, #2]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f040 80b4 	bne.w	8005554 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80053ec:	8b3b      	ldrh	r3, [r7, #24]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d108      	bne.n	8005404 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80053f2:	78fb      	ldrb	r3, [r7, #3]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	212c      	movs	r1, #44	; 0x2c
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	4413      	add	r3, r2
 80053fe:	3355      	adds	r3, #85	; 0x55
 8005400:	2201      	movs	r2, #1
 8005402:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005404:	78fb      	ldrb	r3, [r7, #3]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	212c      	movs	r1, #44	; 0x2c
 800540a:	fb01 f303 	mul.w	r3, r1, r3
 800540e:	4413      	add	r3, r2
 8005410:	3355      	adds	r3, #85	; 0x55
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d109      	bne.n	800542c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	212c      	movs	r1, #44	; 0x2c
 800541e:	fb01 f303 	mul.w	r3, r1, r3
 8005422:	4413      	add	r3, r2
 8005424:	3342      	adds	r3, #66	; 0x42
 8005426:	2200      	movs	r2, #0
 8005428:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800542a:	e093      	b.n	8005554 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	212c      	movs	r1, #44	; 0x2c
 8005432:	fb01 f303 	mul.w	r3, r1, r3
 8005436:	4413      	add	r3, r2
 8005438:	3342      	adds	r3, #66	; 0x42
 800543a:	2202      	movs	r2, #2
 800543c:	701a      	strb	r2, [r3, #0]
      break;
 800543e:	e089      	b.n	8005554 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005440:	78bb      	ldrb	r3, [r7, #2]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d11d      	bne.n	8005482 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005446:	78fb      	ldrb	r3, [r7, #3]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	212c      	movs	r1, #44	; 0x2c
 800544c:	fb01 f303 	mul.w	r3, r1, r3
 8005450:	4413      	add	r3, r2
 8005452:	3355      	adds	r3, #85	; 0x55
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d109      	bne.n	800546e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800545a:	78fb      	ldrb	r3, [r7, #3]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	212c      	movs	r1, #44	; 0x2c
 8005460:	fb01 f303 	mul.w	r3, r1, r3
 8005464:	4413      	add	r3, r2
 8005466:	3342      	adds	r3, #66	; 0x42
 8005468:	2200      	movs	r2, #0
 800546a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800546c:	e073      	b.n	8005556 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800546e:	78fb      	ldrb	r3, [r7, #3]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	212c      	movs	r1, #44	; 0x2c
 8005474:	fb01 f303 	mul.w	r3, r1, r3
 8005478:	4413      	add	r3, r2
 800547a:	3342      	adds	r3, #66	; 0x42
 800547c:	2202      	movs	r2, #2
 800547e:	701a      	strb	r2, [r3, #0]
      break;
 8005480:	e069      	b.n	8005556 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005482:	78fb      	ldrb	r3, [r7, #3]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	212c      	movs	r1, #44	; 0x2c
 8005488:	fb01 f303 	mul.w	r3, r1, r3
 800548c:	4413      	add	r3, r2
 800548e:	3354      	adds	r3, #84	; 0x54
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d109      	bne.n	80054aa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005496:	78fb      	ldrb	r3, [r7, #3]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	212c      	movs	r1, #44	; 0x2c
 800549c:	fb01 f303 	mul.w	r3, r1, r3
 80054a0:	4413      	add	r3, r2
 80054a2:	3342      	adds	r3, #66	; 0x42
 80054a4:	2200      	movs	r2, #0
 80054a6:	701a      	strb	r2, [r3, #0]
      break;
 80054a8:	e055      	b.n	8005556 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80054aa:	78fb      	ldrb	r3, [r7, #3]
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	212c      	movs	r1, #44	; 0x2c
 80054b0:	fb01 f303 	mul.w	r3, r1, r3
 80054b4:	4413      	add	r3, r2
 80054b6:	3342      	adds	r3, #66	; 0x42
 80054b8:	2202      	movs	r2, #2
 80054ba:	701a      	strb	r2, [r3, #0]
      break;
 80054bc:	e04b      	b.n	8005556 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80054be:	78bb      	ldrb	r3, [r7, #2]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d11d      	bne.n	8005500 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80054c4:	78fb      	ldrb	r3, [r7, #3]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	212c      	movs	r1, #44	; 0x2c
 80054ca:	fb01 f303 	mul.w	r3, r1, r3
 80054ce:	4413      	add	r3, r2
 80054d0:	3355      	adds	r3, #85	; 0x55
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d109      	bne.n	80054ec <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	212c      	movs	r1, #44	; 0x2c
 80054de:	fb01 f303 	mul.w	r3, r1, r3
 80054e2:	4413      	add	r3, r2
 80054e4:	3342      	adds	r3, #66	; 0x42
 80054e6:	2200      	movs	r2, #0
 80054e8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80054ea:	e034      	b.n	8005556 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	212c      	movs	r1, #44	; 0x2c
 80054f2:	fb01 f303 	mul.w	r3, r1, r3
 80054f6:	4413      	add	r3, r2
 80054f8:	3342      	adds	r3, #66	; 0x42
 80054fa:	2202      	movs	r2, #2
 80054fc:	701a      	strb	r2, [r3, #0]
      break;
 80054fe:	e02a      	b.n	8005556 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	212c      	movs	r1, #44	; 0x2c
 8005506:	fb01 f303 	mul.w	r3, r1, r3
 800550a:	4413      	add	r3, r2
 800550c:	3354      	adds	r3, #84	; 0x54
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d109      	bne.n	8005528 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	212c      	movs	r1, #44	; 0x2c
 800551a:	fb01 f303 	mul.w	r3, r1, r3
 800551e:	4413      	add	r3, r2
 8005520:	3342      	adds	r3, #66	; 0x42
 8005522:	2200      	movs	r2, #0
 8005524:	701a      	strb	r2, [r3, #0]
      break;
 8005526:	e016      	b.n	8005556 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	212c      	movs	r1, #44	; 0x2c
 800552e:	fb01 f303 	mul.w	r3, r1, r3
 8005532:	4413      	add	r3, r2
 8005534:	3342      	adds	r3, #66	; 0x42
 8005536:	2202      	movs	r2, #2
 8005538:	701a      	strb	r2, [r3, #0]
      break;
 800553a:	e00c      	b.n	8005556 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	212c      	movs	r1, #44	; 0x2c
 8005542:	fb01 f303 	mul.w	r3, r1, r3
 8005546:	4413      	add	r3, r2
 8005548:	3342      	adds	r3, #66	; 0x42
 800554a:	2200      	movs	r2, #0
 800554c:	701a      	strb	r2, [r3, #0]
      break;
 800554e:	e002      	b.n	8005556 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8005550:	bf00      	nop
 8005552:	e000      	b.n	8005556 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8005554:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005556:	78fb      	ldrb	r3, [r7, #3]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	212c      	movs	r1, #44	; 0x2c
 800555c:	fb01 f303 	mul.w	r3, r1, r3
 8005560:	4413      	add	r3, r2
 8005562:	3344      	adds	r3, #68	; 0x44
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	8b3a      	ldrh	r2, [r7, #24]
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	202c      	movs	r0, #44	; 0x2c
 8005570:	fb00 f303 	mul.w	r3, r0, r3
 8005574:	440b      	add	r3, r1
 8005576:	334c      	adds	r3, #76	; 0x4c
 8005578:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800557a:	78fb      	ldrb	r3, [r7, #3]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	212c      	movs	r1, #44	; 0x2c
 8005580:	fb01 f303 	mul.w	r3, r1, r3
 8005584:	4413      	add	r3, r2
 8005586:	3360      	adds	r3, #96	; 0x60
 8005588:	2200      	movs	r2, #0
 800558a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800558c:	78fb      	ldrb	r3, [r7, #3]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	212c      	movs	r1, #44	; 0x2c
 8005592:	fb01 f303 	mul.w	r3, r1, r3
 8005596:	4413      	add	r3, r2
 8005598:	3350      	adds	r3, #80	; 0x50
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800559e:	78fb      	ldrb	r3, [r7, #3]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	212c      	movs	r1, #44	; 0x2c
 80055a4:	fb01 f303 	mul.w	r3, r1, r3
 80055a8:	4413      	add	r3, r2
 80055aa:	3339      	adds	r3, #57	; 0x39
 80055ac:	78fa      	ldrb	r2, [r7, #3]
 80055ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80055b0:	78fb      	ldrb	r3, [r7, #3]
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	212c      	movs	r1, #44	; 0x2c
 80055b6:	fb01 f303 	mul.w	r3, r1, r3
 80055ba:	4413      	add	r3, r2
 80055bc:	3361      	adds	r3, #97	; 0x61
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	78fb      	ldrb	r3, [r7, #3]
 80055c8:	222c      	movs	r2, #44	; 0x2c
 80055ca:	fb02 f303 	mul.w	r3, r2, r3
 80055ce:	3338      	adds	r3, #56	; 0x38
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	18d1      	adds	r1, r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	461a      	mov	r2, r3
 80055dc:	f008 fac0 	bl	800db60 <USB_HC_StartXfer>
 80055e0:	4603      	mov	r3, r0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop

080055ec <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f007 ffe5 	bl	800d5d2 <USB_GetMode>
 8005608:	4603      	mov	r3, r0
 800560a:	2b01      	cmp	r3, #1
 800560c:	f040 80ef 	bne.w	80057ee <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4618      	mov	r0, r3
 8005616:	f007 ffc9 	bl	800d5ac <USB_ReadInterrupts>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 80e5 	beq.w	80057ec <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4618      	mov	r0, r3
 8005628:	f007 ffc0 	bl	800d5ac <USB_ReadInterrupts>
 800562c:	4603      	mov	r3, r0
 800562e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005632:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005636:	d104      	bne.n	8005642 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005640:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4618      	mov	r0, r3
 8005648:	f007 ffb0 	bl	800d5ac <USB_ReadInterrupts>
 800564c:	4603      	mov	r3, r0
 800564e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005656:	d104      	bne.n	8005662 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005660:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f007 ffa0 	bl	800d5ac <USB_ReadInterrupts>
 800566c:	4603      	mov	r3, r0
 800566e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005672:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005676:	d104      	bne.n	8005682 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005680:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f007 ff90 	bl	800d5ac <USB_ReadInterrupts>
 800568c:	4603      	mov	r3, r0
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b02      	cmp	r3, #2
 8005694:	d103      	bne.n	800569e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2202      	movs	r2, #2
 800569c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f007 ff82 	bl	800d5ac <USB_ReadInterrupts>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056b2:	d115      	bne.n	80056e0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80056bc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d108      	bne.n	80056e0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f00e fc00 	bl	8013ed4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2101      	movs	r1, #1
 80056da:	4618      	mov	r0, r3
 80056dc:	f008 f86c 	bl	800d7b8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f007 ff61 	bl	800d5ac <USB_ReadInterrupts>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056f4:	d102      	bne.n	80056fc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f001 f9ff 	bl	8006afa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f007 ff53 	bl	800d5ac <USB_ReadInterrupts>
 8005706:	4603      	mov	r3, r0
 8005708:	f003 0308 	and.w	r3, r3, #8
 800570c:	2b08      	cmp	r3, #8
 800570e:	d106      	bne.n	800571e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f00e fbc3 	bl	8013e9c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2208      	movs	r2, #8
 800571c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f007 ff42 	bl	800d5ac <USB_ReadInterrupts>
 8005728:	4603      	mov	r3, r0
 800572a:	f003 0310 	and.w	r3, r3, #16
 800572e:	2b10      	cmp	r3, #16
 8005730:	d101      	bne.n	8005736 <HAL_HCD_IRQHandler+0x14a>
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <HAL_HCD_IRQHandler+0x14c>
 8005736:	2300      	movs	r3, #0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d012      	beq.n	8005762 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699a      	ldr	r2, [r3, #24]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0210 	bic.w	r2, r2, #16
 800574a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f001 f902 	bl	8006956 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	699a      	ldr	r2, [r3, #24]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0210 	orr.w	r2, r2, #16
 8005760:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f007 ff20 	bl	800d5ac <USB_ReadInterrupts>
 800576c:	4603      	mov	r3, r0
 800576e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005772:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005776:	d13a      	bne.n	80057ee <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f008 fb31 	bl	800dde4 <USB_HC_ReadInterrupt>
 8005782:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	e025      	b.n	80057d6 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f003 030f 	and.w	r3, r3, #15
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	fa22 f303 	lsr.w	r3, r2, r3
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d018      	beq.n	80057d0 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b4:	d106      	bne.n	80057c4 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	4619      	mov	r1, r3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f8ab 	bl	8005918 <HCD_HC_IN_IRQHandler>
 80057c2:	e005      	b.n	80057d0 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	4619      	mov	r1, r3
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fcc6 	bl	800615c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	3301      	adds	r3, #1
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d3d4      	bcc.n	800578a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057e8:	615a      	str	r2, [r3, #20]
 80057ea:	e000      	b.n	80057ee <HAL_HCD_IRQHandler+0x202>
      return;
 80057ec:	bf00      	nop
    }
  }
}
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005802:	2b01      	cmp	r3, #1
 8005804:	d101      	bne.n	800580a <HAL_HCD_Start+0x16>
 8005806:	2302      	movs	r3, #2
 8005808:	e013      	b.n	8005832 <HAL_HCD_Start+0x3e>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f007 fdd6 	bl	800d3c8 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2101      	movs	r1, #1
 8005822:	4618      	mov	r0, r3
 8005824:	f008 f82c 	bl	800d880 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b082      	sub	sp, #8
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005848:	2b01      	cmp	r3, #1
 800584a:	d101      	bne.n	8005850 <HAL_HCD_Stop+0x16>
 800584c:	2302      	movs	r3, #2
 800584e:	e00d      	b.n	800586c <HAL_HCD_Stop+0x32>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4618      	mov	r0, r3
 800585e:	f008 fc2b 	bl	800e0b8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4618      	mov	r0, r3
 8005882:	f007 ffd3 	bl	800d82c <USB_ResetPort>
 8005886:	4603      	mov	r3, r0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800589c:	78fb      	ldrb	r3, [r7, #3]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	212c      	movs	r1, #44	; 0x2c
 80058a2:	fb01 f303 	mul.w	r3, r1, r3
 80058a6:	4413      	add	r3, r2
 80058a8:	3360      	adds	r3, #96	; 0x60
 80058aa:	781b      	ldrb	r3, [r3, #0]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	212c      	movs	r1, #44	; 0x2c
 80058ca:	fb01 f303 	mul.w	r3, r1, r3
 80058ce:	4413      	add	r3, r2
 80058d0:	3350      	adds	r3, #80	; 0x50
 80058d2:	681b      	ldr	r3, [r3, #0]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f008 f817 	bl	800d920 <USB_GetCurrentFrame>
 80058f2:	4603      	mov	r3, r0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4618      	mov	r0, r3
 800590a:	f007 fff2 	bl	800d8f2 <USB_GetHostSpeed>
 800590e:	4603      	mov	r3, r0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	4413      	add	r3, r2
 800593a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b04      	cmp	r3, #4
 8005946:	d119      	bne.n	800597c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	4413      	add	r3, r2
 8005950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005954:	461a      	mov	r2, r3
 8005956:	2304      	movs	r3, #4
 8005958:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	4413      	add	r3, r2
 8005962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	0151      	lsls	r1, r2, #5
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	440a      	add	r2, r1
 8005970:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005974:	f043 0302 	orr.w	r3, r3, #2
 8005978:	60d3      	str	r3, [r2, #12]
 800597a:	e101      	b.n	8005b80 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	4413      	add	r3, r2
 8005984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005992:	d12b      	bne.n	80059ec <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	4413      	add	r3, r2
 800599c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a0:	461a      	mov	r2, r3
 80059a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	212c      	movs	r1, #44	; 0x2c
 80059ae:	fb01 f303 	mul.w	r3, r1, r3
 80059b2:	4413      	add	r3, r2
 80059b4:	3361      	adds	r3, #97	; 0x61
 80059b6:	2207      	movs	r2, #7
 80059b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	0151      	lsls	r1, r2, #5
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	440a      	add	r2, r1
 80059d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059d4:	f043 0302 	orr.w	r3, r3, #2
 80059d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	4611      	mov	r1, r2
 80059e4:	4618      	mov	r0, r3
 80059e6:	f008 fa0e 	bl	800de06 <USB_HC_Halt>
 80059ea:	e0c9      	b.n	8005b80 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b20      	cmp	r3, #32
 8005a00:	d109      	bne.n	8005a16 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a0e:	461a      	mov	r2, r3
 8005a10:	2320      	movs	r3, #32
 8005a12:	6093      	str	r3, [r2, #8]
 8005a14:	e0b4      	b.n	8005b80 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d133      	bne.n	8005a94 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	0151      	lsls	r1, r2, #5
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	440a      	add	r2, r1
 8005a42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a46:	f043 0302 	orr.w	r3, r3, #2
 8005a4a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	212c      	movs	r1, #44	; 0x2c
 8005a52:	fb01 f303 	mul.w	r3, r1, r3
 8005a56:	4413      	add	r3, r2
 8005a58:	3361      	adds	r3, #97	; 0x61
 8005a5a:	2205      	movs	r2, #5
 8005a5c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	2310      	movs	r3, #16
 8005a6e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	2308      	movs	r3, #8
 8005a80:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	b2d2      	uxtb	r2, r2
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f008 f9ba 	bl	800de06 <USB_HC_Halt>
 8005a92:	e075      	b.n	8005b80 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aaa:	d134      	bne.n	8005b16 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	0151      	lsls	r1, r2, #5
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	440a      	add	r2, r1
 8005ac2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ac6:	f043 0302 	orr.w	r3, r3, #2
 8005aca:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	212c      	movs	r1, #44	; 0x2c
 8005ad2:	fb01 f303 	mul.w	r3, r1, r3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	3361      	adds	r3, #97	; 0x61
 8005ada:	2208      	movs	r2, #8
 8005adc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aea:	461a      	mov	r2, r3
 8005aec:	2310      	movs	r3, #16
 8005aee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afc:	461a      	mov	r2, r3
 8005afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b02:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	b2d2      	uxtb	r2, r2
 8005b0c:	4611      	mov	r1, r2
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f008 f979 	bl	800de06 <USB_HC_Halt>
 8005b14:	e034      	b.n	8005b80 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b28:	2b80      	cmp	r3, #128	; 0x80
 8005b2a:	d129      	bne.n	8005b80 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	0151      	lsls	r1, r2, #5
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	440a      	add	r2, r1
 8005b42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b46:	f043 0302 	orr.w	r3, r3, #2
 8005b4a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	212c      	movs	r1, #44	; 0x2c
 8005b52:	fb01 f303 	mul.w	r3, r1, r3
 8005b56:	4413      	add	r3, r2
 8005b58:	3361      	adds	r3, #97	; 0x61
 8005b5a:	2206      	movs	r2, #6
 8005b5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	4611      	mov	r1, r2
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f008 f94c 	bl	800de06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	2380      	movs	r3, #128	; 0x80
 8005b7e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b96:	d122      	bne.n	8005bde <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	0151      	lsls	r1, r2, #5
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bb2:	f043 0302 	orr.w	r3, r3, #2
 8005bb6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	b2d2      	uxtb	r2, r2
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f008 f91f 	bl	800de06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bda:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005bdc:	e2ba      	b.n	8006154 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	f040 811b 	bne.w	8005e2c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d019      	beq.n	8005c32 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	212c      	movs	r1, #44	; 0x2c
 8005c04:	fb01 f303 	mul.w	r3, r1, r3
 8005c08:	4413      	add	r3, r2
 8005c0a:	3348      	adds	r3, #72	; 0x48
 8005c0c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	0159      	lsls	r1, r3, #5
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	440b      	add	r3, r1
 8005c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005c20:	1ad2      	subs	r2, r2, r3
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	202c      	movs	r0, #44	; 0x2c
 8005c28:	fb00 f303 	mul.w	r3, r0, r3
 8005c2c:	440b      	add	r3, r1
 8005c2e:	3350      	adds	r3, #80	; 0x50
 8005c30:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	212c      	movs	r1, #44	; 0x2c
 8005c38:	fb01 f303 	mul.w	r3, r1, r3
 8005c3c:	4413      	add	r3, r2
 8005c3e:	3361      	adds	r3, #97	; 0x61
 8005c40:	2201      	movs	r2, #1
 8005c42:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	212c      	movs	r1, #44	; 0x2c
 8005c4a:	fb01 f303 	mul.w	r3, r1, r3
 8005c4e:	4413      	add	r3, r2
 8005c50:	335c      	adds	r3, #92	; 0x5c
 8005c52:	2200      	movs	r2, #0
 8005c54:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c62:	461a      	mov	r2, r3
 8005c64:	2301      	movs	r3, #1
 8005c66:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	212c      	movs	r1, #44	; 0x2c
 8005c6e:	fb01 f303 	mul.w	r3, r1, r3
 8005c72:	4413      	add	r3, r2
 8005c74:	333f      	adds	r3, #63	; 0x3f
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d009      	beq.n	8005c90 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	212c      	movs	r1, #44	; 0x2c
 8005c82:	fb01 f303 	mul.w	r3, r1, r3
 8005c86:	4413      	add	r3, r2
 8005c88:	333f      	adds	r3, #63	; 0x3f
 8005c8a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d121      	bne.n	8005cd4 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	0151      	lsls	r1, r2, #5
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	440a      	add	r2, r1
 8005ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005caa:	f043 0302 	orr.w	r3, r3, #2
 8005cae:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	4611      	mov	r1, r2
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f008 f8a3 	bl	800de06 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ccc:	461a      	mov	r2, r3
 8005cce:	2310      	movs	r3, #16
 8005cd0:	6093      	str	r3, [r2, #8]
 8005cd2:	e066      	b.n	8005da2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	212c      	movs	r1, #44	; 0x2c
 8005cda:	fb01 f303 	mul.w	r3, r1, r3
 8005cde:	4413      	add	r3, r2
 8005ce0:	333f      	adds	r3, #63	; 0x3f
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d127      	bne.n	8005d38 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	0151      	lsls	r1, r2, #5
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	440a      	add	r2, r1
 8005cfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d06:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	212c      	movs	r1, #44	; 0x2c
 8005d0e:	fb01 f303 	mul.w	r3, r1, r3
 8005d12:	4413      	add	r3, r2
 8005d14:	3360      	adds	r3, #96	; 0x60
 8005d16:	2201      	movs	r2, #1
 8005d18:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	b2d9      	uxtb	r1, r3
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	202c      	movs	r0, #44	; 0x2c
 8005d24:	fb00 f303 	mul.w	r3, r0, r3
 8005d28:	4413      	add	r3, r2
 8005d2a:	3360      	adds	r3, #96	; 0x60
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f00e f8dd 	bl	8013ef0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005d36:	e034      	b.n	8005da2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	212c      	movs	r1, #44	; 0x2c
 8005d3e:	fb01 f303 	mul.w	r3, r1, r3
 8005d42:	4413      	add	r3, r2
 8005d44:	333f      	adds	r3, #63	; 0x3f
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d12a      	bne.n	8005da2 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	212c      	movs	r1, #44	; 0x2c
 8005d52:	fb01 f303 	mul.w	r3, r1, r3
 8005d56:	4413      	add	r3, r2
 8005d58:	3360      	adds	r3, #96	; 0x60
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	212c      	movs	r1, #44	; 0x2c
 8005d64:	fb01 f303 	mul.w	r3, r1, r3
 8005d68:	4413      	add	r3, r2
 8005d6a:	3354      	adds	r3, #84	; 0x54
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	f083 0301 	eor.w	r3, r3, #1
 8005d72:	b2d8      	uxtb	r0, r3
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	212c      	movs	r1, #44	; 0x2c
 8005d7a:	fb01 f303 	mul.w	r3, r1, r3
 8005d7e:	4413      	add	r3, r2
 8005d80:	3354      	adds	r3, #84	; 0x54
 8005d82:	4602      	mov	r2, r0
 8005d84:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	b2d9      	uxtb	r1, r3
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	202c      	movs	r0, #44	; 0x2c
 8005d90:	fb00 f303 	mul.w	r3, r0, r3
 8005d94:	4413      	add	r3, r2
 8005d96:	3360      	adds	r3, #96	; 0x60
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f00e f8a7 	bl	8013ef0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d12b      	bne.n	8005e02 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	212c      	movs	r1, #44	; 0x2c
 8005db0:	fb01 f303 	mul.w	r3, r1, r3
 8005db4:	4413      	add	r3, r2
 8005db6:	3348      	adds	r3, #72	; 0x48
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6879      	ldr	r1, [r7, #4]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	202c      	movs	r0, #44	; 0x2c
 8005dc0:	fb00 f202 	mul.w	r2, r0, r2
 8005dc4:	440a      	add	r2, r1
 8005dc6:	3240      	adds	r2, #64	; 0x40
 8005dc8:	8812      	ldrh	r2, [r2, #0]
 8005dca:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 81be 	beq.w	8006154 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	212c      	movs	r1, #44	; 0x2c
 8005dde:	fb01 f303 	mul.w	r3, r1, r3
 8005de2:	4413      	add	r3, r2
 8005de4:	3354      	adds	r3, #84	; 0x54
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	f083 0301 	eor.w	r3, r3, #1
 8005dec:	b2d8      	uxtb	r0, r3
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	212c      	movs	r1, #44	; 0x2c
 8005df4:	fb01 f303 	mul.w	r3, r1, r3
 8005df8:	4413      	add	r3, r2
 8005dfa:	3354      	adds	r3, #84	; 0x54
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	701a      	strb	r2, [r3, #0]
}
 8005e00:	e1a8      	b.n	8006154 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	212c      	movs	r1, #44	; 0x2c
 8005e08:	fb01 f303 	mul.w	r3, r1, r3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	3354      	adds	r3, #84	; 0x54
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	f083 0301 	eor.w	r3, r3, #1
 8005e16:	b2d8      	uxtb	r0, r3
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	212c      	movs	r1, #44	; 0x2c
 8005e1e:	fb01 f303 	mul.w	r3, r1, r3
 8005e22:	4413      	add	r3, r2
 8005e24:	3354      	adds	r3, #84	; 0x54
 8005e26:	4602      	mov	r2, r0
 8005e28:	701a      	strb	r2, [r3, #0]
}
 8005e2a:	e193      	b.n	8006154 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	f040 8106 	bne.w	8006050 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	0151      	lsls	r1, r2, #5
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	440a      	add	r2, r1
 8005e5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e5e:	f023 0302 	bic.w	r3, r3, #2
 8005e62:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	212c      	movs	r1, #44	; 0x2c
 8005e6a:	fb01 f303 	mul.w	r3, r1, r3
 8005e6e:	4413      	add	r3, r2
 8005e70:	3361      	adds	r3, #97	; 0x61
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d109      	bne.n	8005e8c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	212c      	movs	r1, #44	; 0x2c
 8005e7e:	fb01 f303 	mul.w	r3, r1, r3
 8005e82:	4413      	add	r3, r2
 8005e84:	3360      	adds	r3, #96	; 0x60
 8005e86:	2201      	movs	r2, #1
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	e0c9      	b.n	8006020 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	212c      	movs	r1, #44	; 0x2c
 8005e92:	fb01 f303 	mul.w	r3, r1, r3
 8005e96:	4413      	add	r3, r2
 8005e98:	3361      	adds	r3, #97	; 0x61
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b05      	cmp	r3, #5
 8005e9e:	d109      	bne.n	8005eb4 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	212c      	movs	r1, #44	; 0x2c
 8005ea6:	fb01 f303 	mul.w	r3, r1, r3
 8005eaa:	4413      	add	r3, r2
 8005eac:	3360      	adds	r3, #96	; 0x60
 8005eae:	2205      	movs	r2, #5
 8005eb0:	701a      	strb	r2, [r3, #0]
 8005eb2:	e0b5      	b.n	8006020 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	212c      	movs	r1, #44	; 0x2c
 8005eba:	fb01 f303 	mul.w	r3, r1, r3
 8005ebe:	4413      	add	r3, r2
 8005ec0:	3361      	adds	r3, #97	; 0x61
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b06      	cmp	r3, #6
 8005ec6:	d009      	beq.n	8005edc <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	212c      	movs	r1, #44	; 0x2c
 8005ece:	fb01 f303 	mul.w	r3, r1, r3
 8005ed2:	4413      	add	r3, r2
 8005ed4:	3361      	adds	r3, #97	; 0x61
 8005ed6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d150      	bne.n	8005f7e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	212c      	movs	r1, #44	; 0x2c
 8005ee2:	fb01 f303 	mul.w	r3, r1, r3
 8005ee6:	4413      	add	r3, r2
 8005ee8:	335c      	adds	r3, #92	; 0x5c
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	202c      	movs	r0, #44	; 0x2c
 8005ef4:	fb00 f303 	mul.w	r3, r0, r3
 8005ef8:	440b      	add	r3, r1
 8005efa:	335c      	adds	r3, #92	; 0x5c
 8005efc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	212c      	movs	r1, #44	; 0x2c
 8005f04:	fb01 f303 	mul.w	r3, r1, r3
 8005f08:	4413      	add	r3, r2
 8005f0a:	335c      	adds	r3, #92	; 0x5c
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d912      	bls.n	8005f38 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	212c      	movs	r1, #44	; 0x2c
 8005f18:	fb01 f303 	mul.w	r3, r1, r3
 8005f1c:	4413      	add	r3, r2
 8005f1e:	335c      	adds	r3, #92	; 0x5c
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	212c      	movs	r1, #44	; 0x2c
 8005f2a:	fb01 f303 	mul.w	r3, r1, r3
 8005f2e:	4413      	add	r3, r2
 8005f30:	3360      	adds	r3, #96	; 0x60
 8005f32:	2204      	movs	r2, #4
 8005f34:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005f36:	e073      	b.n	8006020 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	212c      	movs	r1, #44	; 0x2c
 8005f3e:	fb01 f303 	mul.w	r3, r1, r3
 8005f42:	4413      	add	r3, r2
 8005f44:	3360      	adds	r3, #96	; 0x60
 8005f46:	2202      	movs	r2, #2
 8005f48:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f60:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f68:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f76:	461a      	mov	r2, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005f7c:	e050      	b.n	8006020 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	212c      	movs	r1, #44	; 0x2c
 8005f84:	fb01 f303 	mul.w	r3, r1, r3
 8005f88:	4413      	add	r3, r2
 8005f8a:	3361      	adds	r3, #97	; 0x61
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d122      	bne.n	8005fd8 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	212c      	movs	r1, #44	; 0x2c
 8005f98:	fb01 f303 	mul.w	r3, r1, r3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	3360      	adds	r3, #96	; 0x60
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fc2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	e023      	b.n	8006020 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	212c      	movs	r1, #44	; 0x2c
 8005fde:	fb01 f303 	mul.w	r3, r1, r3
 8005fe2:	4413      	add	r3, r2
 8005fe4:	3361      	adds	r3, #97	; 0x61
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b07      	cmp	r3, #7
 8005fea:	d119      	bne.n	8006020 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	212c      	movs	r1, #44	; 0x2c
 8005ff2:	fb01 f303 	mul.w	r3, r1, r3
 8005ff6:	4413      	add	r3, r2
 8005ff8:	335c      	adds	r3, #92	; 0x5c
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	202c      	movs	r0, #44	; 0x2c
 8006004:	fb00 f303 	mul.w	r3, r0, r3
 8006008:	440b      	add	r3, r1
 800600a:	335c      	adds	r3, #92	; 0x5c
 800600c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	212c      	movs	r1, #44	; 0x2c
 8006014:	fb01 f303 	mul.w	r3, r1, r3
 8006018:	4413      	add	r3, r2
 800601a:	3360      	adds	r3, #96	; 0x60
 800601c:	2204      	movs	r2, #4
 800601e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	4413      	add	r3, r2
 8006028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800602c:	461a      	mov	r2, r3
 800602e:	2302      	movs	r3, #2
 8006030:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	b2d9      	uxtb	r1, r3
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	202c      	movs	r0, #44	; 0x2c
 800603c:	fb00 f303 	mul.w	r3, r0, r3
 8006040:	4413      	add	r3, r2
 8006042:	3360      	adds	r3, #96	; 0x60
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f00d ff51 	bl	8013ef0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800604e:	e081      	b.n	8006154 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	4413      	add	r3, r2
 8006058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f003 0310 	and.w	r3, r3, #16
 8006062:	2b10      	cmp	r3, #16
 8006064:	d176      	bne.n	8006154 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	212c      	movs	r1, #44	; 0x2c
 800606c:	fb01 f303 	mul.w	r3, r1, r3
 8006070:	4413      	add	r3, r2
 8006072:	333f      	adds	r3, #63	; 0x3f
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b03      	cmp	r3, #3
 8006078:	d121      	bne.n	80060be <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	212c      	movs	r1, #44	; 0x2c
 8006080:	fb01 f303 	mul.w	r3, r1, r3
 8006084:	4413      	add	r3, r2
 8006086:	335c      	adds	r3, #92	; 0x5c
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	4413      	add	r3, r2
 8006094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	0151      	lsls	r1, r2, #5
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	440a      	add	r2, r1
 80060a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060a6:	f043 0302 	orr.w	r3, r3, #2
 80060aa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	b2d2      	uxtb	r2, r2
 80060b4:	4611      	mov	r1, r2
 80060b6:	4618      	mov	r0, r3
 80060b8:	f007 fea5 	bl	800de06 <USB_HC_Halt>
 80060bc:	e041      	b.n	8006142 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	212c      	movs	r1, #44	; 0x2c
 80060c4:	fb01 f303 	mul.w	r3, r1, r3
 80060c8:	4413      	add	r3, r2
 80060ca:	333f      	adds	r3, #63	; 0x3f
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d009      	beq.n	80060e6 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	212c      	movs	r1, #44	; 0x2c
 80060d8:	fb01 f303 	mul.w	r3, r1, r3
 80060dc:	4413      	add	r3, r2
 80060de:	333f      	adds	r3, #63	; 0x3f
 80060e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d12d      	bne.n	8006142 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	212c      	movs	r1, #44	; 0x2c
 80060ec:	fb01 f303 	mul.w	r3, r1, r3
 80060f0:	4413      	add	r3, r2
 80060f2:	335c      	adds	r3, #92	; 0x5c
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d120      	bne.n	8006142 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	212c      	movs	r1, #44	; 0x2c
 8006106:	fb01 f303 	mul.w	r3, r1, r3
 800610a:	4413      	add	r3, r2
 800610c:	3361      	adds	r3, #97	; 0x61
 800610e:	2203      	movs	r2, #3
 8006110:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	4413      	add	r3, r2
 800611a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	0151      	lsls	r1, r2, #5
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	440a      	add	r2, r1
 8006128:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800612c:	f043 0302 	orr.w	r3, r3, #2
 8006130:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	4611      	mov	r1, r2
 800613c:	4618      	mov	r0, r3
 800613e:	f007 fe62 	bl	800de06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	4413      	add	r3, r2
 800614a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614e:	461a      	mov	r2, r3
 8006150:	2310      	movs	r3, #16
 8006152:	6093      	str	r3, [r2, #8]
}
 8006154:	bf00      	nop
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b088      	sub	sp, #32
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8006172:	78fb      	ldrb	r3, [r7, #3]
 8006174:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	4413      	add	r3, r2
 800617e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b04      	cmp	r3, #4
 800618a:	d119      	bne.n	80061c0 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	4413      	add	r3, r2
 8006194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006198:	461a      	mov	r2, r3
 800619a:	2304      	movs	r3, #4
 800619c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061b8:	f043 0302 	orr.w	r3, r3, #2
 80061bc:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80061be:	e3c6      	b.n	800694e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	d13e      	bne.n	8006254 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e2:	461a      	mov	r2, r3
 80061e4:	2320      	movs	r3, #32
 80061e6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	212c      	movs	r1, #44	; 0x2c
 80061ee:	fb01 f303 	mul.w	r3, r1, r3
 80061f2:	4413      	add	r3, r2
 80061f4:	333d      	adds	r3, #61	; 0x3d
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	f040 83a8 	bne.w	800694e <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	212c      	movs	r1, #44	; 0x2c
 8006204:	fb01 f303 	mul.w	r3, r1, r3
 8006208:	4413      	add	r3, r2
 800620a:	333d      	adds	r3, #61	; 0x3d
 800620c:	2200      	movs	r2, #0
 800620e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	212c      	movs	r1, #44	; 0x2c
 8006216:	fb01 f303 	mul.w	r3, r1, r3
 800621a:	4413      	add	r3, r2
 800621c:	3360      	adds	r3, #96	; 0x60
 800621e:	2202      	movs	r2, #2
 8006220:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	4413      	add	r3, r2
 800622a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	0151      	lsls	r1, r2, #5
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	440a      	add	r2, r1
 8006238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800623c:	f043 0302 	orr.w	r3, r3, #2
 8006240:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	b2d2      	uxtb	r2, r2
 800624a:	4611      	mov	r1, r2
 800624c:	4618      	mov	r0, r3
 800624e:	f007 fdda 	bl	800de06 <USB_HC_Halt>
}
 8006252:	e37c      	b.n	800694e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	4413      	add	r3, r2
 800625c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800626a:	d122      	bne.n	80062b2 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	4413      	add	r3, r2
 8006274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	440a      	add	r2, r1
 8006282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006286:	f043 0302 	orr.w	r3, r3, #2
 800628a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	4611      	mov	r1, r2
 8006296:	4618      	mov	r0, r3
 8006298:	f007 fdb5 	bl	800de06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a8:	461a      	mov	r2, r3
 80062aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062ae:	6093      	str	r3, [r2, #8]
}
 80062b0:	e34d      	b.n	800694e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d150      	bne.n	800636a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	212c      	movs	r1, #44	; 0x2c
 80062ce:	fb01 f303 	mul.w	r3, r1, r3
 80062d2:	4413      	add	r3, r2
 80062d4:	335c      	adds	r3, #92	; 0x5c
 80062d6:	2200      	movs	r2, #0
 80062d8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ec:	2b40      	cmp	r3, #64	; 0x40
 80062ee:	d111      	bne.n	8006314 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	212c      	movs	r1, #44	; 0x2c
 80062f6:	fb01 f303 	mul.w	r3, r1, r3
 80062fa:	4413      	add	r3, r2
 80062fc:	333d      	adds	r3, #61	; 0x3d
 80062fe:	2201      	movs	r2, #1
 8006300:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	4413      	add	r3, r2
 800630a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630e:	461a      	mov	r2, r3
 8006310:	2340      	movs	r3, #64	; 0x40
 8006312:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	4413      	add	r3, r2
 800631c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	0151      	lsls	r1, r2, #5
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	440a      	add	r2, r1
 800632a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800632e:	f043 0302 	orr.w	r3, r3, #2
 8006332:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	4611      	mov	r1, r2
 800633e:	4618      	mov	r0, r3
 8006340:	f007 fd61 	bl	800de06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	4413      	add	r3, r2
 800634c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006350:	461a      	mov	r2, r3
 8006352:	2301      	movs	r3, #1
 8006354:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	212c      	movs	r1, #44	; 0x2c
 800635c:	fb01 f303 	mul.w	r3, r1, r3
 8006360:	4413      	add	r3, r2
 8006362:	3361      	adds	r3, #97	; 0x61
 8006364:	2201      	movs	r2, #1
 8006366:	701a      	strb	r2, [r3, #0]
}
 8006368:	e2f1      	b.n	800694e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	4413      	add	r3, r2
 8006372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637c:	2b40      	cmp	r3, #64	; 0x40
 800637e:	d13c      	bne.n	80063fa <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	212c      	movs	r1, #44	; 0x2c
 8006386:	fb01 f303 	mul.w	r3, r1, r3
 800638a:	4413      	add	r3, r2
 800638c:	3361      	adds	r3, #97	; 0x61
 800638e:	2204      	movs	r2, #4
 8006390:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	212c      	movs	r1, #44	; 0x2c
 8006398:	fb01 f303 	mul.w	r3, r1, r3
 800639c:	4413      	add	r3, r2
 800639e:	333d      	adds	r3, #61	; 0x3d
 80063a0:	2201      	movs	r2, #1
 80063a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	212c      	movs	r1, #44	; 0x2c
 80063aa:	fb01 f303 	mul.w	r3, r1, r3
 80063ae:	4413      	add	r3, r2
 80063b0:	335c      	adds	r3, #92	; 0x5c
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063d0:	f043 0302 	orr.w	r3, r3, #2
 80063d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	b2d2      	uxtb	r2, r2
 80063de:	4611      	mov	r1, r2
 80063e0:	4618      	mov	r0, r3
 80063e2:	f007 fd10 	bl	800de06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f2:	461a      	mov	r2, r3
 80063f4:	2340      	movs	r3, #64	; 0x40
 80063f6:	6093      	str	r3, [r2, #8]
}
 80063f8:	e2a9      	b.n	800694e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	4413      	add	r3, r2
 8006402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f003 0308 	and.w	r3, r3, #8
 800640c:	2b08      	cmp	r3, #8
 800640e:	d12a      	bne.n	8006466 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	4413      	add	r3, r2
 8006418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641c:	461a      	mov	r2, r3
 800641e:	2308      	movs	r3, #8
 8006420:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	015a      	lsls	r2, r3, #5
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	4413      	add	r3, r2
 800642a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	0151      	lsls	r1, r2, #5
 8006434:	69ba      	ldr	r2, [r7, #24]
 8006436:	440a      	add	r2, r1
 8006438:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800643c:	f043 0302 	orr.w	r3, r3, #2
 8006440:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	b2d2      	uxtb	r2, r2
 800644a:	4611      	mov	r1, r2
 800644c:	4618      	mov	r0, r3
 800644e:	f007 fcda 	bl	800de06 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	212c      	movs	r1, #44	; 0x2c
 8006458:	fb01 f303 	mul.w	r3, r1, r3
 800645c:	4413      	add	r3, r2
 800645e:	3361      	adds	r3, #97	; 0x61
 8006460:	2205      	movs	r2, #5
 8006462:	701a      	strb	r2, [r3, #0]
}
 8006464:	e273      	b.n	800694e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	4413      	add	r3, r2
 800646e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f003 0310 	and.w	r3, r3, #16
 8006478:	2b10      	cmp	r3, #16
 800647a:	d150      	bne.n	800651e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	212c      	movs	r1, #44	; 0x2c
 8006482:	fb01 f303 	mul.w	r3, r1, r3
 8006486:	4413      	add	r3, r2
 8006488:	335c      	adds	r3, #92	; 0x5c
 800648a:	2200      	movs	r2, #0
 800648c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	212c      	movs	r1, #44	; 0x2c
 8006494:	fb01 f303 	mul.w	r3, r1, r3
 8006498:	4413      	add	r3, r2
 800649a:	3361      	adds	r3, #97	; 0x61
 800649c:	2203      	movs	r2, #3
 800649e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	212c      	movs	r1, #44	; 0x2c
 80064a6:	fb01 f303 	mul.w	r3, r1, r3
 80064aa:	4413      	add	r3, r2
 80064ac:	333d      	adds	r3, #61	; 0x3d
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d112      	bne.n	80064da <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	212c      	movs	r1, #44	; 0x2c
 80064ba:	fb01 f303 	mul.w	r3, r1, r3
 80064be:	4413      	add	r3, r2
 80064c0:	333c      	adds	r3, #60	; 0x3c
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d108      	bne.n	80064da <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	212c      	movs	r1, #44	; 0x2c
 80064ce:	fb01 f303 	mul.w	r3, r1, r3
 80064d2:	4413      	add	r3, r2
 80064d4:	333d      	adds	r3, #61	; 0x3d
 80064d6:	2201      	movs	r2, #1
 80064d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	0151      	lsls	r1, r2, #5
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	440a      	add	r2, r1
 80064f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064f4:	f043 0302 	orr.w	r3, r3, #2
 80064f8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	b2d2      	uxtb	r2, r2
 8006502:	4611      	mov	r1, r2
 8006504:	4618      	mov	r0, r3
 8006506:	f007 fc7e 	bl	800de06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	4413      	add	r3, r2
 8006512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006516:	461a      	mov	r2, r3
 8006518:	2310      	movs	r3, #16
 800651a:	6093      	str	r3, [r2, #8]
}
 800651c:	e217      	b.n	800694e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	4413      	add	r3, r2
 8006526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006530:	2b80      	cmp	r3, #128	; 0x80
 8006532:	d174      	bne.n	800661e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d121      	bne.n	8006580 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	212c      	movs	r1, #44	; 0x2c
 8006542:	fb01 f303 	mul.w	r3, r1, r3
 8006546:	4413      	add	r3, r2
 8006548:	3361      	adds	r3, #97	; 0x61
 800654a:	2206      	movs	r2, #6
 800654c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	4413      	add	r3, r2
 8006556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	0151      	lsls	r1, r2, #5
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	440a      	add	r2, r1
 8006564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006568:	f043 0302 	orr.w	r3, r3, #2
 800656c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	b2d2      	uxtb	r2, r2
 8006576:	4611      	mov	r1, r2
 8006578:	4618      	mov	r0, r3
 800657a:	f007 fc44 	bl	800de06 <USB_HC_Halt>
 800657e:	e044      	b.n	800660a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	212c      	movs	r1, #44	; 0x2c
 8006586:	fb01 f303 	mul.w	r3, r1, r3
 800658a:	4413      	add	r3, r2
 800658c:	335c      	adds	r3, #92	; 0x5c
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	1c5a      	adds	r2, r3, #1
 8006592:	6879      	ldr	r1, [r7, #4]
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	202c      	movs	r0, #44	; 0x2c
 8006598:	fb00 f303 	mul.w	r3, r0, r3
 800659c:	440b      	add	r3, r1
 800659e:	335c      	adds	r3, #92	; 0x5c
 80065a0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	212c      	movs	r1, #44	; 0x2c
 80065a8:	fb01 f303 	mul.w	r3, r1, r3
 80065ac:	4413      	add	r3, r2
 80065ae:	335c      	adds	r3, #92	; 0x5c
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d920      	bls.n	80065f8 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	212c      	movs	r1, #44	; 0x2c
 80065bc:	fb01 f303 	mul.w	r3, r1, r3
 80065c0:	4413      	add	r3, r2
 80065c2:	335c      	adds	r3, #92	; 0x5c
 80065c4:	2200      	movs	r2, #0
 80065c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	212c      	movs	r1, #44	; 0x2c
 80065ce:	fb01 f303 	mul.w	r3, r1, r3
 80065d2:	4413      	add	r3, r2
 80065d4:	3360      	adds	r3, #96	; 0x60
 80065d6:	2204      	movs	r2, #4
 80065d8:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	b2d9      	uxtb	r1, r3
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	202c      	movs	r0, #44	; 0x2c
 80065e4:	fb00 f303 	mul.w	r3, r0, r3
 80065e8:	4413      	add	r3, r2
 80065ea:	3360      	adds	r3, #96	; 0x60
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f00d fc7d 	bl	8013ef0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80065f6:	e008      	b.n	800660a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	212c      	movs	r1, #44	; 0x2c
 80065fe:	fb01 f303 	mul.w	r3, r1, r3
 8006602:	4413      	add	r3, r2
 8006604:	3360      	adds	r3, #96	; 0x60
 8006606:	2202      	movs	r2, #2
 8006608:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	4413      	add	r3, r2
 8006612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006616:	461a      	mov	r2, r3
 8006618:	2380      	movs	r3, #128	; 0x80
 800661a:	6093      	str	r3, [r2, #8]
}
 800661c:	e197      	b.n	800694e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	4413      	add	r3, r2
 8006626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006634:	d134      	bne.n	80066a0 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	4413      	add	r3, r2
 800663e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	0151      	lsls	r1, r2, #5
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	440a      	add	r2, r1
 800664c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006650:	f043 0302 	orr.w	r3, r3, #2
 8006654:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	b2d2      	uxtb	r2, r2
 800665e:	4611      	mov	r1, r2
 8006660:	4618      	mov	r0, r3
 8006662:	f007 fbd0 	bl	800de06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	4413      	add	r3, r2
 800666e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006672:	461a      	mov	r2, r3
 8006674:	2310      	movs	r3, #16
 8006676:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	4413      	add	r3, r2
 8006680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006684:	461a      	mov	r2, r3
 8006686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800668a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	212c      	movs	r1, #44	; 0x2c
 8006692:	fb01 f303 	mul.w	r3, r1, r3
 8006696:	4413      	add	r3, r2
 8006698:	3361      	adds	r3, #97	; 0x61
 800669a:	2208      	movs	r2, #8
 800669c:	701a      	strb	r2, [r3, #0]
}
 800669e:	e156      	b.n	800694e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	f040 814b 	bne.w	800694e <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	0151      	lsls	r1, r2, #5
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	440a      	add	r2, r1
 80066ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066d2:	f023 0302 	bic.w	r3, r3, #2
 80066d6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	212c      	movs	r1, #44	; 0x2c
 80066de:	fb01 f303 	mul.w	r3, r1, r3
 80066e2:	4413      	add	r3, r2
 80066e4:	3361      	adds	r3, #97	; 0x61
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d179      	bne.n	80067e0 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	212c      	movs	r1, #44	; 0x2c
 80066f2:	fb01 f303 	mul.w	r3, r1, r3
 80066f6:	4413      	add	r3, r2
 80066f8:	3360      	adds	r3, #96	; 0x60
 80066fa:	2201      	movs	r2, #1
 80066fc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	212c      	movs	r1, #44	; 0x2c
 8006704:	fb01 f303 	mul.w	r3, r1, r3
 8006708:	4413      	add	r3, r2
 800670a:	333f      	adds	r3, #63	; 0x3f
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b02      	cmp	r3, #2
 8006710:	d00a      	beq.n	8006728 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	212c      	movs	r1, #44	; 0x2c
 8006718:	fb01 f303 	mul.w	r3, r1, r3
 800671c:	4413      	add	r3, r2
 800671e:	333f      	adds	r3, #63	; 0x3f
 8006720:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006722:	2b03      	cmp	r3, #3
 8006724:	f040 80fc 	bne.w	8006920 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d142      	bne.n	80067b6 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	212c      	movs	r1, #44	; 0x2c
 8006736:	fb01 f303 	mul.w	r3, r1, r3
 800673a:	4413      	add	r3, r2
 800673c:	334c      	adds	r3, #76	; 0x4c
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 80ed 	beq.w	8006920 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	212c      	movs	r1, #44	; 0x2c
 800674c:	fb01 f303 	mul.w	r3, r1, r3
 8006750:	4413      	add	r3, r2
 8006752:	334c      	adds	r3, #76	; 0x4c
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6879      	ldr	r1, [r7, #4]
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	202c      	movs	r0, #44	; 0x2c
 800675c:	fb00 f202 	mul.w	r2, r0, r2
 8006760:	440a      	add	r2, r1
 8006762:	3240      	adds	r2, #64	; 0x40
 8006764:	8812      	ldrh	r2, [r2, #0]
 8006766:	4413      	add	r3, r2
 8006768:	3b01      	subs	r3, #1
 800676a:	6879      	ldr	r1, [r7, #4]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	202c      	movs	r0, #44	; 0x2c
 8006770:	fb00 f202 	mul.w	r2, r0, r2
 8006774:	440a      	add	r2, r1
 8006776:	3240      	adds	r2, #64	; 0x40
 8006778:	8812      	ldrh	r2, [r2, #0]
 800677a:	fbb3 f3f2 	udiv	r3, r3, r2
 800677e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 80ca 	beq.w	8006920 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	212c      	movs	r1, #44	; 0x2c
 8006792:	fb01 f303 	mul.w	r3, r1, r3
 8006796:	4413      	add	r3, r2
 8006798:	3355      	adds	r3, #85	; 0x55
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	f083 0301 	eor.w	r3, r3, #1
 80067a0:	b2d8      	uxtb	r0, r3
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	212c      	movs	r1, #44	; 0x2c
 80067a8:	fb01 f303 	mul.w	r3, r1, r3
 80067ac:	4413      	add	r3, r2
 80067ae:	3355      	adds	r3, #85	; 0x55
 80067b0:	4602      	mov	r2, r0
 80067b2:	701a      	strb	r2, [r3, #0]
 80067b4:	e0b4      	b.n	8006920 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	212c      	movs	r1, #44	; 0x2c
 80067bc:	fb01 f303 	mul.w	r3, r1, r3
 80067c0:	4413      	add	r3, r2
 80067c2:	3355      	adds	r3, #85	; 0x55
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	f083 0301 	eor.w	r3, r3, #1
 80067ca:	b2d8      	uxtb	r0, r3
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	212c      	movs	r1, #44	; 0x2c
 80067d2:	fb01 f303 	mul.w	r3, r1, r3
 80067d6:	4413      	add	r3, r2
 80067d8:	3355      	adds	r3, #85	; 0x55
 80067da:	4602      	mov	r2, r0
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	e09f      	b.n	8006920 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	212c      	movs	r1, #44	; 0x2c
 80067e6:	fb01 f303 	mul.w	r3, r1, r3
 80067ea:	4413      	add	r3, r2
 80067ec:	3361      	adds	r3, #97	; 0x61
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b03      	cmp	r3, #3
 80067f2:	d109      	bne.n	8006808 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	212c      	movs	r1, #44	; 0x2c
 80067fa:	fb01 f303 	mul.w	r3, r1, r3
 80067fe:	4413      	add	r3, r2
 8006800:	3360      	adds	r3, #96	; 0x60
 8006802:	2202      	movs	r2, #2
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	e08b      	b.n	8006920 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	212c      	movs	r1, #44	; 0x2c
 800680e:	fb01 f303 	mul.w	r3, r1, r3
 8006812:	4413      	add	r3, r2
 8006814:	3361      	adds	r3, #97	; 0x61
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b04      	cmp	r3, #4
 800681a:	d109      	bne.n	8006830 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	212c      	movs	r1, #44	; 0x2c
 8006822:	fb01 f303 	mul.w	r3, r1, r3
 8006826:	4413      	add	r3, r2
 8006828:	3360      	adds	r3, #96	; 0x60
 800682a:	2202      	movs	r2, #2
 800682c:	701a      	strb	r2, [r3, #0]
 800682e:	e077      	b.n	8006920 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	212c      	movs	r1, #44	; 0x2c
 8006836:	fb01 f303 	mul.w	r3, r1, r3
 800683a:	4413      	add	r3, r2
 800683c:	3361      	adds	r3, #97	; 0x61
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	2b05      	cmp	r3, #5
 8006842:	d109      	bne.n	8006858 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	212c      	movs	r1, #44	; 0x2c
 800684a:	fb01 f303 	mul.w	r3, r1, r3
 800684e:	4413      	add	r3, r2
 8006850:	3360      	adds	r3, #96	; 0x60
 8006852:	2205      	movs	r2, #5
 8006854:	701a      	strb	r2, [r3, #0]
 8006856:	e063      	b.n	8006920 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	212c      	movs	r1, #44	; 0x2c
 800685e:	fb01 f303 	mul.w	r3, r1, r3
 8006862:	4413      	add	r3, r2
 8006864:	3361      	adds	r3, #97	; 0x61
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	2b06      	cmp	r3, #6
 800686a:	d009      	beq.n	8006880 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	212c      	movs	r1, #44	; 0x2c
 8006872:	fb01 f303 	mul.w	r3, r1, r3
 8006876:	4413      	add	r3, r2
 8006878:	3361      	adds	r3, #97	; 0x61
 800687a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800687c:	2b08      	cmp	r3, #8
 800687e:	d14f      	bne.n	8006920 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	212c      	movs	r1, #44	; 0x2c
 8006886:	fb01 f303 	mul.w	r3, r1, r3
 800688a:	4413      	add	r3, r2
 800688c:	335c      	adds	r3, #92	; 0x5c
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	6879      	ldr	r1, [r7, #4]
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	202c      	movs	r0, #44	; 0x2c
 8006898:	fb00 f303 	mul.w	r3, r0, r3
 800689c:	440b      	add	r3, r1
 800689e:	335c      	adds	r3, #92	; 0x5c
 80068a0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	212c      	movs	r1, #44	; 0x2c
 80068a8:	fb01 f303 	mul.w	r3, r1, r3
 80068ac:	4413      	add	r3, r2
 80068ae:	335c      	adds	r3, #92	; 0x5c
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d912      	bls.n	80068dc <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	212c      	movs	r1, #44	; 0x2c
 80068bc:	fb01 f303 	mul.w	r3, r1, r3
 80068c0:	4413      	add	r3, r2
 80068c2:	335c      	adds	r3, #92	; 0x5c
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	212c      	movs	r1, #44	; 0x2c
 80068ce:	fb01 f303 	mul.w	r3, r1, r3
 80068d2:	4413      	add	r3, r2
 80068d4:	3360      	adds	r3, #96	; 0x60
 80068d6:	2204      	movs	r2, #4
 80068d8:	701a      	strb	r2, [r3, #0]
 80068da:	e021      	b.n	8006920 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	212c      	movs	r1, #44	; 0x2c
 80068e2:	fb01 f303 	mul.w	r3, r1, r3
 80068e6:	4413      	add	r3, r2
 80068e8:	3360      	adds	r3, #96	; 0x60
 80068ea:	2202      	movs	r2, #2
 80068ec:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006904:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800690c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	4413      	add	r3, r2
 8006916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800691a:	461a      	mov	r2, r3
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	4413      	add	r3, r2
 8006928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692c:	461a      	mov	r2, r3
 800692e:	2302      	movs	r3, #2
 8006930:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	b2d9      	uxtb	r1, r3
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	202c      	movs	r0, #44	; 0x2c
 800693c:	fb00 f303 	mul.w	r3, r0, r3
 8006940:	4413      	add	r3, r2
 8006942:	3360      	adds	r3, #96	; 0x60
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f00d fad1 	bl	8013ef0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800694e:	bf00      	nop
 8006950:	3720      	adds	r7, #32
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b08a      	sub	sp, #40	; 0x28
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	f003 030f 	and.w	r3, r3, #15
 8006976:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	0c5b      	lsrs	r3, r3, #17
 800697c:	f003 030f 	and.w	r3, r3, #15
 8006980:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	091b      	lsrs	r3, r3, #4
 8006986:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800698a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	2b02      	cmp	r3, #2
 8006990:	d004      	beq.n	800699c <HCD_RXQLVL_IRQHandler+0x46>
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2b05      	cmp	r3, #5
 8006996:	f000 80a9 	beq.w	8006aec <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800699a:	e0aa      	b.n	8006af2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 80a6 	beq.w	8006af0 <HCD_RXQLVL_IRQHandler+0x19a>
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	212c      	movs	r1, #44	; 0x2c
 80069aa:	fb01 f303 	mul.w	r3, r1, r3
 80069ae:	4413      	add	r3, r2
 80069b0:	3344      	adds	r3, #68	; 0x44
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 809b 	beq.w	8006af0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	212c      	movs	r1, #44	; 0x2c
 80069c0:	fb01 f303 	mul.w	r3, r1, r3
 80069c4:	4413      	add	r3, r2
 80069c6:	3350      	adds	r3, #80	; 0x50
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	441a      	add	r2, r3
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	202c      	movs	r0, #44	; 0x2c
 80069d4:	fb00 f303 	mul.w	r3, r0, r3
 80069d8:	440b      	add	r3, r1
 80069da:	334c      	adds	r3, #76	; 0x4c
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d87a      	bhi.n	8006ad8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6818      	ldr	r0, [r3, #0]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	212c      	movs	r1, #44	; 0x2c
 80069ec:	fb01 f303 	mul.w	r3, r1, r3
 80069f0:	4413      	add	r3, r2
 80069f2:	3344      	adds	r3, #68	; 0x44
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	b292      	uxth	r2, r2
 80069fa:	4619      	mov	r1, r3
 80069fc:	f006 fdad 	bl	800d55a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	212c      	movs	r1, #44	; 0x2c
 8006a06:	fb01 f303 	mul.w	r3, r1, r3
 8006a0a:	4413      	add	r3, r2
 8006a0c:	3344      	adds	r3, #68	; 0x44
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	441a      	add	r2, r3
 8006a14:	6879      	ldr	r1, [r7, #4]
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	202c      	movs	r0, #44	; 0x2c
 8006a1a:	fb00 f303 	mul.w	r3, r0, r3
 8006a1e:	440b      	add	r3, r1
 8006a20:	3344      	adds	r3, #68	; 0x44
 8006a22:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	212c      	movs	r1, #44	; 0x2c
 8006a2a:	fb01 f303 	mul.w	r3, r1, r3
 8006a2e:	4413      	add	r3, r2
 8006a30:	3350      	adds	r3, #80	; 0x50
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	441a      	add	r2, r3
 8006a38:	6879      	ldr	r1, [r7, #4]
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	202c      	movs	r0, #44	; 0x2c
 8006a3e:	fb00 f303 	mul.w	r3, r0, r3
 8006a42:	440b      	add	r3, r1
 8006a44:	3350      	adds	r3, #80	; 0x50
 8006a46:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	0cdb      	lsrs	r3, r3, #19
 8006a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a5c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	212c      	movs	r1, #44	; 0x2c
 8006a64:	fb01 f303 	mul.w	r3, r1, r3
 8006a68:	4413      	add	r3, r2
 8006a6a:	3340      	adds	r3, #64	; 0x40
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d13c      	bne.n	8006af0 <HCD_RXQLVL_IRQHandler+0x19a>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d039      	beq.n	8006af0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a92:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a9a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	212c      	movs	r1, #44	; 0x2c
 8006ab4:	fb01 f303 	mul.w	r3, r1, r3
 8006ab8:	4413      	add	r3, r2
 8006aba:	3354      	adds	r3, #84	; 0x54
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	f083 0301 	eor.w	r3, r3, #1
 8006ac2:	b2d8      	uxtb	r0, r3
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	212c      	movs	r1, #44	; 0x2c
 8006aca:	fb01 f303 	mul.w	r3, r1, r3
 8006ace:	4413      	add	r3, r2
 8006ad0:	3354      	adds	r3, #84	; 0x54
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	701a      	strb	r2, [r3, #0]
      break;
 8006ad6:	e00b      	b.n	8006af0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	212c      	movs	r1, #44	; 0x2c
 8006ade:	fb01 f303 	mul.w	r3, r1, r3
 8006ae2:	4413      	add	r3, r2
 8006ae4:	3360      	adds	r3, #96	; 0x60
 8006ae6:	2204      	movs	r2, #4
 8006ae8:	701a      	strb	r2, [r3, #0]
      break;
 8006aea:	e001      	b.n	8006af0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006aec:	bf00      	nop
 8006aee:	e000      	b.n	8006af2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006af0:	bf00      	nop
  }
}
 8006af2:	bf00      	nop
 8006af4:	3728      	adds	r7, #40	; 0x28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b086      	sub	sp, #24
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006b26:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d10b      	bne.n	8006b4a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d102      	bne.n	8006b42 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f00d f9bb 	bl	8013eb8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	f043 0302 	orr.w	r3, r3, #2
 8006b48:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f003 0308 	and.w	r3, r3, #8
 8006b50:	2b08      	cmp	r3, #8
 8006b52:	d132      	bne.n	8006bba <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f043 0308 	orr.w	r3, r3, #8
 8006b5a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f003 0304 	and.w	r3, r3, #4
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	d126      	bne.n	8006bb4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d113      	bne.n	8006b96 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006b74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b78:	d106      	bne.n	8006b88 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2102      	movs	r1, #2
 8006b80:	4618      	mov	r0, r3
 8006b82:	f006 fe19 	bl	800d7b8 <USB_InitFSLSPClkSel>
 8006b86:	e011      	b.n	8006bac <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f006 fe12 	bl	800d7b8 <USB_InitFSLSPClkSel>
 8006b94:	e00a      	b.n	8006bac <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d106      	bne.n	8006bac <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006baa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f00d f9b1 	bl	8013f14 <HAL_HCD_PortEnabled_Callback>
 8006bb2:	e002      	b.n	8006bba <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f00d f9bb 	bl	8013f30 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f003 0320 	and.w	r3, r3, #32
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d103      	bne.n	8006bcc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f043 0320 	orr.w	r3, r3, #32
 8006bca:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	6013      	str	r3, [r2, #0]
}
 8006bd8:	bf00      	nop
 8006bda:	3718      	adds	r7, #24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e07f      	b.n	8006cf2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d106      	bne.n	8006c0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7fb fa64 	bl	80020d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2224      	movs	r2, #36	; 0x24
 8006c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 0201 	bic.w	r2, r2, #1
 8006c22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d107      	bne.n	8006c5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	689a      	ldr	r2, [r3, #8]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c56:	609a      	str	r2, [r3, #8]
 8006c58:	e006      	b.n	8006c68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689a      	ldr	r2, [r3, #8]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006c66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d104      	bne.n	8006c7a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6859      	ldr	r1, [r3, #4]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	4b1d      	ldr	r3, [pc, #116]	; (8006cfc <HAL_I2C_Init+0x11c>)
 8006c86:	430b      	orrs	r3, r1
 8006c88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68da      	ldr	r2, [r3, #12]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691a      	ldr	r2, [r3, #16]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	ea42 0103 	orr.w	r1, r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	021a      	lsls	r2, r3, #8
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	69d9      	ldr	r1, [r3, #28]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a1a      	ldr	r2, [r3, #32]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0201 	orr.w	r2, r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	02008000 	.word	0x02008000

08006d00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b20      	cmp	r3, #32
 8006d14:	d138      	bne.n	8006d88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d101      	bne.n	8006d24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d20:	2302      	movs	r3, #2
 8006d22:	e032      	b.n	8006d8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2224      	movs	r2, #36	; 0x24
 8006d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 0201 	bic.w	r2, r2, #1
 8006d42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6819      	ldr	r1, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	430a      	orrs	r2, r1
 8006d62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0201 	orr.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2220      	movs	r2, #32
 8006d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d84:	2300      	movs	r3, #0
 8006d86:	e000      	b.n	8006d8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d88:	2302      	movs	r3, #2
  }
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b085      	sub	sp, #20
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b20      	cmp	r3, #32
 8006daa:	d139      	bne.n	8006e20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d101      	bne.n	8006dba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006db6:	2302      	movs	r3, #2
 8006db8:	e033      	b.n	8006e22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2224      	movs	r2, #36	; 0x24
 8006dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0201 	bic.w	r2, r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006de8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0201 	orr.w	r2, r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	e000      	b.n	8006e22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e20:	2302      	movs	r3, #2
  }
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
	...

08006e30 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e0bf      	b.n	8006fc2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d106      	bne.n	8006e5c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7fb f9b4 	bl	80021c4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	699a      	ldr	r2, [r3, #24]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006e72:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6999      	ldr	r1, [r3, #24]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006e88:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	430a      	orrs	r2, r1
 8006e96:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6899      	ldr	r1, [r3, #8]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	4b4a      	ldr	r3, [pc, #296]	; (8006fcc <HAL_LTDC_Init+0x19c>)
 8006ea4:	400b      	ands	r3, r1
 8006ea6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	041b      	lsls	r3, r3, #16
 8006eae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6899      	ldr	r1, [r3, #8]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699a      	ldr	r2, [r3, #24]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68d9      	ldr	r1, [r3, #12]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	4b3e      	ldr	r3, [pc, #248]	; (8006fcc <HAL_LTDC_Init+0x19c>)
 8006ed2:	400b      	ands	r3, r1
 8006ed4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	041b      	lsls	r3, r3, #16
 8006edc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68d9      	ldr	r1, [r3, #12]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a1a      	ldr	r2, [r3, #32]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	431a      	orrs	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6919      	ldr	r1, [r3, #16]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	4b33      	ldr	r3, [pc, #204]	; (8006fcc <HAL_LTDC_Init+0x19c>)
 8006f00:	400b      	ands	r3, r1
 8006f02:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f08:	041b      	lsls	r3, r3, #16
 8006f0a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6919      	ldr	r1, [r3, #16]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6959      	ldr	r1, [r3, #20]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	4b27      	ldr	r3, [pc, #156]	; (8006fcc <HAL_LTDC_Init+0x19c>)
 8006f2e:	400b      	ands	r3, r1
 8006f30:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f36:	041b      	lsls	r3, r3, #16
 8006f38:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6959      	ldr	r1, [r3, #20]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	431a      	orrs	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f56:	021b      	lsls	r3, r3, #8
 8006f58:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006f60:	041b      	lsls	r3, r3, #16
 8006f62:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006f72:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006f86:	431a      	orrs	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0206 	orr.w	r2, r2, #6
 8006f9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	699a      	ldr	r2, [r3, #24]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f042 0201 	orr.w	r2, r2, #1
 8006fae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	f000f800 	.word	0xf000f800

08006fd0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fde:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f003 0304 	and.w	r3, r3, #4
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d023      	beq.n	800703a <HAL_LTDC_IRQHandler+0x6a>
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	f003 0304 	and.w	r3, r3, #4
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d01e      	beq.n	800703a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0204 	bic.w	r2, r2, #4
 800700a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2204      	movs	r2, #4
 8007012:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800701a:	f043 0201 	orr.w	r2, r3, #1
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2204      	movs	r2, #4
 8007028:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f86f 	bl	8007118 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b00      	cmp	r3, #0
 8007042:	d023      	beq.n	800708c <HAL_LTDC_IRQHandler+0xbc>
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d01e      	beq.n	800708c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0202 	bic.w	r2, r2, #2
 800705c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2202      	movs	r2, #2
 8007064:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800706c:	f043 0202 	orr.w	r2, r3, #2
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2204      	movs	r2, #4
 800707a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f846 	bl	8007118 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d01b      	beq.n	80070ce <HAL_LTDC_IRQHandler+0xfe>
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b00      	cmp	r3, #0
 800709e:	d016      	beq.n	80070ce <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 0201 	bic.w	r2, r2, #1
 80070ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2201      	movs	r2, #1
 80070b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f82f 	bl	800712c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f003 0308 	and.w	r3, r3, #8
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d01b      	beq.n	8007110 <HAL_LTDC_IRQHandler+0x140>
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f003 0308 	and.w	r3, r3, #8
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d016      	beq.n	8007110 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f022 0208 	bic.w	r2, r2, #8
 80070f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2208      	movs	r2, #8
 80070f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f818 	bl	8007140 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007110:	bf00      	nop
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007154:	b5b0      	push	{r4, r5, r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007166:	2b01      	cmp	r3, #1
 8007168:	d101      	bne.n	800716e <HAL_LTDC_ConfigLayer+0x1a>
 800716a:	2302      	movs	r3, #2
 800716c:	e02c      	b.n	80071c8 <HAL_LTDC_ConfigLayer+0x74>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2202      	movs	r2, #2
 800717a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2134      	movs	r1, #52	; 0x34
 8007184:	fb01 f303 	mul.w	r3, r1, r3
 8007188:	4413      	add	r3, r2
 800718a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	4614      	mov	r4, r2
 8007192:	461d      	mov	r5, r3
 8007194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800719a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800719c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800719e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071a0:	682b      	ldr	r3, [r5, #0]
 80071a2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	68b9      	ldr	r1, [r7, #8]
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f000 f81f 	bl	80071ec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2201      	movs	r2, #1
 80071b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bdb0      	pop	{r4, r5, r7, pc}

080071d0 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80071de:	b2db      	uxtb	r3, r3
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b089      	sub	sp, #36	; 0x24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	0c1b      	lsrs	r3, r3, #16
 8007204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007208:	4413      	add	r3, r2
 800720a:	041b      	lsls	r3, r3, #16
 800720c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	01db      	lsls	r3, r3, #7
 8007218:	4413      	add	r3, r2
 800721a:	3384      	adds	r3, #132	; 0x84
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	6812      	ldr	r2, [r2, #0]
 8007222:	4611      	mov	r1, r2
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	01d2      	lsls	r2, r2, #7
 8007228:	440a      	add	r2, r1
 800722a:	3284      	adds	r2, #132	; 0x84
 800722c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007230:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	0c1b      	lsrs	r3, r3, #16
 800723e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007242:	4413      	add	r3, r2
 8007244:	1c5a      	adds	r2, r3, #1
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4619      	mov	r1, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	01db      	lsls	r3, r3, #7
 8007250:	440b      	add	r3, r1
 8007252:	3384      	adds	r3, #132	; 0x84
 8007254:	4619      	mov	r1, r3
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	4313      	orrs	r3, r2
 800725a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	68da      	ldr	r2, [r3, #12]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800726a:	4413      	add	r3, r2
 800726c:	041b      	lsls	r3, r3, #16
 800726e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	461a      	mov	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	01db      	lsls	r3, r3, #7
 800727a:	4413      	add	r3, r2
 800727c:	3384      	adds	r3, #132	; 0x84
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	6812      	ldr	r2, [r2, #0]
 8007284:	4611      	mov	r1, r2
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	01d2      	lsls	r2, r2, #7
 800728a:	440a      	add	r2, r1
 800728c:	3284      	adds	r2, #132	; 0x84
 800728e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007292:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	689a      	ldr	r2, [r3, #8]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072a2:	4413      	add	r3, r2
 80072a4:	1c5a      	adds	r2, r3, #1
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4619      	mov	r1, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	01db      	lsls	r3, r3, #7
 80072b0:	440b      	add	r3, r1
 80072b2:	3384      	adds	r3, #132	; 0x84
 80072b4:	4619      	mov	r1, r3
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	461a      	mov	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	01db      	lsls	r3, r3, #7
 80072c6:	4413      	add	r3, r2
 80072c8:	3384      	adds	r3, #132	; 0x84
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	6812      	ldr	r2, [r2, #0]
 80072d0:	4611      	mov	r1, r2
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	01d2      	lsls	r2, r2, #7
 80072d6:	440a      	add	r2, r1
 80072d8:	3284      	adds	r2, #132	; 0x84
 80072da:	f023 0307 	bic.w	r3, r3, #7
 80072de:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	461a      	mov	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	01db      	lsls	r3, r3, #7
 80072ea:	4413      	add	r3, r2
 80072ec:	3384      	adds	r3, #132	; 0x84
 80072ee:	461a      	mov	r2, r3
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80072fc:	021b      	lsls	r3, r3, #8
 80072fe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007306:	041b      	lsls	r3, r3, #16
 8007308:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	061b      	lsls	r3, r3, #24
 8007310:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	01db      	lsls	r3, r3, #7
 800731c:	4413      	add	r3, r2
 800731e:	3384      	adds	r3, #132	; 0x84
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	461a      	mov	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	01db      	lsls	r3, r3, #7
 800732c:	4413      	add	r3, r2
 800732e:	3384      	adds	r3, #132	; 0x84
 8007330:	461a      	mov	r2, r3
 8007332:	2300      	movs	r3, #0
 8007334:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800733c:	461a      	mov	r2, r3
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	431a      	orrs	r2, r3
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	431a      	orrs	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4619      	mov	r1, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	01db      	lsls	r3, r3, #7
 8007350:	440b      	add	r3, r1
 8007352:	3384      	adds	r3, #132	; 0x84
 8007354:	4619      	mov	r1, r3
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	4313      	orrs	r3, r2
 800735a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	461a      	mov	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	01db      	lsls	r3, r3, #7
 8007366:	4413      	add	r3, r2
 8007368:	3384      	adds	r3, #132	; 0x84
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	6812      	ldr	r2, [r2, #0]
 8007370:	4611      	mov	r1, r2
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	01d2      	lsls	r2, r2, #7
 8007376:	440a      	add	r2, r1
 8007378:	3284      	adds	r2, #132	; 0x84
 800737a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800737e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	461a      	mov	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	01db      	lsls	r3, r3, #7
 800738a:	4413      	add	r3, r2
 800738c:	3384      	adds	r3, #132	; 0x84
 800738e:	461a      	mov	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	01db      	lsls	r3, r3, #7
 80073a0:	4413      	add	r3, r2
 80073a2:	3384      	adds	r3, #132	; 0x84
 80073a4:	69da      	ldr	r2, [r3, #28]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4619      	mov	r1, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	01db      	lsls	r3, r3, #7
 80073b0:	440b      	add	r3, r1
 80073b2:	3384      	adds	r3, #132	; 0x84
 80073b4:	4619      	mov	r1, r3
 80073b6:	4b58      	ldr	r3, [pc, #352]	; (8007518 <LTDC_SetConfig+0x32c>)
 80073b8:	4013      	ands	r3, r2
 80073ba:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	69da      	ldr	r2, [r3, #28]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	6a1b      	ldr	r3, [r3, #32]
 80073c4:	68f9      	ldr	r1, [r7, #12]
 80073c6:	6809      	ldr	r1, [r1, #0]
 80073c8:	4608      	mov	r0, r1
 80073ca:	6879      	ldr	r1, [r7, #4]
 80073cc:	01c9      	lsls	r1, r1, #7
 80073ce:	4401      	add	r1, r0
 80073d0:	3184      	adds	r1, #132	; 0x84
 80073d2:	4313      	orrs	r3, r2
 80073d4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	01db      	lsls	r3, r3, #7
 80073e0:	4413      	add	r3, r2
 80073e2:	3384      	adds	r3, #132	; 0x84
 80073e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	461a      	mov	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	01db      	lsls	r3, r3, #7
 80073f0:	4413      	add	r3, r2
 80073f2:	3384      	adds	r3, #132	; 0x84
 80073f4:	461a      	mov	r2, r3
 80073f6:	2300      	movs	r3, #0
 80073f8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	01db      	lsls	r3, r3, #7
 8007404:	4413      	add	r3, r2
 8007406:	3384      	adds	r3, #132	; 0x84
 8007408:	461a      	mov	r2, r3
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d102      	bne.n	800741e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007418:	2304      	movs	r3, #4
 800741a:	61fb      	str	r3, [r7, #28]
 800741c:	e01b      	b.n	8007456 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d102      	bne.n	800742c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007426:	2303      	movs	r3, #3
 8007428:	61fb      	str	r3, [r7, #28]
 800742a:	e014      	b.n	8007456 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	2b04      	cmp	r3, #4
 8007432:	d00b      	beq.n	800744c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007438:	2b02      	cmp	r3, #2
 800743a:	d007      	beq.n	800744c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007440:	2b03      	cmp	r3, #3
 8007442:	d003      	beq.n	800744c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007448:	2b07      	cmp	r3, #7
 800744a:	d102      	bne.n	8007452 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800744c:	2302      	movs	r3, #2
 800744e:	61fb      	str	r3, [r7, #28]
 8007450:	e001      	b.n	8007456 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007452:	2301      	movs	r3, #1
 8007454:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	01db      	lsls	r3, r3, #7
 8007460:	4413      	add	r3, r2
 8007462:	3384      	adds	r3, #132	; 0x84
 8007464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	6812      	ldr	r2, [r2, #0]
 800746a:	4611      	mov	r1, r2
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	01d2      	lsls	r2, r2, #7
 8007470:	440a      	add	r2, r1
 8007472:	3284      	adds	r2, #132	; 0x84
 8007474:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007478:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747e:	69fa      	ldr	r2, [r7, #28]
 8007480:	fb02 f303 	mul.w	r3, r2, r3
 8007484:	041a      	lsls	r2, r3, #16
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	6859      	ldr	r1, [r3, #4]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	1acb      	subs	r3, r1, r3
 8007490:	69f9      	ldr	r1, [r7, #28]
 8007492:	fb01 f303 	mul.w	r3, r1, r3
 8007496:	3303      	adds	r3, #3
 8007498:	68f9      	ldr	r1, [r7, #12]
 800749a:	6809      	ldr	r1, [r1, #0]
 800749c:	4608      	mov	r0, r1
 800749e:	6879      	ldr	r1, [r7, #4]
 80074a0:	01c9      	lsls	r1, r1, #7
 80074a2:	4401      	add	r1, r0
 80074a4:	3184      	adds	r1, #132	; 0x84
 80074a6:	4313      	orrs	r3, r2
 80074a8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	01db      	lsls	r3, r3, #7
 80074b4:	4413      	add	r3, r2
 80074b6:	3384      	adds	r3, #132	; 0x84
 80074b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4619      	mov	r1, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	01db      	lsls	r3, r3, #7
 80074c4:	440b      	add	r3, r1
 80074c6:	3384      	adds	r3, #132	; 0x84
 80074c8:	4619      	mov	r1, r3
 80074ca:	4b14      	ldr	r3, [pc, #80]	; (800751c <LTDC_SetConfig+0x330>)
 80074cc:	4013      	ands	r3, r2
 80074ce:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	461a      	mov	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	01db      	lsls	r3, r3, #7
 80074da:	4413      	add	r3, r2
 80074dc:	3384      	adds	r3, #132	; 0x84
 80074de:	461a      	mov	r2, r3
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	461a      	mov	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	01db      	lsls	r3, r3, #7
 80074f0:	4413      	add	r3, r2
 80074f2:	3384      	adds	r3, #132	; 0x84
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	6812      	ldr	r2, [r2, #0]
 80074fa:	4611      	mov	r1, r2
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	01d2      	lsls	r2, r2, #7
 8007500:	440a      	add	r2, r1
 8007502:	3284      	adds	r2, #132	; 0x84
 8007504:	f043 0301 	orr.w	r3, r3, #1
 8007508:	6013      	str	r3, [r2, #0]
}
 800750a:	bf00      	nop
 800750c:	3724      	adds	r7, #36	; 0x24
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	fffff8f8 	.word	0xfffff8f8
 800751c:	fffff800 	.word	0xfffff800

08007520 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007520:	b480      	push	{r7}
 8007522:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007524:	4b05      	ldr	r3, [pc, #20]	; (800753c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a04      	ldr	r2, [pc, #16]	; (800753c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800752a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800752e:	6013      	str	r3, [r2, #0]
}
 8007530:	bf00      	nop
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	40007000 	.word	0x40007000

08007540 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007546:	2300      	movs	r3, #0
 8007548:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800754a:	4b23      	ldr	r3, [pc, #140]	; (80075d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	4a22      	ldr	r2, [pc, #136]	; (80075d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007554:	6413      	str	r3, [r2, #64]	; 0x40
 8007556:	4b20      	ldr	r3, [pc, #128]	; (80075d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007562:	4b1e      	ldr	r3, [pc, #120]	; (80075dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a1d      	ldr	r2, [pc, #116]	; (80075dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8007568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800756c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800756e:	f7fb fc85 	bl	8002e7c <HAL_GetTick>
 8007572:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007574:	e009      	b.n	800758a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007576:	f7fb fc81 	bl	8002e7c <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007584:	d901      	bls.n	800758a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e022      	b.n	80075d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800758a:	4b14      	ldr	r3, [pc, #80]	; (80075dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007596:	d1ee      	bne.n	8007576 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007598:	4b10      	ldr	r3, [pc, #64]	; (80075dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a0f      	ldr	r2, [pc, #60]	; (80075dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800759e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075a4:	f7fb fc6a 	bl	8002e7c <HAL_GetTick>
 80075a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80075aa:	e009      	b.n	80075c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80075ac:	f7fb fc66 	bl	8002e7c <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075ba:	d901      	bls.n	80075c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e007      	b.n	80075d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80075c0:	4b06      	ldr	r3, [pc, #24]	; (80075dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075cc:	d1ee      	bne.n	80075ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	40023800 	.word	0x40023800
 80075dc:	40007000 	.word	0x40007000

080075e0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af02      	add	r7, sp, #8
 80075e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80075e8:	f7fb fc48 	bl	8002e7c <HAL_GetTick>
 80075ec:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e067      	b.n	80076c8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10b      	bne.n	800761c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7fa fea1 	bl	8002354 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007612:	f241 3188 	movw	r1, #5000	; 0x1388
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f85e 	bl	80076d8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	3b01      	subs	r3, #1
 800762c:	021a      	lsls	r2, r3, #8
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	2120      	movs	r1, #32
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f856 	bl	80076f4 <QSPI_WaitFlagStateUntilTimeout>
 8007648:	4603      	mov	r3, r0
 800764a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800764c:	7afb      	ldrb	r3, [r7, #11]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d135      	bne.n	80076be <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	4b1d      	ldr	r3, [pc, #116]	; (80076d0 <HAL_QSPI_Init+0xf0>)
 800765a:	4013      	ands	r3, r2
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	6852      	ldr	r2, [r2, #4]
 8007660:	0611      	lsls	r1, r2, #24
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	68d2      	ldr	r2, [r2, #12]
 8007666:	4311      	orrs	r1, r2
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	69d2      	ldr	r2, [r2, #28]
 800766c:	4311      	orrs	r1, r2
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	6a12      	ldr	r2, [r2, #32]
 8007672:	4311      	orrs	r1, r2
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	6812      	ldr	r2, [r2, #0]
 8007678:	430b      	orrs	r3, r1
 800767a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	685a      	ldr	r2, [r3, #4]
 8007682:	4b14      	ldr	r3, [pc, #80]	; (80076d4 <HAL_QSPI_Init+0xf4>)
 8007684:	4013      	ands	r3, r2
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	6912      	ldr	r2, [r2, #16]
 800768a:	0411      	lsls	r1, r2, #16
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	6952      	ldr	r2, [r2, #20]
 8007690:	4311      	orrs	r1, r2
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	6992      	ldr	r2, [r2, #24]
 8007696:	4311      	orrs	r1, r2
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	6812      	ldr	r2, [r2, #0]
 800769c:	430b      	orrs	r3, r1
 800769e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f042 0201 	orr.w	r2, r2, #1
 80076ae:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80076c6:	7afb      	ldrb	r3, [r7, #11]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	00ffff2f 	.word	0x00ffff2f
 80076d4:	ffe0f8fe 	.word	0xffe0f8fe

080076d8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	603b      	str	r3, [r7, #0]
 8007700:	4613      	mov	r3, r2
 8007702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007704:	e01a      	b.n	800773c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800770c:	d016      	beq.n	800773c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800770e:	f7fb fbb5 	bl	8002e7c <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	429a      	cmp	r2, r3
 800771c:	d302      	bcc.n	8007724 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10b      	bne.n	800773c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2204      	movs	r2, #4
 8007728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007730:	f043 0201 	orr.w	r2, r3, #1
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	e00e      	b.n	800775a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689a      	ldr	r2, [r3, #8]
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	4013      	ands	r3, r2
 8007746:	2b00      	cmp	r3, #0
 8007748:	bf14      	ite	ne
 800774a:	2301      	movne	r3, #1
 800774c:	2300      	moveq	r3, #0
 800774e:	b2db      	uxtb	r3, r3
 8007750:	461a      	mov	r2, r3
 8007752:	79fb      	ldrb	r3, [r7, #7]
 8007754:	429a      	cmp	r2, r3
 8007756:	d1d6      	bne.n	8007706 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800776c:	2300      	movs	r3, #0
 800776e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e291      	b.n	8007c9e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	f000 8087 	beq.w	8007896 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007788:	4b96      	ldr	r3, [pc, #600]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f003 030c 	and.w	r3, r3, #12
 8007790:	2b04      	cmp	r3, #4
 8007792:	d00c      	beq.n	80077ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007794:	4b93      	ldr	r3, [pc, #588]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	f003 030c 	and.w	r3, r3, #12
 800779c:	2b08      	cmp	r3, #8
 800779e:	d112      	bne.n	80077c6 <HAL_RCC_OscConfig+0x62>
 80077a0:	4b90      	ldr	r3, [pc, #576]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077ac:	d10b      	bne.n	80077c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077ae:	4b8d      	ldr	r3, [pc, #564]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d06c      	beq.n	8007894 <HAL_RCC_OscConfig+0x130>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d168      	bne.n	8007894 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e26b      	b.n	8007c9e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077ce:	d106      	bne.n	80077de <HAL_RCC_OscConfig+0x7a>
 80077d0:	4b84      	ldr	r3, [pc, #528]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a83      	ldr	r2, [pc, #524]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 80077d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077da:	6013      	str	r3, [r2, #0]
 80077dc:	e02e      	b.n	800783c <HAL_RCC_OscConfig+0xd8>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10c      	bne.n	8007800 <HAL_RCC_OscConfig+0x9c>
 80077e6:	4b7f      	ldr	r3, [pc, #508]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a7e      	ldr	r2, [pc, #504]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 80077ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	4b7c      	ldr	r3, [pc, #496]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a7b      	ldr	r2, [pc, #492]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 80077f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	e01d      	b.n	800783c <HAL_RCC_OscConfig+0xd8>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007808:	d10c      	bne.n	8007824 <HAL_RCC_OscConfig+0xc0>
 800780a:	4b76      	ldr	r3, [pc, #472]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a75      	ldr	r2, [pc, #468]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 8007810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007814:	6013      	str	r3, [r2, #0]
 8007816:	4b73      	ldr	r3, [pc, #460]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a72      	ldr	r2, [pc, #456]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 800781c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	e00b      	b.n	800783c <HAL_RCC_OscConfig+0xd8>
 8007824:	4b6f      	ldr	r3, [pc, #444]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a6e      	ldr	r2, [pc, #440]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 800782a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	4b6c      	ldr	r3, [pc, #432]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a6b      	ldr	r2, [pc, #428]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 8007836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800783a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d013      	beq.n	800786c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007844:	f7fb fb1a 	bl	8002e7c <HAL_GetTick>
 8007848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800784a:	e008      	b.n	800785e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800784c:	f7fb fb16 	bl	8002e7c <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b64      	cmp	r3, #100	; 0x64
 8007858:	d901      	bls.n	800785e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e21f      	b.n	8007c9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800785e:	4b61      	ldr	r3, [pc, #388]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d0f0      	beq.n	800784c <HAL_RCC_OscConfig+0xe8>
 800786a:	e014      	b.n	8007896 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800786c:	f7fb fb06 	bl	8002e7c <HAL_GetTick>
 8007870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007872:	e008      	b.n	8007886 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007874:	f7fb fb02 	bl	8002e7c <HAL_GetTick>
 8007878:	4602      	mov	r2, r0
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	2b64      	cmp	r3, #100	; 0x64
 8007880:	d901      	bls.n	8007886 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e20b      	b.n	8007c9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007886:	4b57      	ldr	r3, [pc, #348]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1f0      	bne.n	8007874 <HAL_RCC_OscConfig+0x110>
 8007892:	e000      	b.n	8007896 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0302 	and.w	r3, r3, #2
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d069      	beq.n	8007976 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80078a2:	4b50      	ldr	r3, [pc, #320]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f003 030c 	and.w	r3, r3, #12
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00b      	beq.n	80078c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078ae:	4b4d      	ldr	r3, [pc, #308]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f003 030c 	and.w	r3, r3, #12
 80078b6:	2b08      	cmp	r3, #8
 80078b8:	d11c      	bne.n	80078f4 <HAL_RCC_OscConfig+0x190>
 80078ba:	4b4a      	ldr	r3, [pc, #296]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d116      	bne.n	80078f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078c6:	4b47      	ldr	r3, [pc, #284]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0302 	and.w	r3, r3, #2
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d005      	beq.n	80078de <HAL_RCC_OscConfig+0x17a>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d001      	beq.n	80078de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e1df      	b.n	8007c9e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078de:	4b41      	ldr	r3, [pc, #260]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	00db      	lsls	r3, r3, #3
 80078ec:	493d      	ldr	r1, [pc, #244]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078f2:	e040      	b.n	8007976 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d023      	beq.n	8007944 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078fc:	4b39      	ldr	r3, [pc, #228]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a38      	ldr	r2, [pc, #224]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 8007902:	f043 0301 	orr.w	r3, r3, #1
 8007906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007908:	f7fb fab8 	bl	8002e7c <HAL_GetTick>
 800790c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800790e:	e008      	b.n	8007922 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007910:	f7fb fab4 	bl	8002e7c <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b02      	cmp	r3, #2
 800791c:	d901      	bls.n	8007922 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e1bd      	b.n	8007c9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007922:	4b30      	ldr	r3, [pc, #192]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0302 	and.w	r3, r3, #2
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0f0      	beq.n	8007910 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800792e:	4b2d      	ldr	r3, [pc, #180]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	00db      	lsls	r3, r3, #3
 800793c:	4929      	ldr	r1, [pc, #164]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 800793e:	4313      	orrs	r3, r2
 8007940:	600b      	str	r3, [r1, #0]
 8007942:	e018      	b.n	8007976 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007944:	4b27      	ldr	r3, [pc, #156]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a26      	ldr	r2, [pc, #152]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 800794a:	f023 0301 	bic.w	r3, r3, #1
 800794e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007950:	f7fb fa94 	bl	8002e7c <HAL_GetTick>
 8007954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007956:	e008      	b.n	800796a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007958:	f7fb fa90 	bl	8002e7c <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	2b02      	cmp	r3, #2
 8007964:	d901      	bls.n	800796a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e199      	b.n	8007c9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800796a:	4b1e      	ldr	r3, [pc, #120]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1f0      	bne.n	8007958 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0308 	and.w	r3, r3, #8
 800797e:	2b00      	cmp	r3, #0
 8007980:	d038      	beq.n	80079f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d019      	beq.n	80079be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800798a:	4b16      	ldr	r3, [pc, #88]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 800798c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800798e:	4a15      	ldr	r2, [pc, #84]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 8007990:	f043 0301 	orr.w	r3, r3, #1
 8007994:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007996:	f7fb fa71 	bl	8002e7c <HAL_GetTick>
 800799a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800799c:	e008      	b.n	80079b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800799e:	f7fb fa6d 	bl	8002e7c <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d901      	bls.n	80079b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e176      	b.n	8007c9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079b0:	4b0c      	ldr	r3, [pc, #48]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 80079b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0f0      	beq.n	800799e <HAL_RCC_OscConfig+0x23a>
 80079bc:	e01a      	b.n	80079f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079be:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 80079c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079c2:	4a08      	ldr	r2, [pc, #32]	; (80079e4 <HAL_RCC_OscConfig+0x280>)
 80079c4:	f023 0301 	bic.w	r3, r3, #1
 80079c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079ca:	f7fb fa57 	bl	8002e7c <HAL_GetTick>
 80079ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079d0:	e00a      	b.n	80079e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079d2:	f7fb fa53 	bl	8002e7c <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d903      	bls.n	80079e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e15c      	b.n	8007c9e <HAL_RCC_OscConfig+0x53a>
 80079e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079e8:	4b91      	ldr	r3, [pc, #580]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 80079ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1ee      	bne.n	80079d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0304 	and.w	r3, r3, #4
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 80a4 	beq.w	8007b4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a02:	4b8b      	ldr	r3, [pc, #556]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10d      	bne.n	8007a2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a0e:	4b88      	ldr	r3, [pc, #544]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a12:	4a87      	ldr	r2, [pc, #540]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a18:	6413      	str	r3, [r2, #64]	; 0x40
 8007a1a:	4b85      	ldr	r3, [pc, #532]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a22:	60bb      	str	r3, [r7, #8]
 8007a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a26:	2301      	movs	r3, #1
 8007a28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a2a:	4b82      	ldr	r3, [pc, #520]	; (8007c34 <HAL_RCC_OscConfig+0x4d0>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d118      	bne.n	8007a68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007a36:	4b7f      	ldr	r3, [pc, #508]	; (8007c34 <HAL_RCC_OscConfig+0x4d0>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a7e      	ldr	r2, [pc, #504]	; (8007c34 <HAL_RCC_OscConfig+0x4d0>)
 8007a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a42:	f7fb fa1b 	bl	8002e7c <HAL_GetTick>
 8007a46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a48:	e008      	b.n	8007a5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a4a:	f7fb fa17 	bl	8002e7c <HAL_GetTick>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	2b64      	cmp	r3, #100	; 0x64
 8007a56:	d901      	bls.n	8007a5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e120      	b.n	8007c9e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a5c:	4b75      	ldr	r3, [pc, #468]	; (8007c34 <HAL_RCC_OscConfig+0x4d0>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0f0      	beq.n	8007a4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d106      	bne.n	8007a7e <HAL_RCC_OscConfig+0x31a>
 8007a70:	4b6f      	ldr	r3, [pc, #444]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a74:	4a6e      	ldr	r2, [pc, #440]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007a76:	f043 0301 	orr.w	r3, r3, #1
 8007a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8007a7c:	e02d      	b.n	8007ada <HAL_RCC_OscConfig+0x376>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10c      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x33c>
 8007a86:	4b6a      	ldr	r3, [pc, #424]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8a:	4a69      	ldr	r2, [pc, #420]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007a8c:	f023 0301 	bic.w	r3, r3, #1
 8007a90:	6713      	str	r3, [r2, #112]	; 0x70
 8007a92:	4b67      	ldr	r3, [pc, #412]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a96:	4a66      	ldr	r2, [pc, #408]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007a98:	f023 0304 	bic.w	r3, r3, #4
 8007a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a9e:	e01c      	b.n	8007ada <HAL_RCC_OscConfig+0x376>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	2b05      	cmp	r3, #5
 8007aa6:	d10c      	bne.n	8007ac2 <HAL_RCC_OscConfig+0x35e>
 8007aa8:	4b61      	ldr	r3, [pc, #388]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aac:	4a60      	ldr	r2, [pc, #384]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007aae:	f043 0304 	orr.w	r3, r3, #4
 8007ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ab4:	4b5e      	ldr	r3, [pc, #376]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab8:	4a5d      	ldr	r2, [pc, #372]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007aba:	f043 0301 	orr.w	r3, r3, #1
 8007abe:	6713      	str	r3, [r2, #112]	; 0x70
 8007ac0:	e00b      	b.n	8007ada <HAL_RCC_OscConfig+0x376>
 8007ac2:	4b5b      	ldr	r3, [pc, #364]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac6:	4a5a      	ldr	r2, [pc, #360]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007ac8:	f023 0301 	bic.w	r3, r3, #1
 8007acc:	6713      	str	r3, [r2, #112]	; 0x70
 8007ace:	4b58      	ldr	r3, [pc, #352]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad2:	4a57      	ldr	r2, [pc, #348]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007ad4:	f023 0304 	bic.w	r3, r3, #4
 8007ad8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d015      	beq.n	8007b0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ae2:	f7fb f9cb 	bl	8002e7c <HAL_GetTick>
 8007ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ae8:	e00a      	b.n	8007b00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aea:	f7fb f9c7 	bl	8002e7c <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d901      	bls.n	8007b00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e0ce      	b.n	8007c9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b00:	4b4b      	ldr	r3, [pc, #300]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d0ee      	beq.n	8007aea <HAL_RCC_OscConfig+0x386>
 8007b0c:	e014      	b.n	8007b38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b0e:	f7fb f9b5 	bl	8002e7c <HAL_GetTick>
 8007b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b14:	e00a      	b.n	8007b2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b16:	f7fb f9b1 	bl	8002e7c <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d901      	bls.n	8007b2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e0b8      	b.n	8007c9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b2c:	4b40      	ldr	r3, [pc, #256]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b30:	f003 0302 	and.w	r3, r3, #2
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1ee      	bne.n	8007b16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007b38:	7dfb      	ldrb	r3, [r7, #23]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d105      	bne.n	8007b4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b3e:	4b3c      	ldr	r3, [pc, #240]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b42:	4a3b      	ldr	r2, [pc, #236]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f000 80a4 	beq.w	8007c9c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b54:	4b36      	ldr	r3, [pc, #216]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f003 030c 	and.w	r3, r3, #12
 8007b5c:	2b08      	cmp	r3, #8
 8007b5e:	d06b      	beq.n	8007c38 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d149      	bne.n	8007bfc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b68:	4b31      	ldr	r3, [pc, #196]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a30      	ldr	r2, [pc, #192]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b74:	f7fb f982 	bl	8002e7c <HAL_GetTick>
 8007b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b7a:	e008      	b.n	8007b8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b7c:	f7fb f97e 	bl	8002e7c <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d901      	bls.n	8007b8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e087      	b.n	8007c9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b8e:	4b28      	ldr	r3, [pc, #160]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1f0      	bne.n	8007b7c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	69da      	ldr	r2, [r3, #28]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	431a      	orrs	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	019b      	lsls	r3, r3, #6
 8007baa:	431a      	orrs	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb0:	085b      	lsrs	r3, r3, #1
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	041b      	lsls	r3, r3, #16
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbc:	061b      	lsls	r3, r3, #24
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	4a1b      	ldr	r2, [pc, #108]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007bc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007bc6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bc8:	4b19      	ldr	r3, [pc, #100]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a18      	ldr	r2, [pc, #96]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd4:	f7fb f952 	bl	8002e7c <HAL_GetTick>
 8007bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bda:	e008      	b.n	8007bee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bdc:	f7fb f94e 	bl	8002e7c <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d901      	bls.n	8007bee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e057      	b.n	8007c9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bee:	4b10      	ldr	r3, [pc, #64]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d0f0      	beq.n	8007bdc <HAL_RCC_OscConfig+0x478>
 8007bfa:	e04f      	b.n	8007c9c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bfc:	4b0c      	ldr	r3, [pc, #48]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a0b      	ldr	r2, [pc, #44]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c08:	f7fb f938 	bl	8002e7c <HAL_GetTick>
 8007c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c0e:	e008      	b.n	8007c22 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c10:	f7fb f934 	bl	8002e7c <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d901      	bls.n	8007c22 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e03d      	b.n	8007c9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c22:	4b03      	ldr	r3, [pc, #12]	; (8007c30 <HAL_RCC_OscConfig+0x4cc>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1f0      	bne.n	8007c10 <HAL_RCC_OscConfig+0x4ac>
 8007c2e:	e035      	b.n	8007c9c <HAL_RCC_OscConfig+0x538>
 8007c30:	40023800 	.word	0x40023800
 8007c34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007c38:	4b1b      	ldr	r3, [pc, #108]	; (8007ca8 <HAL_RCC_OscConfig+0x544>)
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d028      	beq.n	8007c98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d121      	bne.n	8007c98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d11a      	bne.n	8007c98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c68:	4013      	ands	r3, r2
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d111      	bne.n	8007c98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7e:	085b      	lsrs	r3, r3, #1
 8007c80:	3b01      	subs	r3, #1
 8007c82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d107      	bne.n	8007c98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d001      	beq.n	8007c9c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e000      	b.n	8007c9e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3718      	adds	r7, #24
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	40023800 	.word	0x40023800

08007cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e0d0      	b.n	8007e66 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007cc4:	4b6a      	ldr	r3, [pc, #424]	; (8007e70 <HAL_RCC_ClockConfig+0x1c4>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 030f 	and.w	r3, r3, #15
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d910      	bls.n	8007cf4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cd2:	4b67      	ldr	r3, [pc, #412]	; (8007e70 <HAL_RCC_ClockConfig+0x1c4>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f023 020f 	bic.w	r2, r3, #15
 8007cda:	4965      	ldr	r1, [pc, #404]	; (8007e70 <HAL_RCC_ClockConfig+0x1c4>)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ce2:	4b63      	ldr	r3, [pc, #396]	; (8007e70 <HAL_RCC_ClockConfig+0x1c4>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 030f 	and.w	r3, r3, #15
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d001      	beq.n	8007cf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e0b8      	b.n	8007e66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0302 	and.w	r3, r3, #2
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d020      	beq.n	8007d42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0304 	and.w	r3, r3, #4
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d005      	beq.n	8007d18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d0c:	4b59      	ldr	r3, [pc, #356]	; (8007e74 <HAL_RCC_ClockConfig+0x1c8>)
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	4a58      	ldr	r2, [pc, #352]	; (8007e74 <HAL_RCC_ClockConfig+0x1c8>)
 8007d12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0308 	and.w	r3, r3, #8
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d005      	beq.n	8007d30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d24:	4b53      	ldr	r3, [pc, #332]	; (8007e74 <HAL_RCC_ClockConfig+0x1c8>)
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	4a52      	ldr	r2, [pc, #328]	; (8007e74 <HAL_RCC_ClockConfig+0x1c8>)
 8007d2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d30:	4b50      	ldr	r3, [pc, #320]	; (8007e74 <HAL_RCC_ClockConfig+0x1c8>)
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	494d      	ldr	r1, [pc, #308]	; (8007e74 <HAL_RCC_ClockConfig+0x1c8>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d040      	beq.n	8007dd0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d107      	bne.n	8007d66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d56:	4b47      	ldr	r3, [pc, #284]	; (8007e74 <HAL_RCC_ClockConfig+0x1c8>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d115      	bne.n	8007d8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e07f      	b.n	8007e66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d107      	bne.n	8007d7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d6e:	4b41      	ldr	r3, [pc, #260]	; (8007e74 <HAL_RCC_ClockConfig+0x1c8>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d109      	bne.n	8007d8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e073      	b.n	8007e66 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d7e:	4b3d      	ldr	r3, [pc, #244]	; (8007e74 <HAL_RCC_ClockConfig+0x1c8>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e06b      	b.n	8007e66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d8e:	4b39      	ldr	r3, [pc, #228]	; (8007e74 <HAL_RCC_ClockConfig+0x1c8>)
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f023 0203 	bic.w	r2, r3, #3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	4936      	ldr	r1, [pc, #216]	; (8007e74 <HAL_RCC_ClockConfig+0x1c8>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007da0:	f7fb f86c 	bl	8002e7c <HAL_GetTick>
 8007da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007da6:	e00a      	b.n	8007dbe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007da8:	f7fb f868 	bl	8002e7c <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d901      	bls.n	8007dbe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e053      	b.n	8007e66 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dbe:	4b2d      	ldr	r3, [pc, #180]	; (8007e74 <HAL_RCC_ClockConfig+0x1c8>)
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f003 020c 	and.w	r2, r3, #12
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d1eb      	bne.n	8007da8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007dd0:	4b27      	ldr	r3, [pc, #156]	; (8007e70 <HAL_RCC_ClockConfig+0x1c4>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 030f 	and.w	r3, r3, #15
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d210      	bcs.n	8007e00 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dde:	4b24      	ldr	r3, [pc, #144]	; (8007e70 <HAL_RCC_ClockConfig+0x1c4>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f023 020f 	bic.w	r2, r3, #15
 8007de6:	4922      	ldr	r1, [pc, #136]	; (8007e70 <HAL_RCC_ClockConfig+0x1c4>)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dee:	4b20      	ldr	r3, [pc, #128]	; (8007e70 <HAL_RCC_ClockConfig+0x1c4>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 030f 	and.w	r3, r3, #15
 8007df6:	683a      	ldr	r2, [r7, #0]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d001      	beq.n	8007e00 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e032      	b.n	8007e66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 0304 	and.w	r3, r3, #4
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d008      	beq.n	8007e1e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e0c:	4b19      	ldr	r3, [pc, #100]	; (8007e74 <HAL_RCC_ClockConfig+0x1c8>)
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	4916      	ldr	r1, [pc, #88]	; (8007e74 <HAL_RCC_ClockConfig+0x1c8>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0308 	and.w	r3, r3, #8
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d009      	beq.n	8007e3e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007e2a:	4b12      	ldr	r3, [pc, #72]	; (8007e74 <HAL_RCC_ClockConfig+0x1c8>)
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	00db      	lsls	r3, r3, #3
 8007e38:	490e      	ldr	r1, [pc, #56]	; (8007e74 <HAL_RCC_ClockConfig+0x1c8>)
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007e3e:	f000 f821 	bl	8007e84 <HAL_RCC_GetSysClockFreq>
 8007e42:	4602      	mov	r2, r0
 8007e44:	4b0b      	ldr	r3, [pc, #44]	; (8007e74 <HAL_RCC_ClockConfig+0x1c8>)
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	091b      	lsrs	r3, r3, #4
 8007e4a:	f003 030f 	and.w	r3, r3, #15
 8007e4e:	490a      	ldr	r1, [pc, #40]	; (8007e78 <HAL_RCC_ClockConfig+0x1cc>)
 8007e50:	5ccb      	ldrb	r3, [r1, r3]
 8007e52:	fa22 f303 	lsr.w	r3, r2, r3
 8007e56:	4a09      	ldr	r2, [pc, #36]	; (8007e7c <HAL_RCC_ClockConfig+0x1d0>)
 8007e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007e5a:	4b09      	ldr	r3, [pc, #36]	; (8007e80 <HAL_RCC_ClockConfig+0x1d4>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fa fed6 	bl	8002c10 <HAL_InitTick>

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	40023c00 	.word	0x40023c00
 8007e74:	40023800 	.word	0x40023800
 8007e78:	08014d48 	.word	0x08014d48
 8007e7c:	20000000 	.word	0x20000000
 8007e80:	20000004 	.word	0x20000004

08007e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e88:	b090      	sub	sp, #64	; 0x40
 8007e8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e90:	2300      	movs	r3, #0
 8007e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e94:	2300      	movs	r3, #0
 8007e96:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e9c:	4b59      	ldr	r3, [pc, #356]	; (8008004 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f003 030c 	and.w	r3, r3, #12
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	d00d      	beq.n	8007ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	f200 80a1 	bhi.w	8007ff0 <HAL_RCC_GetSysClockFreq+0x16c>
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8007eb2:	2b04      	cmp	r3, #4
 8007eb4:	d003      	beq.n	8007ebe <HAL_RCC_GetSysClockFreq+0x3a>
 8007eb6:	e09b      	b.n	8007ff0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007eb8:	4b53      	ldr	r3, [pc, #332]	; (8008008 <HAL_RCC_GetSysClockFreq+0x184>)
 8007eba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007ebc:	e09b      	b.n	8007ff6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ebe:	4b53      	ldr	r3, [pc, #332]	; (800800c <HAL_RCC_GetSysClockFreq+0x188>)
 8007ec0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007ec2:	e098      	b.n	8007ff6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ec4:	4b4f      	ldr	r3, [pc, #316]	; (8008004 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ecc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007ece:	4b4d      	ldr	r3, [pc, #308]	; (8008004 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d028      	beq.n	8007f2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eda:	4b4a      	ldr	r3, [pc, #296]	; (8008004 <HAL_RCC_GetSysClockFreq+0x180>)
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	099b      	lsrs	r3, r3, #6
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	623b      	str	r3, [r7, #32]
 8007ee4:	627a      	str	r2, [r7, #36]	; 0x24
 8007ee6:	6a3b      	ldr	r3, [r7, #32]
 8007ee8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007eec:	2100      	movs	r1, #0
 8007eee:	4b47      	ldr	r3, [pc, #284]	; (800800c <HAL_RCC_GetSysClockFreq+0x188>)
 8007ef0:	fb03 f201 	mul.w	r2, r3, r1
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	fb00 f303 	mul.w	r3, r0, r3
 8007efa:	4413      	add	r3, r2
 8007efc:	4a43      	ldr	r2, [pc, #268]	; (800800c <HAL_RCC_GetSysClockFreq+0x188>)
 8007efe:	fba0 1202 	umull	r1, r2, r0, r2
 8007f02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f04:	460a      	mov	r2, r1
 8007f06:	62ba      	str	r2, [r7, #40]	; 0x28
 8007f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f0a:	4413      	add	r3, r2
 8007f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f10:	2200      	movs	r2, #0
 8007f12:	61bb      	str	r3, [r7, #24]
 8007f14:	61fa      	str	r2, [r7, #28]
 8007f16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007f1e:	f7f8 f9c7 	bl	80002b0 <__aeabi_uldivmod>
 8007f22:	4602      	mov	r2, r0
 8007f24:	460b      	mov	r3, r1
 8007f26:	4613      	mov	r3, r2
 8007f28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f2a:	e053      	b.n	8007fd4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f2c:	4b35      	ldr	r3, [pc, #212]	; (8008004 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	099b      	lsrs	r3, r3, #6
 8007f32:	2200      	movs	r2, #0
 8007f34:	613b      	str	r3, [r7, #16]
 8007f36:	617a      	str	r2, [r7, #20]
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007f3e:	f04f 0b00 	mov.w	fp, #0
 8007f42:	4652      	mov	r2, sl
 8007f44:	465b      	mov	r3, fp
 8007f46:	f04f 0000 	mov.w	r0, #0
 8007f4a:	f04f 0100 	mov.w	r1, #0
 8007f4e:	0159      	lsls	r1, r3, #5
 8007f50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f54:	0150      	lsls	r0, r2, #5
 8007f56:	4602      	mov	r2, r0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	ebb2 080a 	subs.w	r8, r2, sl
 8007f5e:	eb63 090b 	sbc.w	r9, r3, fp
 8007f62:	f04f 0200 	mov.w	r2, #0
 8007f66:	f04f 0300 	mov.w	r3, #0
 8007f6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007f6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007f72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007f76:	ebb2 0408 	subs.w	r4, r2, r8
 8007f7a:	eb63 0509 	sbc.w	r5, r3, r9
 8007f7e:	f04f 0200 	mov.w	r2, #0
 8007f82:	f04f 0300 	mov.w	r3, #0
 8007f86:	00eb      	lsls	r3, r5, #3
 8007f88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f8c:	00e2      	lsls	r2, r4, #3
 8007f8e:	4614      	mov	r4, r2
 8007f90:	461d      	mov	r5, r3
 8007f92:	eb14 030a 	adds.w	r3, r4, sl
 8007f96:	603b      	str	r3, [r7, #0]
 8007f98:	eb45 030b 	adc.w	r3, r5, fp
 8007f9c:	607b      	str	r3, [r7, #4]
 8007f9e:	f04f 0200 	mov.w	r2, #0
 8007fa2:	f04f 0300 	mov.w	r3, #0
 8007fa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007faa:	4629      	mov	r1, r5
 8007fac:	028b      	lsls	r3, r1, #10
 8007fae:	4621      	mov	r1, r4
 8007fb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	028a      	lsls	r2, r1, #10
 8007fb8:	4610      	mov	r0, r2
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	60bb      	str	r3, [r7, #8]
 8007fc2:	60fa      	str	r2, [r7, #12]
 8007fc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fc8:	f7f8 f972 	bl	80002b0 <__aeabi_uldivmod>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007fd4:	4b0b      	ldr	r3, [pc, #44]	; (8008004 <HAL_RCC_GetSysClockFreq+0x180>)
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	0c1b      	lsrs	r3, r3, #16
 8007fda:	f003 0303 	and.w	r3, r3, #3
 8007fde:	3301      	adds	r3, #1
 8007fe0:	005b      	lsls	r3, r3, #1
 8007fe2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007fe4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007fee:	e002      	b.n	8007ff6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ff0:	4b05      	ldr	r3, [pc, #20]	; (8008008 <HAL_RCC_GetSysClockFreq+0x184>)
 8007ff2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3740      	adds	r7, #64	; 0x40
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008002:	bf00      	nop
 8008004:	40023800 	.word	0x40023800
 8008008:	00f42400 	.word	0x00f42400
 800800c:	017d7840 	.word	0x017d7840

08008010 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008010:	b480      	push	{r7}
 8008012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008014:	4b03      	ldr	r3, [pc, #12]	; (8008024 <HAL_RCC_GetHCLKFreq+0x14>)
 8008016:	681b      	ldr	r3, [r3, #0]
}
 8008018:	4618      	mov	r0, r3
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	20000000 	.word	0x20000000

08008028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800802c:	f7ff fff0 	bl	8008010 <HAL_RCC_GetHCLKFreq>
 8008030:	4602      	mov	r2, r0
 8008032:	4b05      	ldr	r3, [pc, #20]	; (8008048 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	0a9b      	lsrs	r3, r3, #10
 8008038:	f003 0307 	and.w	r3, r3, #7
 800803c:	4903      	ldr	r1, [pc, #12]	; (800804c <HAL_RCC_GetPCLK1Freq+0x24>)
 800803e:	5ccb      	ldrb	r3, [r1, r3]
 8008040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008044:	4618      	mov	r0, r3
 8008046:	bd80      	pop	{r7, pc}
 8008048:	40023800 	.word	0x40023800
 800804c:	08014d58 	.word	0x08014d58

08008050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008054:	f7ff ffdc 	bl	8008010 <HAL_RCC_GetHCLKFreq>
 8008058:	4602      	mov	r2, r0
 800805a:	4b05      	ldr	r3, [pc, #20]	; (8008070 <HAL_RCC_GetPCLK2Freq+0x20>)
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	0b5b      	lsrs	r3, r3, #13
 8008060:	f003 0307 	and.w	r3, r3, #7
 8008064:	4903      	ldr	r1, [pc, #12]	; (8008074 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008066:	5ccb      	ldrb	r3, [r1, r3]
 8008068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800806c:	4618      	mov	r0, r3
 800806e:	bd80      	pop	{r7, pc}
 8008070:	40023800 	.word	0x40023800
 8008074:	08014d58 	.word	0x08014d58

08008078 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	220f      	movs	r2, #15
 8008086:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008088:	4b12      	ldr	r3, [pc, #72]	; (80080d4 <HAL_RCC_GetClockConfig+0x5c>)
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	f003 0203 	and.w	r2, r3, #3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008094:	4b0f      	ldr	r3, [pc, #60]	; (80080d4 <HAL_RCC_GetClockConfig+0x5c>)
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80080a0:	4b0c      	ldr	r3, [pc, #48]	; (80080d4 <HAL_RCC_GetClockConfig+0x5c>)
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80080ac:	4b09      	ldr	r3, [pc, #36]	; (80080d4 <HAL_RCC_GetClockConfig+0x5c>)
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	08db      	lsrs	r3, r3, #3
 80080b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80080ba:	4b07      	ldr	r3, [pc, #28]	; (80080d8 <HAL_RCC_GetClockConfig+0x60>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 020f 	and.w	r2, r3, #15
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	601a      	str	r2, [r3, #0]
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	40023800 	.word	0x40023800
 80080d8:	40023c00 	.word	0x40023c00

080080dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b088      	sub	sp, #32
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80080e4:	2300      	movs	r3, #0
 80080e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80080e8:	2300      	movs	r3, #0
 80080ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80080ec:	2300      	movs	r3, #0
 80080ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80080f0:	2300      	movs	r3, #0
 80080f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80080f4:	2300      	movs	r3, #0
 80080f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0301 	and.w	r3, r3, #1
 8008100:	2b00      	cmp	r3, #0
 8008102:	d012      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008104:	4b69      	ldr	r3, [pc, #420]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	4a68      	ldr	r2, [pc, #416]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800810a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800810e:	6093      	str	r3, [r2, #8]
 8008110:	4b66      	ldr	r3, [pc, #408]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008112:	689a      	ldr	r2, [r3, #8]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008118:	4964      	ldr	r1, [pc, #400]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800811a:	4313      	orrs	r3, r2
 800811c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008126:	2301      	movs	r3, #1
 8008128:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d017      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008136:	4b5d      	ldr	r3, [pc, #372]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800813c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008144:	4959      	ldr	r1, [pc, #356]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008146:	4313      	orrs	r3, r2
 8008148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008154:	d101      	bne.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008156:	2301      	movs	r3, #1
 8008158:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815e:	2b00      	cmp	r3, #0
 8008160:	d101      	bne.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008162:	2301      	movs	r3, #1
 8008164:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d017      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008172:	4b4e      	ldr	r3, [pc, #312]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008178:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008180:	494a      	ldr	r1, [pc, #296]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008182:	4313      	orrs	r3, r2
 8008184:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008190:	d101      	bne.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008192:	2301      	movs	r3, #1
 8008194:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819a:	2b00      	cmp	r3, #0
 800819c:	d101      	bne.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800819e:	2301      	movs	r3, #1
 80081a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80081ae:	2301      	movs	r3, #1
 80081b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 0320 	and.w	r3, r3, #32
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 808b 	beq.w	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80081c0:	4b3a      	ldr	r3, [pc, #232]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c4:	4a39      	ldr	r2, [pc, #228]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081ca:	6413      	str	r3, [r2, #64]	; 0x40
 80081cc:	4b37      	ldr	r3, [pc, #220]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081d4:	60bb      	str	r3, [r7, #8]
 80081d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80081d8:	4b35      	ldr	r3, [pc, #212]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a34      	ldr	r2, [pc, #208]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80081de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081e4:	f7fa fe4a 	bl	8002e7c <HAL_GetTick>
 80081e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80081ea:	e008      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081ec:	f7fa fe46 	bl	8002e7c <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	2b64      	cmp	r3, #100	; 0x64
 80081f8:	d901      	bls.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e357      	b.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80081fe:	4b2c      	ldr	r3, [pc, #176]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0f0      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800820a:	4b28      	ldr	r3, [pc, #160]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800820c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800820e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008212:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d035      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	429a      	cmp	r2, r3
 8008226:	d02e      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008228:	4b20      	ldr	r3, [pc, #128]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800822a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800822c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008230:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008232:	4b1e      	ldr	r3, [pc, #120]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008236:	4a1d      	ldr	r2, [pc, #116]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800823c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800823e:	4b1b      	ldr	r3, [pc, #108]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008242:	4a1a      	ldr	r2, [pc, #104]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008248:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800824a:	4a18      	ldr	r2, [pc, #96]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008250:	4b16      	ldr	r3, [pc, #88]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	2b01      	cmp	r3, #1
 800825a:	d114      	bne.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800825c:	f7fa fe0e 	bl	8002e7c <HAL_GetTick>
 8008260:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008262:	e00a      	b.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008264:	f7fa fe0a 	bl	8002e7c <HAL_GetTick>
 8008268:	4602      	mov	r2, r0
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008272:	4293      	cmp	r3, r2
 8008274:	d901      	bls.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e319      	b.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800827a:	4b0c      	ldr	r3, [pc, #48]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800827c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827e:	f003 0302 	and.w	r3, r3, #2
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0ee      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800828e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008292:	d111      	bne.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008294:	4b05      	ldr	r3, [pc, #20]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80082a0:	4b04      	ldr	r3, [pc, #16]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80082a2:	400b      	ands	r3, r1
 80082a4:	4901      	ldr	r1, [pc, #4]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	608b      	str	r3, [r1, #8]
 80082aa:	e00b      	b.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80082ac:	40023800 	.word	0x40023800
 80082b0:	40007000 	.word	0x40007000
 80082b4:	0ffffcff 	.word	0x0ffffcff
 80082b8:	4baa      	ldr	r3, [pc, #680]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	4aa9      	ldr	r2, [pc, #676]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80082c2:	6093      	str	r3, [r2, #8]
 80082c4:	4ba7      	ldr	r3, [pc, #668]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082d0:	49a4      	ldr	r1, [pc, #656]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082d2:	4313      	orrs	r3, r2
 80082d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0310 	and.w	r3, r3, #16
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d010      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80082e2:	4ba0      	ldr	r3, [pc, #640]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082e8:	4a9e      	ldr	r2, [pc, #632]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80082f2:	4b9c      	ldr	r3, [pc, #624]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fc:	4999      	ldr	r1, [pc, #612]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00a      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008310:	4b94      	ldr	r3, [pc, #592]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008316:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800831e:	4991      	ldr	r1, [pc, #580]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008320:	4313      	orrs	r3, r2
 8008322:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00a      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008332:	4b8c      	ldr	r3, [pc, #560]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008338:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008340:	4988      	ldr	r1, [pc, #544]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008342:	4313      	orrs	r3, r2
 8008344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00a      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008354:	4b83      	ldr	r3, [pc, #524]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800835a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008362:	4980      	ldr	r1, [pc, #512]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008364:	4313      	orrs	r3, r2
 8008366:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00a      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008376:	4b7b      	ldr	r3, [pc, #492]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800837c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008384:	4977      	ldr	r1, [pc, #476]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008386:	4313      	orrs	r3, r2
 8008388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00a      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008398:	4b72      	ldr	r3, [pc, #456]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800839a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800839e:	f023 0203 	bic.w	r2, r3, #3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a6:	496f      	ldr	r1, [pc, #444]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083a8:	4313      	orrs	r3, r2
 80083aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00a      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80083ba:	4b6a      	ldr	r3, [pc, #424]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c0:	f023 020c 	bic.w	r2, r3, #12
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083c8:	4966      	ldr	r1, [pc, #408]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00a      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80083dc:	4b61      	ldr	r3, [pc, #388]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ea:	495e      	ldr	r1, [pc, #376]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083ec:	4313      	orrs	r3, r2
 80083ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00a      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80083fe:	4b59      	ldr	r3, [pc, #356]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008404:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800840c:	4955      	ldr	r1, [pc, #340]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800840e:	4313      	orrs	r3, r2
 8008410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00a      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008420:	4b50      	ldr	r3, [pc, #320]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008426:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800842e:	494d      	ldr	r1, [pc, #308]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008430:	4313      	orrs	r3, r2
 8008432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00a      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008442:	4b48      	ldr	r3, [pc, #288]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008448:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008450:	4944      	ldr	r1, [pc, #272]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008452:	4313      	orrs	r3, r2
 8008454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00a      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008464:	4b3f      	ldr	r3, [pc, #252]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800846a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008472:	493c      	ldr	r1, [pc, #240]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008474:	4313      	orrs	r3, r2
 8008476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00a      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008486:	4b37      	ldr	r3, [pc, #220]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800848c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008494:	4933      	ldr	r1, [pc, #204]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008496:	4313      	orrs	r3, r2
 8008498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00a      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80084a8:	4b2e      	ldr	r3, [pc, #184]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084b6:	492b      	ldr	r1, [pc, #172]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d011      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80084ca:	4b26      	ldr	r3, [pc, #152]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084d8:	4922      	ldr	r1, [pc, #136]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084e8:	d101      	bne.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80084ea:	2301      	movs	r3, #1
 80084ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0308 	and.w	r3, r3, #8
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d001      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80084fa:	2301      	movs	r3, #1
 80084fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00a      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800850a:	4b16      	ldr	r3, [pc, #88]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800850c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008510:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008518:	4912      	ldr	r1, [pc, #72]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800851a:	4313      	orrs	r3, r2
 800851c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00b      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800852c:	4b0d      	ldr	r3, [pc, #52]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800852e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008532:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800853c:	4909      	ldr	r1, [pc, #36]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800853e:	4313      	orrs	r3, r2
 8008540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d006      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008552:	2b00      	cmp	r3, #0
 8008554:	f000 80d9 	beq.w	800870a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008558:	4b02      	ldr	r3, [pc, #8]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a01      	ldr	r2, [pc, #4]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800855e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008562:	e001      	b.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008564:	40023800 	.word	0x40023800
 8008568:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800856a:	f7fa fc87 	bl	8002e7c <HAL_GetTick>
 800856e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008570:	e008      	b.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008572:	f7fa fc83 	bl	8002e7c <HAL_GetTick>
 8008576:	4602      	mov	r2, r0
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	2b64      	cmp	r3, #100	; 0x64
 800857e:	d901      	bls.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e194      	b.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008584:	4b6c      	ldr	r3, [pc, #432]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1f0      	bne.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	2b00      	cmp	r3, #0
 800859a:	d021      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d11d      	bne.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80085a4:	4b64      	ldr	r3, [pc, #400]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085aa:	0c1b      	lsrs	r3, r3, #16
 80085ac:	f003 0303 	and.w	r3, r3, #3
 80085b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80085b2:	4b61      	ldr	r3, [pc, #388]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085b8:	0e1b      	lsrs	r3, r3, #24
 80085ba:	f003 030f 	and.w	r3, r3, #15
 80085be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	019a      	lsls	r2, r3, #6
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	041b      	lsls	r3, r3, #16
 80085ca:	431a      	orrs	r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	061b      	lsls	r3, r3, #24
 80085d0:	431a      	orrs	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	071b      	lsls	r3, r3, #28
 80085d8:	4957      	ldr	r1, [pc, #348]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d004      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085f4:	d00a      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d02e      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008606:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800860a:	d129      	bne.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800860c:	4b4a      	ldr	r3, [pc, #296]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800860e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008612:	0c1b      	lsrs	r3, r3, #16
 8008614:	f003 0303 	and.w	r3, r3, #3
 8008618:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800861a:	4b47      	ldr	r3, [pc, #284]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800861c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008620:	0f1b      	lsrs	r3, r3, #28
 8008622:	f003 0307 	and.w	r3, r3, #7
 8008626:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	019a      	lsls	r2, r3, #6
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	041b      	lsls	r3, r3, #16
 8008632:	431a      	orrs	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	061b      	lsls	r3, r3, #24
 800863a:	431a      	orrs	r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	071b      	lsls	r3, r3, #28
 8008640:	493d      	ldr	r1, [pc, #244]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008642:	4313      	orrs	r3, r2
 8008644:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008648:	4b3b      	ldr	r3, [pc, #236]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800864a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800864e:	f023 021f 	bic.w	r2, r3, #31
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008656:	3b01      	subs	r3, #1
 8008658:	4937      	ldr	r1, [pc, #220]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800865a:	4313      	orrs	r3, r2
 800865c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d01d      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800866c:	4b32      	ldr	r3, [pc, #200]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800866e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008672:	0e1b      	lsrs	r3, r3, #24
 8008674:	f003 030f 	and.w	r3, r3, #15
 8008678:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800867a:	4b2f      	ldr	r3, [pc, #188]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800867c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008680:	0f1b      	lsrs	r3, r3, #28
 8008682:	f003 0307 	and.w	r3, r3, #7
 8008686:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	019a      	lsls	r2, r3, #6
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	041b      	lsls	r3, r3, #16
 8008694:	431a      	orrs	r2, r3
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	061b      	lsls	r3, r3, #24
 800869a:	431a      	orrs	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	071b      	lsls	r3, r3, #28
 80086a0:	4925      	ldr	r1, [pc, #148]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d011      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	019a      	lsls	r2, r3, #6
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	041b      	lsls	r3, r3, #16
 80086c0:	431a      	orrs	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	061b      	lsls	r3, r3, #24
 80086c8:	431a      	orrs	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	071b      	lsls	r3, r3, #28
 80086d0:	4919      	ldr	r1, [pc, #100]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80086d8:	4b17      	ldr	r3, [pc, #92]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a16      	ldr	r2, [pc, #88]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80086e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086e4:	f7fa fbca 	bl	8002e7c <HAL_GetTick>
 80086e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086ea:	e008      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80086ec:	f7fa fbc6 	bl	8002e7c <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	2b64      	cmp	r3, #100	; 0x64
 80086f8:	d901      	bls.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e0d7      	b.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086fe:	4b0e      	ldr	r3, [pc, #56]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008706:	2b00      	cmp	r3, #0
 8008708:	d0f0      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	2b01      	cmp	r3, #1
 800870e:	f040 80cd 	bne.w	80088ac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008712:	4b09      	ldr	r3, [pc, #36]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a08      	ldr	r2, [pc, #32]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800871c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800871e:	f7fa fbad 	bl	8002e7c <HAL_GetTick>
 8008722:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008724:	e00a      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008726:	f7fa fba9 	bl	8002e7c <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	2b64      	cmp	r3, #100	; 0x64
 8008732:	d903      	bls.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e0ba      	b.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008738:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800873c:	4b5e      	ldr	r3, [pc, #376]	; (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008748:	d0ed      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d003      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800875a:	2b00      	cmp	r3, #0
 800875c:	d009      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008766:	2b00      	cmp	r3, #0
 8008768:	d02e      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876e:	2b00      	cmp	r3, #0
 8008770:	d12a      	bne.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008772:	4b51      	ldr	r3, [pc, #324]	; (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008778:	0c1b      	lsrs	r3, r3, #16
 800877a:	f003 0303 	and.w	r3, r3, #3
 800877e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008780:	4b4d      	ldr	r3, [pc, #308]	; (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008786:	0f1b      	lsrs	r3, r3, #28
 8008788:	f003 0307 	and.w	r3, r3, #7
 800878c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	019a      	lsls	r2, r3, #6
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	041b      	lsls	r3, r3, #16
 8008798:	431a      	orrs	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	061b      	lsls	r3, r3, #24
 80087a0:	431a      	orrs	r2, r3
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	071b      	lsls	r3, r3, #28
 80087a6:	4944      	ldr	r1, [pc, #272]	; (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087a8:	4313      	orrs	r3, r2
 80087aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80087ae:	4b42      	ldr	r3, [pc, #264]	; (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087bc:	3b01      	subs	r3, #1
 80087be:	021b      	lsls	r3, r3, #8
 80087c0:	493d      	ldr	r1, [pc, #244]	; (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087c2:	4313      	orrs	r3, r2
 80087c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d022      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087dc:	d11d      	bne.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80087de:	4b36      	ldr	r3, [pc, #216]	; (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087e4:	0e1b      	lsrs	r3, r3, #24
 80087e6:	f003 030f 	and.w	r3, r3, #15
 80087ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80087ec:	4b32      	ldr	r3, [pc, #200]	; (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087f2:	0f1b      	lsrs	r3, r3, #28
 80087f4:	f003 0307 	and.w	r3, r3, #7
 80087f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	019a      	lsls	r2, r3, #6
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a1b      	ldr	r3, [r3, #32]
 8008804:	041b      	lsls	r3, r3, #16
 8008806:	431a      	orrs	r2, r3
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	061b      	lsls	r3, r3, #24
 800880c:	431a      	orrs	r2, r3
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	071b      	lsls	r3, r3, #28
 8008812:	4929      	ldr	r1, [pc, #164]	; (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008814:	4313      	orrs	r3, r2
 8008816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0308 	and.w	r3, r3, #8
 8008822:	2b00      	cmp	r3, #0
 8008824:	d028      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008826:	4b24      	ldr	r3, [pc, #144]	; (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800882c:	0e1b      	lsrs	r3, r3, #24
 800882e:	f003 030f 	and.w	r3, r3, #15
 8008832:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008834:	4b20      	ldr	r3, [pc, #128]	; (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800883a:	0c1b      	lsrs	r3, r3, #16
 800883c:	f003 0303 	and.w	r3, r3, #3
 8008840:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	019a      	lsls	r2, r3, #6
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	041b      	lsls	r3, r3, #16
 800884c:	431a      	orrs	r2, r3
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	061b      	lsls	r3, r3, #24
 8008852:	431a      	orrs	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	69db      	ldr	r3, [r3, #28]
 8008858:	071b      	lsls	r3, r3, #28
 800885a:	4917      	ldr	r1, [pc, #92]	; (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800885c:	4313      	orrs	r3, r2
 800885e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008862:	4b15      	ldr	r3, [pc, #84]	; (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008868:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008870:	4911      	ldr	r1, [pc, #68]	; (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008872:	4313      	orrs	r3, r2
 8008874:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008878:	4b0f      	ldr	r3, [pc, #60]	; (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a0e      	ldr	r2, [pc, #56]	; (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800887e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008884:	f7fa fafa 	bl	8002e7c <HAL_GetTick>
 8008888:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800888a:	e008      	b.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800888c:	f7fa faf6 	bl	8002e7c <HAL_GetTick>
 8008890:	4602      	mov	r2, r0
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	2b64      	cmp	r3, #100	; 0x64
 8008898:	d901      	bls.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e007      	b.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800889e:	4b06      	ldr	r3, [pc, #24]	; (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088aa:	d1ef      	bne.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3720      	adds	r7, #32
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	40023800 	.word	0x40023800

080088bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80088bc:	b480      	push	{r7}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80088cc:	2300      	movs	r3, #0
 80088ce:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80088d0:	2300      	movs	r3, #0
 80088d2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80088da:	f040 808c 	bne.w	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 80088de:	4b95      	ldr	r3, [pc, #596]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80088e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088e4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80088ec:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088f4:	d07c      	beq.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088fc:	d87d      	bhi.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d004      	beq.n	800890e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800890a:	d039      	beq.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800890c:	e075      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800890e:	4b89      	ldr	r3, [pc, #548]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008916:	2b00      	cmp	r3, #0
 8008918:	d108      	bne.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800891a:	4b86      	ldr	r3, [pc, #536]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008922:	4a85      	ldr	r2, [pc, #532]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008924:	fbb2 f3f3 	udiv	r3, r2, r3
 8008928:	613b      	str	r3, [r7, #16]
 800892a:	e007      	b.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800892c:	4b81      	ldr	r3, [pc, #516]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008934:	4a81      	ldr	r2, [pc, #516]	; (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008936:	fbb2 f3f3 	udiv	r3, r2, r3
 800893a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800893c:	4b7d      	ldr	r3, [pc, #500]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800893e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008942:	0e1b      	lsrs	r3, r3, #24
 8008944:	f003 030f 	and.w	r3, r3, #15
 8008948:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800894a:	4b7a      	ldr	r3, [pc, #488]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800894c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008950:	099b      	lsrs	r3, r3, #6
 8008952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008956:	693a      	ldr	r2, [r7, #16]
 8008958:	fb03 f202 	mul.w	r2, r3, r2
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008962:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008964:	4b73      	ldr	r3, [pc, #460]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800896a:	0a1b      	lsrs	r3, r3, #8
 800896c:	f003 031f 	and.w	r3, r3, #31
 8008970:	3301      	adds	r3, #1
 8008972:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	fbb2 f3f3 	udiv	r3, r2, r3
 800897c:	617b      	str	r3, [r7, #20]
        break;
 800897e:	e03d      	b.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008980:	4b6c      	ldr	r3, [pc, #432]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008988:	2b00      	cmp	r3, #0
 800898a:	d108      	bne.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800898c:	4b69      	ldr	r3, [pc, #420]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008994:	4a68      	ldr	r2, [pc, #416]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008996:	fbb2 f3f3 	udiv	r3, r2, r3
 800899a:	613b      	str	r3, [r7, #16]
 800899c:	e007      	b.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800899e:	4b65      	ldr	r3, [pc, #404]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089a6:	4a65      	ldr	r2, [pc, #404]	; (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80089a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ac:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80089ae:	4b61      	ldr	r3, [pc, #388]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80089b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089b4:	0e1b      	lsrs	r3, r3, #24
 80089b6:	f003 030f 	and.w	r3, r3, #15
 80089ba:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80089bc:	4b5d      	ldr	r3, [pc, #372]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80089be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089c2:	099b      	lsrs	r3, r3, #6
 80089c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	fb03 f202 	mul.w	r2, r3, r2
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80089d4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80089d6:	4b57      	ldr	r3, [pc, #348]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80089d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089dc:	f003 031f 	and.w	r3, r3, #31
 80089e0:	3301      	adds	r3, #1
 80089e2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80089e4:	697a      	ldr	r2, [r7, #20]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ec:	617b      	str	r3, [r7, #20]
        break;
 80089ee:	e005      	b.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 80089f0:	4b53      	ldr	r3, [pc, #332]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80089f2:	617b      	str	r3, [r7, #20]
        break;
 80089f4:	e002      	b.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 80089f6:	bf00      	nop
 80089f8:	e000      	b.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 80089fa:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a02:	f040 808c 	bne.w	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008a06:	4b4b      	ldr	r3, [pc, #300]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a0c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008a14:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a1c:	d07c      	beq.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a24:	d87d      	bhi.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d004      	beq.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a32:	d039      	beq.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008a34:	e075      	b.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008a36:	4b3f      	ldr	r3, [pc, #252]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d108      	bne.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008a42:	4b3c      	ldr	r3, [pc, #240]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a4a:	4a3b      	ldr	r2, [pc, #236]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a50:	613b      	str	r3, [r7, #16]
 8008a52:	e007      	b.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008a54:	4b37      	ldr	r3, [pc, #220]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a5c:	4a37      	ldr	r2, [pc, #220]	; (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a62:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008a64:	4b33      	ldr	r3, [pc, #204]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a6a:	0e1b      	lsrs	r3, r3, #24
 8008a6c:	f003 030f 	and.w	r3, r3, #15
 8008a70:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008a72:	4b30      	ldr	r3, [pc, #192]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a78:	099b      	lsrs	r3, r3, #6
 8008a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	fb03 f202 	mul.w	r2, r3, r2
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a8a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008a8c:	4b29      	ldr	r3, [pc, #164]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a92:	0a1b      	lsrs	r3, r3, #8
 8008a94:	f003 031f 	and.w	r3, r3, #31
 8008a98:	3301      	adds	r3, #1
 8008a9a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aa4:	617b      	str	r3, [r7, #20]
        break;
 8008aa6:	e03d      	b.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008aa8:	4b22      	ldr	r3, [pc, #136]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d108      	bne.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008ab4:	4b1f      	ldr	r3, [pc, #124]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008abc:	4a1e      	ldr	r2, [pc, #120]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ac2:	613b      	str	r3, [r7, #16]
 8008ac4:	e007      	b.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008ac6:	4b1b      	ldr	r3, [pc, #108]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ace:	4a1b      	ldr	r2, [pc, #108]	; (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008ad6:	4b17      	ldr	r3, [pc, #92]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008adc:	0e1b      	lsrs	r3, r3, #24
 8008ade:	f003 030f 	and.w	r3, r3, #15
 8008ae2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008ae4:	4b13      	ldr	r3, [pc, #76]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aea:	099b      	lsrs	r3, r3, #6
 8008aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	fb03 f202 	mul.w	r2, r3, r2
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008afc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008afe:	4b0d      	ldr	r3, [pc, #52]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b04:	f003 031f 	and.w	r3, r3, #31
 8008b08:	3301      	adds	r3, #1
 8008b0a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b14:	617b      	str	r3, [r7, #20]
        break;
 8008b16:	e005      	b.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b18:	4b09      	ldr	r3, [pc, #36]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008b1a:	617b      	str	r3, [r7, #20]
        break;
 8008b1c:	e002      	b.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 8008b1e:	bf00      	nop
 8008b20:	e000      	b.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 8008b22:	bf00      	nop

  return frequency;
 8008b24:	697b      	ldr	r3, [r7, #20]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	371c      	adds	r7, #28
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	40023800 	.word	0x40023800
 8008b38:	00f42400 	.word	0x00f42400
 8008b3c:	017d7840 	.word	0x017d7840
 8008b40:	00bb8000 	.word	0x00bb8000

08008b44 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e081      	b.n	8008c5a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	7f5b      	ldrb	r3, [r3, #29]
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d105      	bne.n	8008b6c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f7f9 fc84 	bl	8002474 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	22ca      	movs	r2, #202	; 0xca
 8008b78:	625a      	str	r2, [r3, #36]	; 0x24
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2253      	movs	r2, #83	; 0x53
 8008b80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fb16 	bl	80091b4 <RTC_EnterInitMode>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d008      	beq.n	8008ba0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	22ff      	movs	r2, #255	; 0xff
 8008b94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2204      	movs	r2, #4
 8008b9a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e05c      	b.n	8008c5a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	6899      	ldr	r1, [r3, #8]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	4b2e      	ldr	r3, [pc, #184]	; (8008c64 <HAL_RTC_Init+0x120>)
 8008bac:	400b      	ands	r3, r1
 8008bae:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6899      	ldr	r1, [r3, #8]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685a      	ldr	r2, [r3, #4]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	431a      	orrs	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	695b      	ldr	r3, [r3, #20]
 8008bc4:	431a      	orrs	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	430a      	orrs	r2, r1
 8008bcc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	68d2      	ldr	r2, [r2, #12]
 8008bd6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	6919      	ldr	r1, [r3, #16]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	041a      	lsls	r2, r3, #16
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	430a      	orrs	r2, r1
 8008bea:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68da      	ldr	r2, [r3, #12]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bfa:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	f003 0320 	and.w	r3, r3, #32
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d10e      	bne.n	8008c28 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 faaa 	bl	8009164 <HAL_RTC_WaitForSynchro>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d008      	beq.n	8008c28 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	22ff      	movs	r2, #255	; 0xff
 8008c1c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2204      	movs	r2, #4
 8008c22:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e018      	b.n	8008c5a <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f022 0208 	bic.w	r2, r2, #8
 8008c36:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	699a      	ldr	r2, [r3, #24]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	430a      	orrs	r2, r1
 8008c48:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	22ff      	movs	r2, #255	; 0xff
 8008c50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008c58:	2300      	movs	r3, #0
  }
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3708      	adds	r7, #8
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	ff8fffbf 	.word	0xff8fffbf

08008c68 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008c68:	b590      	push	{r4, r7, lr}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008c74:	2300      	movs	r3, #0
 8008c76:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	7f1b      	ldrb	r3, [r3, #28]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d101      	bne.n	8008c84 <HAL_RTC_SetTime+0x1c>
 8008c80:	2302      	movs	r3, #2
 8008c82:	e0a8      	b.n	8008dd6 <HAL_RTC_SetTime+0x16e>
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2201      	movs	r2, #1
 8008c88:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2202      	movs	r2, #2
 8008c8e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d126      	bne.n	8008ce4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d102      	bne.n	8008caa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 faac 	bl	800920c <RTC_ByteToBcd2>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	785b      	ldrb	r3, [r3, #1]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 faa5 	bl	800920c <RTC_ByteToBcd2>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008cc6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	789b      	ldrb	r3, [r3, #2]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 fa9d 	bl	800920c <RTC_ByteToBcd2>
 8008cd2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008cd4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	7b1b      	ldrb	r3, [r3, #12]
 8008cdc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	617b      	str	r3, [r7, #20]
 8008ce2:	e018      	b.n	8008d16 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d102      	bne.n	8008cf8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	785b      	ldrb	r3, [r3, #1]
 8008d02:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008d04:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008d0a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	7b1b      	ldrb	r3, [r3, #12]
 8008d10:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008d12:	4313      	orrs	r3, r2
 8008d14:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	22ca      	movs	r2, #202	; 0xca
 8008d1c:	625a      	str	r2, [r3, #36]	; 0x24
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2253      	movs	r2, #83	; 0x53
 8008d24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f000 fa44 	bl	80091b4 <RTC_EnterInitMode>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00b      	beq.n	8008d4a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	22ff      	movs	r2, #255	; 0xff
 8008d38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2204      	movs	r2, #4
 8008d3e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e045      	b.n	8008dd6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	6979      	ldr	r1, [r7, #20]
 8008d50:	4b23      	ldr	r3, [pc, #140]	; (8008de0 <HAL_RTC_SetTime+0x178>)
 8008d52:	400b      	ands	r3, r1
 8008d54:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	689a      	ldr	r2, [r3, #8]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d64:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	6899      	ldr	r1, [r3, #8]
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	691a      	ldr	r2, [r3, #16]
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	695b      	ldr	r3, [r3, #20]
 8008d74:	431a      	orrs	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68da      	ldr	r2, [r3, #12]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d8c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f003 0320 	and.w	r3, r3, #32
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d111      	bne.n	8008dc0 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f000 f9e1 	bl	8009164 <HAL_RTC_WaitForSynchro>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00b      	beq.n	8008dc0 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	22ff      	movs	r2, #255	; 0xff
 8008dae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2204      	movs	r2, #4
 8008db4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e00a      	b.n	8008dd6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	22ff      	movs	r2, #255	; 0xff
 8008dc6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
  }
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	371c      	adds	r7, #28
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd90      	pop	{r4, r7, pc}
 8008dde:	bf00      	nop
 8008de0:	007f7f7f 	.word	0x007f7f7f

08008de4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008de4:	b590      	push	{r4, r7, lr}
 8008de6:	b087      	sub	sp, #28
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	7f1b      	ldrb	r3, [r3, #28]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d101      	bne.n	8008e00 <HAL_RTC_SetDate+0x1c>
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	e092      	b.n	8008f26 <HAL_RTC_SetDate+0x142>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2201      	movs	r2, #1
 8008e04:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2202      	movs	r2, #2
 8008e0a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d10e      	bne.n	8008e30 <HAL_RTC_SetDate+0x4c>
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	785b      	ldrb	r3, [r3, #1]
 8008e16:	f003 0310 	and.w	r3, r3, #16
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d008      	beq.n	8008e30 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	785b      	ldrb	r3, [r3, #1]
 8008e22:	f023 0310 	bic.w	r3, r3, #16
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	330a      	adds	r3, #10
 8008e2a:	b2da      	uxtb	r2, r3
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d11c      	bne.n	8008e70 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	78db      	ldrb	r3, [r3, #3]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f000 f9e6 	bl	800920c <RTC_ByteToBcd2>
 8008e40:	4603      	mov	r3, r0
 8008e42:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	785b      	ldrb	r3, [r3, #1]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f000 f9df 	bl	800920c <RTC_ByteToBcd2>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008e52:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	789b      	ldrb	r3, [r3, #2]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 f9d7 	bl	800920c <RTC_ByteToBcd2>
 8008e5e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008e60:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	617b      	str	r3, [r7, #20]
 8008e6e:	e00e      	b.n	8008e8e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	78db      	ldrb	r3, [r3, #3]
 8008e74:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	785b      	ldrb	r3, [r3, #1]
 8008e7a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008e7c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008e82:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	22ca      	movs	r2, #202	; 0xca
 8008e94:	625a      	str	r2, [r3, #36]	; 0x24
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2253      	movs	r2, #83	; 0x53
 8008e9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f000 f988 	bl	80091b4 <RTC_EnterInitMode>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00b      	beq.n	8008ec2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	22ff      	movs	r2, #255	; 0xff
 8008eb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2204      	movs	r2, #4
 8008eb6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e031      	b.n	8008f26 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	6979      	ldr	r1, [r7, #20]
 8008ec8:	4b19      	ldr	r3, [pc, #100]	; (8008f30 <HAL_RTC_SetDate+0x14c>)
 8008eca:	400b      	ands	r3, r1
 8008ecc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68da      	ldr	r2, [r3, #12]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008edc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	f003 0320 	and.w	r3, r3, #32
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d111      	bne.n	8008f10 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f000 f939 	bl	8009164 <HAL_RTC_WaitForSynchro>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00b      	beq.n	8008f10 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	22ff      	movs	r2, #255	; 0xff
 8008efe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2204      	movs	r2, #4
 8008f04:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e00a      	b.n	8008f26 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	22ff      	movs	r2, #255	; 0xff
 8008f16:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008f24:	2300      	movs	r3, #0
  }
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	371c      	adds	r7, #28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd90      	pop	{r4, r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	00ffff3f 	.word	0x00ffff3f

08008f34 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008f34:	b590      	push	{r4, r7, lr}
 8008f36:	b089      	sub	sp, #36	; 0x24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008f40:	2300      	movs	r3, #0
 8008f42:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	61fb      	str	r3, [r7, #28]
 8008f48:	2300      	movs	r3, #0
 8008f4a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	7f1b      	ldrb	r3, [r3, #28]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d101      	bne.n	8008f58 <HAL_RTC_SetAlarm+0x24>
 8008f54:	2302      	movs	r3, #2
 8008f56:	e101      	b.n	800915c <HAL_RTC_SetAlarm+0x228>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2202      	movs	r2, #2
 8008f62:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d137      	bne.n	8008fda <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d102      	bne.n	8008f7e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 f942 	bl	800920c <RTC_ByteToBcd2>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	785b      	ldrb	r3, [r3, #1]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f000 f93b 	bl	800920c <RTC_ByteToBcd2>
 8008f96:	4603      	mov	r3, r0
 8008f98:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008f9a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	789b      	ldrb	r3, [r3, #2]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 f933 	bl	800920c <RTC_ByteToBcd2>
 8008fa6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008fa8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	7b1b      	ldrb	r3, [r3, #12]
 8008fb0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008fb2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f000 f925 	bl	800920c <RTC_ByteToBcd2>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008fc6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008fce:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	61fb      	str	r3, [r7, #28]
 8008fd8:	e023      	b.n	8009022 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d102      	bne.n	8008fee <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2200      	movs	r2, #0
 8008fec:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	785b      	ldrb	r3, [r3, #1]
 8008ff8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008ffa:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009000:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	7b1b      	ldrb	r3, [r3, #12]
 8009006:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009008:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009010:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009012:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009018:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800901e:	4313      	orrs	r3, r2
 8009020:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	69db      	ldr	r3, [r3, #28]
 800902a:	4313      	orrs	r3, r2
 800902c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	22ca      	movs	r2, #202	; 0xca
 8009034:	625a      	str	r2, [r3, #36]	; 0x24
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2253      	movs	r2, #83	; 0x53
 800903c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009046:	d13f      	bne.n	80090c8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	689a      	ldr	r2, [r3, #8]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009056:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689a      	ldr	r2, [r3, #8]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009066:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009068:	f7f9 ff08 	bl	8002e7c <HAL_GetTick>
 800906c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800906e:	e013      	b.n	8009098 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009070:	f7f9 ff04 	bl	8002e7c <HAL_GetTick>
 8009074:	4602      	mov	r2, r0
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800907e:	d90b      	bls.n	8009098 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	22ff      	movs	r2, #255	; 0xff
 8009086:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2203      	movs	r2, #3
 800908c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009094:	2303      	movs	r3, #3
 8009096:	e061      	b.n	800915c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	f003 0301 	and.w	r3, r3, #1
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d0e4      	beq.n	8009070 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	69fa      	ldr	r2, [r7, #28]
 80090ac:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	689a      	ldr	r2, [r3, #8]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090c4:	609a      	str	r2, [r3, #8]
 80090c6:	e03e      	b.n	8009146 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	689a      	ldr	r2, [r3, #8]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80090d6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	689a      	ldr	r2, [r3, #8]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090e6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80090e8:	f7f9 fec8 	bl	8002e7c <HAL_GetTick>
 80090ec:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80090ee:	e013      	b.n	8009118 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80090f0:	f7f9 fec4 	bl	8002e7c <HAL_GetTick>
 80090f4:	4602      	mov	r2, r0
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090fe:	d90b      	bls.n	8009118 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	22ff      	movs	r2, #255	; 0xff
 8009106:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2203      	movs	r2, #3
 800910c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2200      	movs	r2, #0
 8009112:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e021      	b.n	800915c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	f003 0302 	and.w	r3, r3, #2
 8009122:	2b00      	cmp	r3, #0
 8009124:	d0e4      	beq.n	80090f0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	69fa      	ldr	r2, [r7, #28]
 800912c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	697a      	ldr	r2, [r7, #20]
 8009134:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	689a      	ldr	r2, [r3, #8]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009144:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	22ff      	movs	r2, #255	; 0xff
 800914c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2201      	movs	r2, #1
 8009152:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3724      	adds	r7, #36	; 0x24
 8009160:	46bd      	mov	sp, r7
 8009162:	bd90      	pop	{r4, r7, pc}

08009164 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800916c:	2300      	movs	r3, #0
 800916e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68da      	ldr	r2, [r3, #12]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800917e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009180:	f7f9 fe7c 	bl	8002e7c <HAL_GetTick>
 8009184:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009186:	e009      	b.n	800919c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009188:	f7f9 fe78 	bl	8002e7c <HAL_GetTick>
 800918c:	4602      	mov	r2, r0
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009196:	d901      	bls.n	800919c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009198:	2303      	movs	r3, #3
 800919a:	e007      	b.n	80091ac <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	f003 0320 	and.w	r3, r3, #32
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d0ee      	beq.n	8009188 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80091bc:	2300      	movs	r3, #0
 80091be:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d119      	bne.n	8009202 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091d6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80091d8:	f7f9 fe50 	bl	8002e7c <HAL_GetTick>
 80091dc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80091de:	e009      	b.n	80091f4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80091e0:	f7f9 fe4c 	bl	8002e7c <HAL_GetTick>
 80091e4:	4602      	mov	r2, r0
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091ee:	d901      	bls.n	80091f4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80091f0:	2303      	movs	r3, #3
 80091f2:	e007      	b.n	8009204 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d0ee      	beq.n	80091e0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8009216:	2300      	movs	r3, #0
 8009218:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800921a:	e005      	b.n	8009228 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	3301      	adds	r3, #1
 8009220:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8009222:	79fb      	ldrb	r3, [r7, #7]
 8009224:	3b0a      	subs	r3, #10
 8009226:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8009228:	79fb      	ldrb	r3, [r7, #7]
 800922a:	2b09      	cmp	r3, #9
 800922c:	d8f6      	bhi.n	800921c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	b2db      	uxtb	r3, r3
 8009232:	011b      	lsls	r3, r3, #4
 8009234:	b2da      	uxtb	r2, r3
 8009236:	79fb      	ldrb	r3, [r7, #7]
 8009238:	4313      	orrs	r3, r2
 800923a:	b2db      	uxtb	r3, r3
}
 800923c:	4618      	mov	r0, r3
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009254:	2300      	movs	r3, #0
 8009256:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	7f1b      	ldrb	r3, [r3, #28]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d101      	bne.n	8009264 <HAL_RTCEx_SetTimeStamp+0x1c>
 8009260:	2302      	movs	r3, #2
 8009262:	e03e      	b.n	80092e2 <HAL_RTCEx_SetTimeStamp+0x9a>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2201      	movs	r2, #1
 8009268:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2202      	movs	r2, #2
 800926e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	689a      	ldr	r2, [r3, #8]
 8009276:	4b1e      	ldr	r3, [pc, #120]	; (80092f0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8009278:	4013      	ands	r3, r2
 800927a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800927c:	697a      	ldr	r2, [r7, #20]
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	4313      	orrs	r3, r2
 8009282:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	22ca      	movs	r2, #202	; 0xca
 800928a:	625a      	str	r2, [r3, #36]	; 0x24
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2253      	movs	r2, #83	; 0x53
 8009292:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f022 0206 	bic.w	r2, r2, #6
 80092a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	430a      	orrs	r2, r1
 80092b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	697a      	ldr	r2, [r7, #20]
 80092ba:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	689a      	ldr	r2, [r3, #8]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092ca:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	22ff      	movs	r2, #255	; 0xff
 80092d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2201      	movs	r2, #1
 80092d8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	371c      	adds	r7, #28
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	fffff7f7 	.word	0xfffff7f7

080092f4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b088      	sub	sp, #32
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80092fc:	2300      	movs	r3, #0
 80092fe:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8009304:	2300      	movs	r3, #0
 8009306:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d101      	bne.n	8009312 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	e156      	b.n	80095c0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009318:	b2db      	uxtb	r3, r3
 800931a:	2b00      	cmp	r3, #0
 800931c:	d106      	bne.n	800932c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f7f9 fc08 	bl	8002b3c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2202      	movs	r2, #2
 8009330:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f95b 	bl	80095f0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	2b02      	cmp	r3, #2
 8009340:	d00c      	beq.n	800935c <HAL_SAI_Init+0x68>
 8009342:	2b02      	cmp	r3, #2
 8009344:	d80d      	bhi.n	8009362 <HAL_SAI_Init+0x6e>
 8009346:	2b00      	cmp	r3, #0
 8009348:	d002      	beq.n	8009350 <HAL_SAI_Init+0x5c>
 800934a:	2b01      	cmp	r3, #1
 800934c:	d003      	beq.n	8009356 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800934e:	e008      	b.n	8009362 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8009350:	2300      	movs	r3, #0
 8009352:	61fb      	str	r3, [r7, #28]
      break;
 8009354:	e006      	b.n	8009364 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009356:	2310      	movs	r3, #16
 8009358:	61fb      	str	r3, [r7, #28]
      break;
 800935a:	e003      	b.n	8009364 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800935c:	2320      	movs	r3, #32
 800935e:	61fb      	str	r3, [r7, #28]
      break;
 8009360:	e000      	b.n	8009364 <HAL_SAI_Init+0x70>
      break;
 8009362:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	2b03      	cmp	r3, #3
 800936a:	d81e      	bhi.n	80093aa <HAL_SAI_Init+0xb6>
 800936c:	a201      	add	r2, pc, #4	; (adr r2, 8009374 <HAL_SAI_Init+0x80>)
 800936e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009372:	bf00      	nop
 8009374:	08009385 	.word	0x08009385
 8009378:	0800938b 	.word	0x0800938b
 800937c:	08009393 	.word	0x08009393
 8009380:	0800939b 	.word	0x0800939b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8009384:	2300      	movs	r3, #0
 8009386:	617b      	str	r3, [r7, #20]
    }
    break;
 8009388:	e010      	b.n	80093ac <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800938a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800938e:	617b      	str	r3, [r7, #20]
    }
    break;
 8009390:	e00c      	b.n	80093ac <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009392:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009396:	617b      	str	r3, [r7, #20]
    }
    break;
 8009398:	e008      	b.n	80093ac <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800939a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800939e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	f043 0301 	orr.w	r3, r3, #1
 80093a6:	61fb      	str	r3, [r7, #28]
    }
    break;
 80093a8:	e000      	b.n	80093ac <HAL_SAI_Init+0xb8>
    default:
      break;
 80093aa:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a85      	ldr	r2, [pc, #532]	; (80095c8 <HAL_SAI_Init+0x2d4>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d004      	beq.n	80093c0 <HAL_SAI_Init+0xcc>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a84      	ldr	r2, [pc, #528]	; (80095cc <HAL_SAI_Init+0x2d8>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d103      	bne.n	80093c8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80093c0:	4a83      	ldr	r2, [pc, #524]	; (80095d0 <HAL_SAI_Init+0x2dc>)
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	6013      	str	r3, [r2, #0]
 80093c6:	e002      	b.n	80093ce <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80093c8:	4a82      	ldr	r2, [pc, #520]	; (80095d4 <HAL_SAI_Init+0x2e0>)
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	69db      	ldr	r3, [r3, #28]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d04c      	beq.n	8009470 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80093d6:	2300      	movs	r3, #0
 80093d8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a7a      	ldr	r2, [pc, #488]	; (80095c8 <HAL_SAI_Init+0x2d4>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d004      	beq.n	80093ee <HAL_SAI_Init+0xfa>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a78      	ldr	r2, [pc, #480]	; (80095cc <HAL_SAI_Init+0x2d8>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d104      	bne.n	80093f8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80093ee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80093f2:	f7ff fa63 	bl	80088bc <HAL_RCCEx_GetPeriphCLKFreq>
 80093f6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a76      	ldr	r2, [pc, #472]	; (80095d8 <HAL_SAI_Init+0x2e4>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d004      	beq.n	800940c <HAL_SAI_Init+0x118>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a75      	ldr	r2, [pc, #468]	; (80095dc <HAL_SAI_Init+0x2e8>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d104      	bne.n	8009416 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800940c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009410:	f7ff fa54 	bl	80088bc <HAL_RCCEx_GetPeriphCLKFreq>
 8009414:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8009416:	693a      	ldr	r2, [r7, #16]
 8009418:	4613      	mov	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	4413      	add	r3, r2
 800941e:	005b      	lsls	r3, r3, #1
 8009420:	461a      	mov	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	69db      	ldr	r3, [r3, #28]
 8009426:	025b      	lsls	r3, r3, #9
 8009428:	fbb2 f3f3 	udiv	r3, r2, r3
 800942c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	4a6b      	ldr	r2, [pc, #428]	; (80095e0 <HAL_SAI_Init+0x2ec>)
 8009432:	fba2 2303 	umull	r2, r3, r2, r3
 8009436:	08da      	lsrs	r2, r3, #3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800943c:	68f9      	ldr	r1, [r7, #12]
 800943e:	4b68      	ldr	r3, [pc, #416]	; (80095e0 <HAL_SAI_Init+0x2ec>)
 8009440:	fba3 2301 	umull	r2, r3, r3, r1
 8009444:	08da      	lsrs	r2, r3, #3
 8009446:	4613      	mov	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	4413      	add	r3, r2
 800944c:	005b      	lsls	r3, r3, #1
 800944e:	1aca      	subs	r2, r1, r3
 8009450:	2a08      	cmp	r2, #8
 8009452:	d904      	bls.n	800945e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a1b      	ldr	r3, [r3, #32]
 8009458:	1c5a      	adds	r2, r3, #1
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009462:	2b04      	cmp	r3, #4
 8009464:	d104      	bne.n	8009470 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	085a      	lsrs	r2, r3, #1
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d003      	beq.n	8009480 <HAL_SAI_Init+0x18c>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	2b02      	cmp	r3, #2
 800947e:	d109      	bne.n	8009494 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009484:	2b01      	cmp	r3, #1
 8009486:	d101      	bne.n	800948c <HAL_SAI_Init+0x198>
 8009488:	2300      	movs	r3, #0
 800948a:	e001      	b.n	8009490 <HAL_SAI_Init+0x19c>
 800948c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009490:	61bb      	str	r3, [r7, #24]
 8009492:	e008      	b.n	80094a6 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009498:	2b01      	cmp	r3, #1
 800949a:	d102      	bne.n	80094a2 <HAL_SAI_Init+0x1ae>
 800949c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094a0:	e000      	b.n	80094a4 <HAL_SAI_Init+0x1b0>
 80094a2:	2300      	movs	r3, #0
 80094a4:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	6819      	ldr	r1, [r3, #0]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	4b4c      	ldr	r3, [pc, #304]	; (80095e4 <HAL_SAI_Init+0x2f0>)
 80094b2:	400b      	ands	r3, r1
 80094b4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	6819      	ldr	r1, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685a      	ldr	r2, [r3, #4]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80094ca:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d0:	431a      	orrs	r2, r3
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 80094de:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80094ea:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a1b      	ldr	r3, [r3, #32]
 80094f0:	051b      	lsls	r3, r3, #20
 80094f2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	430a      	orrs	r2, r1
 80094fa:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6859      	ldr	r1, [r3, #4]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	4b38      	ldr	r3, [pc, #224]	; (80095e8 <HAL_SAI_Init+0x2f4>)
 8009508:	400b      	ands	r3, r1
 800950a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6859      	ldr	r1, [r3, #4]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	699a      	ldr	r2, [r3, #24]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951a:	431a      	orrs	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009520:	431a      	orrs	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	430a      	orrs	r2, r1
 8009528:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	6899      	ldr	r1, [r3, #8]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	4b2d      	ldr	r3, [pc, #180]	; (80095ec <HAL_SAI_Init+0x2f8>)
 8009536:	400b      	ands	r3, r1
 8009538:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	6899      	ldr	r1, [r3, #8]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009544:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800954a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8009550:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8009556:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800955c:	3b01      	subs	r3, #1
 800955e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009560:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	430a      	orrs	r2, r1
 8009568:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68d9      	ldr	r1, [r3, #12]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009578:	400b      	ands	r3, r1
 800957a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68d9      	ldr	r1, [r3, #12]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800958a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009590:	041b      	lsls	r3, r3, #16
 8009592:	431a      	orrs	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009598:	3b01      	subs	r3, #1
 800959a:	021b      	lsls	r3, r3, #8
 800959c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	430a      	orrs	r2, r1
 80095a4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3720      	adds	r7, #32
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	40015804 	.word	0x40015804
 80095cc:	40015824 	.word	0x40015824
 80095d0:	40015800 	.word	0x40015800
 80095d4:	40015c00 	.word	0x40015c00
 80095d8:	40015c04 	.word	0x40015c04
 80095dc:	40015c24 	.word	0x40015c24
 80095e0:	cccccccd 	.word	0xcccccccd
 80095e4:	ff05c010 	.word	0xff05c010
 80095e8:	ffff1ff0 	.word	0xffff1ff0
 80095ec:	fff88000 	.word	0xfff88000

080095f0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80095f8:	4b17      	ldr	r3, [pc, #92]	; (8009658 <SAI_Disable+0x68>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a17      	ldr	r2, [pc, #92]	; (800965c <SAI_Disable+0x6c>)
 80095fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009602:	0b1b      	lsrs	r3, r3, #12
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800961a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	1e5a      	subs	r2, r3, #1
 8009620:	60fa      	str	r2, [r7, #12]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d10a      	bne.n	800963c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800962c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8009636:	2303      	movs	r3, #3
 8009638:	72fb      	strb	r3, [r7, #11]
      break;
 800963a:	e006      	b.n	800964a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1e8      	bne.n	800961c <SAI_Disable+0x2c>

  return status;
 800964a:	7afb      	ldrb	r3, [r7, #11]
}
 800964c:	4618      	mov	r0, r3
 800964e:	3714      	adds	r7, #20
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr
 8009658:	20000000 	.word	0x20000000
 800965c:	95cbec1b 	.word	0x95cbec1b

08009660 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d101      	bne.n	8009672 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	e022      	b.n	80096b8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b00      	cmp	r3, #0
 800967c:	d105      	bne.n	800968a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7f8 ff0f 	bl	80024a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2203      	movs	r2, #3
 800968e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f814 	bl	80096c0 <HAL_SD_InitCard>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	e00a      	b.n	80096b8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80096c0:	b5b0      	push	{r4, r5, r7, lr}
 80096c2:	b08e      	sub	sp, #56	; 0x38
 80096c4:	af04      	add	r7, sp, #16
 80096c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80096c8:	2300      	movs	r3, #0
 80096ca:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80096cc:	2300      	movs	r3, #0
 80096ce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80096d0:	2300      	movs	r3, #0
 80096d2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80096d4:	2300      	movs	r3, #0
 80096d6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80096d8:	2300      	movs	r3, #0
 80096da:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80096dc:	2376      	movs	r3, #118	; 0x76
 80096de:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681d      	ldr	r5, [r3, #0]
 80096e4:	466c      	mov	r4, sp
 80096e6:	f107 0314 	add.w	r3, r7, #20
 80096ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80096ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80096f2:	f107 0308 	add.w	r3, r7, #8
 80096f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80096f8:	4628      	mov	r0, r5
 80096fa:	f003 f8a7 	bl	800c84c <SDMMC_Init>
 80096fe:	4603      	mov	r3, r0
 8009700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	e056      	b.n	80097be <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	685a      	ldr	r2, [r3, #4]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800971e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4618      	mov	r0, r3
 8009726:	f003 f8ca 	bl	800c8be <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	685a      	ldr	r2, [r3, #4]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009738:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fe10 	bl	800a360 <SD_PowerON>
 8009740:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009742:	6a3b      	ldr	r3, [r7, #32]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00b      	beq.n	8009760 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	431a      	orrs	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e02e      	b.n	80097be <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fd2f 	bl	800a1c4 <SD_InitCard>
 8009766:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009768:	6a3b      	ldr	r3, [r7, #32]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00b      	beq.n	8009786 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2201      	movs	r2, #1
 8009772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	431a      	orrs	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e01b      	b.n	80097be <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800978e:	4618      	mov	r0, r3
 8009790:	f003 f928 	bl	800c9e4 <SDMMC_CmdBlockLength>
 8009794:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009796:	6a3b      	ldr	r3, [r7, #32]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00f      	beq.n	80097bc <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a09      	ldr	r2, [pc, #36]	; (80097c8 <HAL_SD_InitCard+0x108>)
 80097a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097a8:	6a3b      	ldr	r3, [r7, #32]
 80097aa:	431a      	orrs	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e000      	b.n	80097be <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3728      	adds	r7, #40	; 0x28
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bdb0      	pop	{r4, r5, r7, pc}
 80097c6:	bf00      	nop
 80097c8:	004005ff 	.word	0x004005ff

080097cc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b08c      	sub	sp, #48	; 0x30
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]
 80097d8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d107      	bne.n	80097f4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	e0c3      	b.n	800997c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	f040 80bc 	bne.w	800997a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2200      	movs	r2, #0
 8009806:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	441a      	add	r2, r3
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009812:	429a      	cmp	r2, r3
 8009814:	d907      	bls.n	8009826 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e0aa      	b.n	800997c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2203      	movs	r2, #3
 800982a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2200      	movs	r2, #0
 8009834:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009844:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800984a:	4a4e      	ldr	r2, [pc, #312]	; (8009984 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800984c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009852:	4a4d      	ldr	r2, [pc, #308]	; (8009988 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009854:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985a:	2200      	movs	r2, #0
 800985c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009862:	2200      	movs	r2, #0
 8009864:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009876:	689a      	ldr	r2, [r3, #8]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	430a      	orrs	r2, r1
 8009880:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	3380      	adds	r3, #128	; 0x80
 800988c:	4619      	mov	r1, r3
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	025b      	lsls	r3, r3, #9
 8009894:	089b      	lsrs	r3, r3, #2
 8009896:	f7fa f8fb 	bl	8003a90 <HAL_DMA_Start_IT>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d017      	beq.n	80098d0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80098ae:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a35      	ldr	r2, [pc, #212]	; (800998c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80098b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e055      	b.n	800997c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f042 0208 	orr.w	r2, r2, #8
 80098de:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d002      	beq.n	80098ee <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80098e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ea:	025b      	lsls	r3, r3, #9
 80098ec:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80098ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098f2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	025b      	lsls	r3, r3, #9
 80098f8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80098fa:	2390      	movs	r3, #144	; 0x90
 80098fc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80098fe:	2302      	movs	r3, #2
 8009900:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009902:	2300      	movs	r3, #0
 8009904:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009906:	2301      	movs	r3, #1
 8009908:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f107 0210 	add.w	r2, r7, #16
 8009912:	4611      	mov	r1, r2
 8009914:	4618      	mov	r0, r3
 8009916:	f003 f839 	bl	800c98c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d90a      	bls.n	8009936 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2282      	movs	r2, #130	; 0x82
 8009924:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800992c:	4618      	mov	r0, r3
 800992e:	f003 f89d 	bl	800ca6c <SDMMC_CmdReadMultiBlock>
 8009932:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009934:	e009      	b.n	800994a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2281      	movs	r2, #129	; 0x81
 800993a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009942:	4618      	mov	r0, r3
 8009944:	f003 f870 	bl	800ca28 <SDMMC_CmdReadSingleBlock>
 8009948:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800994a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994c:	2b00      	cmp	r3, #0
 800994e:	d012      	beq.n	8009976 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a0d      	ldr	r2, [pc, #52]	; (800998c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009956:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800995c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995e:	431a      	orrs	r2, r3
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2201      	movs	r2, #1
 8009968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e002      	b.n	800997c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	e000      	b.n	800997c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800997a:	2302      	movs	r3, #2
  }
}
 800997c:	4618      	mov	r0, r3
 800997e:	3730      	adds	r7, #48	; 0x30
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	0800a0af 	.word	0x0800a0af
 8009988:	0800a121 	.word	0x0800a121
 800998c:	004005ff 	.word	0x004005ff

08009990 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b08c      	sub	sp, #48	; 0x30
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
 800999c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d107      	bne.n	80099b8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	e0c6      	b.n	8009b46 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	f040 80bf 	bne.w	8009b44 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80099cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	441a      	add	r2, r3
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d907      	bls.n	80099ea <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e0ad      	b.n	8009b46 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2203      	movs	r2, #3
 80099ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2200      	movs	r2, #0
 80099f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f042 021a 	orr.w	r2, r2, #26
 8009a08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a0e:	4a50      	ldr	r2, [pc, #320]	; (8009b50 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8009a10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a16:	4a4f      	ldr	r2, [pc, #316]	; (8009b54 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8009a18:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a1e:	2200      	movs	r2, #0
 8009a20:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d002      	beq.n	8009a30 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2c:	025b      	lsls	r3, r3, #9
 8009a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d90a      	bls.n	8009a4c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	22a0      	movs	r2, #160	; 0xa0
 8009a3a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a42:	4618      	mov	r0, r3
 8009a44:	f003 f856 	bl	800caf4 <SDMMC_CmdWriteMultiBlock>
 8009a48:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009a4a:	e009      	b.n	8009a60 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2290      	movs	r2, #144	; 0x90
 8009a50:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f003 f829 	bl	800cab0 <SDMMC_CmdWriteSingleBlock>
 8009a5e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d012      	beq.n	8009a8c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a3b      	ldr	r2, [pc, #236]	; (8009b58 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009a6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a74:	431a      	orrs	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e05c      	b.n	8009b46 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f042 0208 	orr.w	r2, r2, #8
 8009a9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aa0:	2240      	movs	r2, #64	; 0x40
 8009aa2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ab4:	689a      	ldr	r2, [r3, #8]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	430a      	orrs	r2, r1
 8009abe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009ac4:	68b9      	ldr	r1, [r7, #8]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	3380      	adds	r3, #128	; 0x80
 8009acc:	461a      	mov	r2, r3
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	025b      	lsls	r3, r3, #9
 8009ad2:	089b      	lsrs	r3, r3, #2
 8009ad4:	f7f9 ffdc 	bl	8003a90 <HAL_DMA_Start_IT>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d01a      	beq.n	8009b14 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f022 021a 	bic.w	r2, r2, #26
 8009aec:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a19      	ldr	r2, [pc, #100]	; (8009b58 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009af4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e018      	b.n	8009b46 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b18:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	025b      	lsls	r3, r3, #9
 8009b1e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009b20:	2390      	movs	r3, #144	; 0x90
 8009b22:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009b24:	2300      	movs	r3, #0
 8009b26:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f107 0210 	add.w	r2, r7, #16
 8009b38:	4611      	mov	r1, r2
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f002 ff26 	bl	800c98c <SDMMC_ConfigData>

      return HAL_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	e000      	b.n	8009b46 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009b44:	2302      	movs	r3, #2
  }
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3730      	adds	r7, #48	; 0x30
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	0800a085 	.word	0x0800a085
 8009b54:	0800a121 	.word	0x0800a121
 8009b58:	004005ff 	.word	0x004005ff

08009b5c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009b64:	bf00      	nop
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b7e:	0f9b      	lsrs	r3, r3, #30
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b8a:	0e9b      	lsrs	r3, r3, #26
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	f003 030f 	and.w	r3, r3, #15
 8009b92:	b2da      	uxtb	r2, r3
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b9c:	0e1b      	lsrs	r3, r3, #24
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	f003 0303 	and.w	r3, r3, #3
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bae:	0c1b      	lsrs	r3, r3, #16
 8009bb0:	b2da      	uxtb	r2, r3
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bba:	0a1b      	lsrs	r3, r3, #8
 8009bbc:	b2da      	uxtb	r2, r3
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bd0:	0d1b      	lsrs	r3, r3, #20
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bdc:	0c1b      	lsrs	r3, r3, #16
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	f003 030f 	and.w	r3, r3, #15
 8009be4:	b2da      	uxtb	r2, r3
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bee:	0bdb      	lsrs	r3, r3, #15
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c00:	0b9b      	lsrs	r3, r3, #14
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	f003 0301 	and.w	r3, r3, #1
 8009c08:	b2da      	uxtb	r2, r3
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c12:	0b5b      	lsrs	r3, r3, #13
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	f003 0301 	and.w	r3, r3, #1
 8009c1a:	b2da      	uxtb	r2, r3
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c24:	0b1b      	lsrs	r3, r3, #12
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	f003 0301 	and.w	r3, r3, #1
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	2200      	movs	r2, #0
 8009c36:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d163      	bne.n	8009d08 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c44:	009a      	lsls	r2, r3, #2
 8009c46:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009c50:	0f92      	lsrs	r2, r2, #30
 8009c52:	431a      	orrs	r2, r3
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c5c:	0edb      	lsrs	r3, r3, #27
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	f003 0307 	and.w	r3, r3, #7
 8009c64:	b2da      	uxtb	r2, r3
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c6e:	0e1b      	lsrs	r3, r3, #24
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	f003 0307 	and.w	r3, r3, #7
 8009c76:	b2da      	uxtb	r2, r3
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c80:	0d5b      	lsrs	r3, r3, #21
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	f003 0307 	and.w	r3, r3, #7
 8009c88:	b2da      	uxtb	r2, r3
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c92:	0c9b      	lsrs	r3, r3, #18
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	f003 0307 	and.w	r3, r3, #7
 8009c9a:	b2da      	uxtb	r2, r3
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ca4:	0bdb      	lsrs	r3, r3, #15
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	f003 0307 	and.w	r3, r3, #7
 8009cac:	b2da      	uxtb	r2, r3
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	1c5a      	adds	r2, r3, #1
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	7e1b      	ldrb	r3, [r3, #24]
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	f003 0307 	and.w	r3, r3, #7
 8009cc6:	3302      	adds	r3, #2
 8009cc8:	2201      	movs	r2, #1
 8009cca:	fa02 f303 	lsl.w	r3, r2, r3
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009cd2:	fb03 f202 	mul.w	r2, r3, r2
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	7a1b      	ldrb	r3, [r3, #8]
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	f003 030f 	and.w	r3, r3, #15
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	409a      	lsls	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009cf4:	0a52      	lsrs	r2, r2, #9
 8009cf6:	fb03 f202 	mul.w	r2, r3, r2
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d04:	661a      	str	r2, [r3, #96]	; 0x60
 8009d06:	e031      	b.n	8009d6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d11d      	bne.n	8009d4c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d14:	041b      	lsls	r3, r3, #16
 8009d16:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d1e:	0c1b      	lsrs	r3, r3, #16
 8009d20:	431a      	orrs	r2, r3
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	029a      	lsls	r2, r3, #10
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d40:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	661a      	str	r2, [r3, #96]	; 0x60
 8009d4a:	e00f      	b.n	8009d6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a58      	ldr	r2, [pc, #352]	; (8009eb4 <HAL_SD_GetCardCSD+0x344>)
 8009d52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e09d      	b.n	8009ea8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d70:	0b9b      	lsrs	r3, r3, #14
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	f003 0301 	and.w	r3, r3, #1
 8009d78:	b2da      	uxtb	r2, r3
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d82:	09db      	lsrs	r3, r3, #7
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009da4:	0fdb      	lsrs	r3, r3, #31
 8009da6:	b2da      	uxtb	r2, r3
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009db0:	0f5b      	lsrs	r3, r3, #29
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	f003 0303 	and.w	r3, r3, #3
 8009db8:	b2da      	uxtb	r2, r3
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dc2:	0e9b      	lsrs	r3, r3, #26
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	f003 0307 	and.w	r3, r3, #7
 8009dca:	b2da      	uxtb	r2, r3
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dd4:	0d9b      	lsrs	r3, r3, #22
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	f003 030f 	and.w	r3, r3, #15
 8009ddc:	b2da      	uxtb	r2, r3
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009de6:	0d5b      	lsrs	r3, r3, #21
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	f003 0301 	and.w	r3, r3, #1
 8009dee:	b2da      	uxtb	r2, r3
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e02:	0c1b      	lsrs	r3, r3, #16
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	f003 0301 	and.w	r3, r3, #1
 8009e0a:	b2da      	uxtb	r2, r3
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e16:	0bdb      	lsrs	r3, r3, #15
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	f003 0301 	and.w	r3, r3, #1
 8009e1e:	b2da      	uxtb	r2, r3
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e2a:	0b9b      	lsrs	r3, r3, #14
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	f003 0301 	and.w	r3, r3, #1
 8009e32:	b2da      	uxtb	r2, r3
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e3e:	0b5b      	lsrs	r3, r3, #13
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	f003 0301 	and.w	r3, r3, #1
 8009e46:	b2da      	uxtb	r2, r3
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e52:	0b1b      	lsrs	r3, r3, #12
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	f003 0301 	and.w	r3, r3, #1
 8009e5a:	b2da      	uxtb	r2, r3
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e66:	0a9b      	lsrs	r3, r3, #10
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	f003 0303 	and.w	r3, r3, #3
 8009e6e:	b2da      	uxtb	r2, r3
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e7a:	0a1b      	lsrs	r3, r3, #8
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	f003 0303 	and.w	r3, r3, #3
 8009e82:	b2da      	uxtb	r2, r3
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e8e:	085b      	lsrs	r3, r3, #1
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	004005ff 	.word	0x004005ff

08009eb8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009f10:	b5b0      	push	{r4, r5, r7, lr}
 8009f12:	b08e      	sub	sp, #56	; 0x38
 8009f14:	af04      	add	r7, sp, #16
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2203      	movs	r2, #3
 8009f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f2c:	2b03      	cmp	r3, #3
 8009f2e:	d02e      	beq.n	8009f8e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f36:	d106      	bne.n	8009f46 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	639a      	str	r2, [r3, #56]	; 0x38
 8009f44:	e029      	b.n	8009f9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f4c:	d10a      	bne.n	8009f64 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fabc 	bl	800a4cc <SD_WideBus_Enable>
 8009f54:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f5a:	6a3b      	ldr	r3, [r7, #32]
 8009f5c:	431a      	orrs	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	639a      	str	r2, [r3, #56]	; 0x38
 8009f62:	e01a      	b.n	8009f9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10a      	bne.n	8009f80 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 faf9 	bl	800a562 <SD_WideBus_Disable>
 8009f70:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f76:	6a3b      	ldr	r3, [r7, #32]
 8009f78:	431a      	orrs	r2, r3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	639a      	str	r2, [r3, #56]	; 0x38
 8009f7e:	e00c      	b.n	8009f9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f84:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	639a      	str	r2, [r3, #56]	; 0x38
 8009f8c:	e005      	b.n	8009f9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f92:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d00b      	beq.n	8009fba <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a26      	ldr	r2, [pc, #152]	; (800a040 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009fa8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2201      	movs	r2, #1
 8009fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009fb8:	e01f      	b.n	8009ffa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	695b      	ldr	r3, [r3, #20]
 8009fd4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	699b      	ldr	r3, [r3, #24]
 8009fda:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681d      	ldr	r5, [r3, #0]
 8009fe0:	466c      	mov	r4, sp
 8009fe2:	f107 0314 	add.w	r3, r7, #20
 8009fe6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009fea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009fee:	f107 0308 	add.w	r3, r7, #8
 8009ff2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	f002 fc29 	bl	800c84c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a002:	4618      	mov	r0, r3
 800a004:	f002 fcee 	bl	800c9e4 <SDMMC_CmdBlockLength>
 800a008:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a00a:	6a3b      	ldr	r3, [r7, #32]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d00c      	beq.n	800a02a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a0a      	ldr	r2, [pc, #40]	; (800a040 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a016:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a01c:	6a3b      	ldr	r3, [r7, #32]
 800a01e:	431a      	orrs	r2, r3
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800a032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a036:	4618      	mov	r0, r3
 800a038:	3728      	adds	r7, #40	; 0x28
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bdb0      	pop	{r4, r5, r7, pc}
 800a03e:	bf00      	nop
 800a040:	004005ff 	.word	0x004005ff

0800a044 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a04c:	2300      	movs	r3, #0
 800a04e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a050:	f107 030c 	add.w	r3, r7, #12
 800a054:	4619      	mov	r1, r3
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 fa10 	bl	800a47c <SD_SendStatus>
 800a05c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d005      	beq.n	800a070 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	431a      	orrs	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	0a5b      	lsrs	r3, r3, #9
 800a074:	f003 030f 	and.w	r3, r3, #15
 800a078:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a07a:	693b      	ldr	r3, [r7, #16]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3718      	adds	r7, #24
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a084:	b480      	push	{r7}
 800a086:	b085      	sub	sp, #20
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a090:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0a0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a0a2:	bf00      	nop
 800a0a4:	3714      	adds	r7, #20
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b084      	sub	sp, #16
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ba:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c0:	2b82      	cmp	r3, #130	; 0x82
 800a0c2:	d111      	bne.n	800a0e8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f002 fd35 	bl	800cb38 <SDMMC_CmdStopTransfer>
 800a0ce:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d008      	beq.n	800a0e8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	431a      	orrs	r2, r3
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f7ff fd3a 	bl	8009b5c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f022 0208 	bic.w	r2, r2, #8
 800a0f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f240 523a 	movw	r2, #1338	; 0x53a
 800a100:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2201      	movs	r2, #1
 800a106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f004 f8e1 	bl	800e2d8 <HAL_SD_RxCpltCallback>
#endif
}
 800a116:	bf00      	nop
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
	...

0800a120 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f7f9 fd0e 	bl	8003b50 <HAL_DMA_GetError>
 800a134:	4603      	mov	r3, r0
 800a136:	2b02      	cmp	r3, #2
 800a138:	d03e      	beq.n	800a1b8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a140:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a148:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d002      	beq.n	800a156 <SD_DMAError+0x36>
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2b01      	cmp	r3, #1
 800a154:	d12d      	bne.n	800a1b2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a19      	ldr	r2, [pc, #100]	; (800a1c0 <SD_DMAError+0xa0>)
 800a15c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a16c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a172:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a17a:	6978      	ldr	r0, [r7, #20]
 800a17c:	f7ff ff62 	bl	800a044 <HAL_SD_GetCardState>
 800a180:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	2b06      	cmp	r3, #6
 800a186:	d002      	beq.n	800a18e <SD_DMAError+0x6e>
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	2b05      	cmp	r3, #5
 800a18c:	d10a      	bne.n	800a1a4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4618      	mov	r0, r3
 800a194:	f002 fcd0 	bl	800cb38 <SDMMC_CmdStopTransfer>
 800a198:	4602      	mov	r2, r0
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a19e:	431a      	orrs	r2, r3
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800a1b2:	6978      	ldr	r0, [r7, #20]
 800a1b4:	f7ff fcd2 	bl	8009b5c <HAL_SD_ErrorCallback>
#endif
  }
}
 800a1b8:	bf00      	nop
 800a1ba:	3718      	adds	r7, #24
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	004005ff 	.word	0x004005ff

0800a1c4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a1c4:	b5b0      	push	{r4, r5, r7, lr}
 800a1c6:	b094      	sub	sp, #80	; 0x50
 800a1c8:	af04      	add	r7, sp, #16
 800a1ca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f002 fb81 	bl	800c8dc <SDMMC_GetPowerState>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d102      	bne.n	800a1e6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a1e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a1e4:	e0b8      	b.n	800a358 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ea:	2b03      	cmp	r3, #3
 800a1ec:	d02f      	beq.n	800a24e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f002 fdab 	bl	800cd4e <SDMMC_CmdSendCID>
 800a1f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d001      	beq.n	800a204 <SD_InitCard+0x40>
    {
      return errorstate;
 800a200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a202:	e0a9      	b.n	800a358 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2100      	movs	r1, #0
 800a20a:	4618      	mov	r0, r3
 800a20c:	f002 fbab 	bl	800c966 <SDMMC_GetResponse>
 800a210:	4602      	mov	r2, r0
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2104      	movs	r1, #4
 800a21c:	4618      	mov	r0, r3
 800a21e:	f002 fba2 	bl	800c966 <SDMMC_GetResponse>
 800a222:	4602      	mov	r2, r0
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2108      	movs	r1, #8
 800a22e:	4618      	mov	r0, r3
 800a230:	f002 fb99 	bl	800c966 <SDMMC_GetResponse>
 800a234:	4602      	mov	r2, r0
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	210c      	movs	r1, #12
 800a240:	4618      	mov	r0, r3
 800a242:	f002 fb90 	bl	800c966 <SDMMC_GetResponse>
 800a246:	4602      	mov	r2, r0
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a252:	2b03      	cmp	r3, #3
 800a254:	d00d      	beq.n	800a272 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f107 020e 	add.w	r2, r7, #14
 800a25e:	4611      	mov	r1, r2
 800a260:	4618      	mov	r0, r3
 800a262:	f002 fdb1 	bl	800cdc8 <SDMMC_CmdSetRelAdd>
 800a266:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <SD_InitCard+0xae>
    {
      return errorstate;
 800a26e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a270:	e072      	b.n	800a358 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a276:	2b03      	cmp	r3, #3
 800a278:	d036      	beq.n	800a2e8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a27a:	89fb      	ldrh	r3, [r7, #14]
 800a27c:	461a      	mov	r2, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a28a:	041b      	lsls	r3, r3, #16
 800a28c:	4619      	mov	r1, r3
 800a28e:	4610      	mov	r0, r2
 800a290:	f002 fd7b 	bl	800cd8a <SDMMC_CmdSendCSD>
 800a294:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d001      	beq.n	800a2a0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a29e:	e05b      	b.n	800a358 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f002 fb5d 	bl	800c966 <SDMMC_GetResponse>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	2104      	movs	r1, #4
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f002 fb54 	bl	800c966 <SDMMC_GetResponse>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2108      	movs	r1, #8
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f002 fb4b 	bl	800c966 <SDMMC_GetResponse>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	210c      	movs	r1, #12
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f002 fb42 	bl	800c966 <SDMMC_GetResponse>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2104      	movs	r1, #4
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f002 fb39 	bl	800c966 <SDMMC_GetResponse>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	0d1a      	lsrs	r2, r3, #20
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a2fc:	f107 0310 	add.w	r3, r7, #16
 800a300:	4619      	mov	r1, r3
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f7ff fc34 	bl	8009b70 <HAL_SD_GetCardCSD>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d002      	beq.n	800a314 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a30e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a312:	e021      	b.n	800a358 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6819      	ldr	r1, [r3, #0]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a31c:	041b      	lsls	r3, r3, #16
 800a31e:	2200      	movs	r2, #0
 800a320:	461c      	mov	r4, r3
 800a322:	4615      	mov	r5, r2
 800a324:	4622      	mov	r2, r4
 800a326:	462b      	mov	r3, r5
 800a328:	4608      	mov	r0, r1
 800a32a:	f002 fc27 	bl	800cb7c <SDMMC_CmdSelDesel>
 800a32e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a332:	2b00      	cmp	r3, #0
 800a334:	d001      	beq.n	800a33a <SD_InitCard+0x176>
  {
    return errorstate;
 800a336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a338:	e00e      	b.n	800a358 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681d      	ldr	r5, [r3, #0]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	466c      	mov	r4, sp
 800a342:	f103 0210 	add.w	r2, r3, #16
 800a346:	ca07      	ldmia	r2, {r0, r1, r2}
 800a348:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a34c:	3304      	adds	r3, #4
 800a34e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a350:	4628      	mov	r0, r5
 800a352:	f002 fa7b 	bl	800c84c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3740      	adds	r7, #64	; 0x40
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bdb0      	pop	{r4, r5, r7, pc}

0800a360 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b086      	sub	sp, #24
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a368:	2300      	movs	r3, #0
 800a36a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a36c:	2300      	movs	r3, #0
 800a36e:	617b      	str	r3, [r7, #20]
 800a370:	2300      	movs	r3, #0
 800a372:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4618      	mov	r0, r3
 800a37a:	f002 fc22 	bl	800cbc2 <SDMMC_CmdGoIdleState>
 800a37e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <SD_PowerON+0x2a>
  {
    return errorstate;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	e072      	b.n	800a470 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4618      	mov	r0, r3
 800a390:	f002 fc35 	bl	800cbfe <SDMMC_CmdOperCond>
 800a394:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00d      	beq.n	800a3b8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f002 fc0b 	bl	800cbc2 <SDMMC_CmdGoIdleState>
 800a3ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d004      	beq.n	800a3be <SD_PowerON+0x5e>
    {
      return errorstate;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	e05b      	b.n	800a470 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d137      	bne.n	800a436 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2100      	movs	r1, #0
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f002 fc35 	bl	800cc3c <SDMMC_CmdAppCommand>
 800a3d2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d02d      	beq.n	800a436 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a3de:	e047      	b.n	800a470 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2100      	movs	r1, #0
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f002 fc28 	bl	800cc3c <SDMMC_CmdAppCommand>
 800a3ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d001      	beq.n	800a3f8 <SD_PowerON+0x98>
    {
      return errorstate;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	e03b      	b.n	800a470 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	491e      	ldr	r1, [pc, #120]	; (800a478 <SD_PowerON+0x118>)
 800a3fe:	4618      	mov	r0, r3
 800a400:	f002 fc3e 	bl	800cc80 <SDMMC_CmdAppOperCommand>
 800a404:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d002      	beq.n	800a412 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a40c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a410:	e02e      	b.n	800a470 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2100      	movs	r1, #0
 800a418:	4618      	mov	r0, r3
 800a41a:	f002 faa4 	bl	800c966 <SDMMC_GetResponse>
 800a41e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	0fdb      	lsrs	r3, r3, #31
 800a424:	2b01      	cmp	r3, #1
 800a426:	d101      	bne.n	800a42c <SD_PowerON+0xcc>
 800a428:	2301      	movs	r3, #1
 800a42a:	e000      	b.n	800a42e <SD_PowerON+0xce>
 800a42c:	2300      	movs	r3, #0
 800a42e:	613b      	str	r3, [r7, #16]

    count++;
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	3301      	adds	r3, #1
 800a434:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d802      	bhi.n	800a446 <SD_PowerON+0xe6>
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d0cc      	beq.n	800a3e0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d902      	bls.n	800a456 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a450:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a454:	e00c      	b.n	800a470 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d003      	beq.n	800a468 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2201      	movs	r2, #1
 800a464:	645a      	str	r2, [r3, #68]	; 0x44
 800a466:	e002      	b.n	800a46e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a46e:	2300      	movs	r3, #0
}
 800a470:	4618      	mov	r0, r3
 800a472:	3718      	adds	r7, #24
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	c1100000 	.word	0xc1100000

0800a47c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d102      	bne.n	800a492 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a48c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a490:	e018      	b.n	800a4c4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a49a:	041b      	lsls	r3, r3, #16
 800a49c:	4619      	mov	r1, r3
 800a49e:	4610      	mov	r0, r2
 800a4a0:	f002 fcb3 	bl	800ce0a <SDMMC_CmdSendStatus>
 800a4a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d001      	beq.n	800a4b0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	e009      	b.n	800a4c4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2100      	movs	r1, #0
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f002 fa55 	bl	800c966 <SDMMC_GetResponse>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b086      	sub	sp, #24
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	60fb      	str	r3, [r7, #12]
 800a4d8:	2300      	movs	r3, #0
 800a4da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f002 fa3f 	bl	800c966 <SDMMC_GetResponse>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4f2:	d102      	bne.n	800a4fa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a4f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4f8:	e02f      	b.n	800a55a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a4fa:	f107 030c 	add.w	r3, r7, #12
 800a4fe:	4619      	mov	r1, r3
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 f879 	bl	800a5f8 <SD_FindSCR>
 800a506:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	e023      	b.n	800a55a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d01c      	beq.n	800a556 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a524:	041b      	lsls	r3, r3, #16
 800a526:	4619      	mov	r1, r3
 800a528:	4610      	mov	r0, r2
 800a52a:	f002 fb87 	bl	800cc3c <SDMMC_CmdAppCommand>
 800a52e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d001      	beq.n	800a53a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	e00f      	b.n	800a55a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2102      	movs	r1, #2
 800a540:	4618      	mov	r0, r3
 800a542:	f002 fbc1 	bl	800ccc8 <SDMMC_CmdBusWidth>
 800a546:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d001      	beq.n	800a552 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	e003      	b.n	800a55a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a552:	2300      	movs	r3, #0
 800a554:	e001      	b.n	800a55a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a556:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3718      	adds	r7, #24
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b086      	sub	sp, #24
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a56a:	2300      	movs	r3, #0
 800a56c:	60fb      	str	r3, [r7, #12]
 800a56e:	2300      	movs	r3, #0
 800a570:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2100      	movs	r1, #0
 800a578:	4618      	mov	r0, r3
 800a57a:	f002 f9f4 	bl	800c966 <SDMMC_GetResponse>
 800a57e:	4603      	mov	r3, r0
 800a580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a588:	d102      	bne.n	800a590 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a58a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a58e:	e02f      	b.n	800a5f0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a590:	f107 030c 	add.w	r3, r7, #12
 800a594:	4619      	mov	r1, r3
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 f82e 	bl	800a5f8 <SD_FindSCR>
 800a59c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	e023      	b.n	800a5f0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d01c      	beq.n	800a5ec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5ba:	041b      	lsls	r3, r3, #16
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4610      	mov	r0, r2
 800a5c0:	f002 fb3c 	bl	800cc3c <SDMMC_CmdAppCommand>
 800a5c4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d001      	beq.n	800a5d0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	e00f      	b.n	800a5f0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f002 fb76 	bl	800ccc8 <SDMMC_CmdBusWidth>
 800a5dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d001      	beq.n	800a5e8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	e003      	b.n	800a5f0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	e001      	b.n	800a5f0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a5ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3718      	adds	r7, #24
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a5f8:	b590      	push	{r4, r7, lr}
 800a5fa:	b08f      	sub	sp, #60	; 0x3c
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a602:	f7f8 fc3b 	bl	8002e7c <HAL_GetTick>
 800a606:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a608:	2300      	movs	r3, #0
 800a60a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a60c:	2300      	movs	r3, #0
 800a60e:	60bb      	str	r3, [r7, #8]
 800a610:	2300      	movs	r3, #0
 800a612:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2108      	movs	r1, #8
 800a61e:	4618      	mov	r0, r3
 800a620:	f002 f9e0 	bl	800c9e4 <SDMMC_CmdBlockLength>
 800a624:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d001      	beq.n	800a630 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62e:	e0b2      	b.n	800a796 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a638:	041b      	lsls	r3, r3, #16
 800a63a:	4619      	mov	r1, r3
 800a63c:	4610      	mov	r0, r2
 800a63e:	f002 fafd 	bl	800cc3c <SDMMC_CmdAppCommand>
 800a642:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a646:	2b00      	cmp	r3, #0
 800a648:	d001      	beq.n	800a64e <SD_FindSCR+0x56>
  {
    return errorstate;
 800a64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64c:	e0a3      	b.n	800a796 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a64e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a652:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a654:	2308      	movs	r3, #8
 800a656:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a658:	2330      	movs	r3, #48	; 0x30
 800a65a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a65c:	2302      	movs	r3, #2
 800a65e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a660:	2300      	movs	r3, #0
 800a662:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a664:	2301      	movs	r3, #1
 800a666:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f107 0210 	add.w	r2, r7, #16
 800a670:	4611      	mov	r1, r2
 800a672:	4618      	mov	r0, r3
 800a674:	f002 f98a 	bl	800c98c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f002 fb45 	bl	800cd0c <SDMMC_CmdSendSCR>
 800a682:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a686:	2b00      	cmp	r3, #0
 800a688:	d02a      	beq.n	800a6e0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68c:	e083      	b.n	800a796 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00f      	beq.n	800a6bc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6819      	ldr	r1, [r3, #0]
 800a6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	f107 0208 	add.w	r2, r7, #8
 800a6a8:	18d4      	adds	r4, r2, r3
 800a6aa:	4608      	mov	r0, r1
 800a6ac:	f002 f8fa 	bl	800c8a4 <SDMMC_ReadFIFO>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	6023      	str	r3, [r4, #0]
      index++;
 800a6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	637b      	str	r3, [r7, #52]	; 0x34
 800a6ba:	e006      	b.n	800a6ca <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d012      	beq.n	800a6f0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a6ca:	f7f8 fbd7 	bl	8002e7c <HAL_GetTick>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6d8:	d102      	bne.n	800a6e0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a6da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a6de:	e05a      	b.n	800a796 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d0cf      	beq.n	800a68e <SD_FindSCR+0x96>
 800a6ee:	e000      	b.n	800a6f2 <SD_FindSCR+0xfa>
      break;
 800a6f0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6f8:	f003 0308 	and.w	r3, r3, #8
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d005      	beq.n	800a70c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2208      	movs	r2, #8
 800a706:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a708:	2308      	movs	r3, #8
 800a70a:	e044      	b.n	800a796 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a712:	f003 0302 	and.w	r3, r3, #2
 800a716:	2b00      	cmp	r3, #0
 800a718:	d005      	beq.n	800a726 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2202      	movs	r2, #2
 800a720:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a722:	2302      	movs	r3, #2
 800a724:	e037      	b.n	800a796 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a72c:	f003 0320 	and.w	r3, r3, #32
 800a730:	2b00      	cmp	r3, #0
 800a732:	d005      	beq.n	800a740 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	2220      	movs	r2, #32
 800a73a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a73c:	2320      	movs	r3, #32
 800a73e:	e02a      	b.n	800a796 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f240 523a 	movw	r2, #1338	; 0x53a
 800a748:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	061a      	lsls	r2, r3, #24
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	021b      	lsls	r3, r3, #8
 800a752:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a756:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	0a1b      	lsrs	r3, r3, #8
 800a75c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a760:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	0e1b      	lsrs	r3, r3, #24
 800a766:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a76a:	601a      	str	r2, [r3, #0]
    scr++;
 800a76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a76e:	3304      	adds	r3, #4
 800a770:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	061a      	lsls	r2, r3, #24
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	021b      	lsls	r3, r3, #8
 800a77a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a77e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	0a1b      	lsrs	r3, r3, #8
 800a784:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a788:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	0e1b      	lsrs	r3, r3, #24
 800a78e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a792:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	373c      	adds	r7, #60	; 0x3c
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd90      	pop	{r4, r7, pc}

0800a79e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b082      	sub	sp, #8
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
 800a7a6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d101      	bne.n	800a7b2 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e025      	b.n	800a7fe <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d106      	bne.n	800a7cc <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f7f8 f9ae 	bl	8002b28 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2202      	movs	r2, #2
 800a7d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	3304      	adds	r3, #4
 800a7dc:	4619      	mov	r1, r3
 800a7de:	4610      	mov	r0, r2
 800a7e0:	f001 ff0a 	bl	800c5f8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6818      	ldr	r0, [r3, #0]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	6839      	ldr	r1, [r7, #0]
 800a7f0:	f001 ff74 	bl	800c6dc <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3708      	adds	r7, #8
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b084      	sub	sp, #16
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	60f8      	str	r0, [r7, #12]
 800a80e:	60b9      	str	r1, [r7, #8]
 800a810:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	2b02      	cmp	r3, #2
 800a81c:	d101      	bne.n	800a822 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800a81e:	2302      	movs	r3, #2
 800a820:	e018      	b.n	800a854 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2202      	movs	r2, #2
 800a826:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	68b9      	ldr	r1, [r7, #8]
 800a832:	4618      	mov	r0, r3
 800a834:	f001 ffd2 	bl	800c7dc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	d104      	bne.n	800a84a <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2205      	movs	r2, #5
 800a844:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800a848:	e003      	b.n	800a852 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2201      	movs	r2, #1
 800a84e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d101      	bne.n	800a876 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a872:	2302      	movs	r3, #2
 800a874:	e00e      	b.n	800a894 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2202      	movs	r2, #2
 800a87a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	4618      	mov	r0, r3
 800a886:	f001 ffcd 	bl	800c824 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2201      	movs	r2, #1
 800a88e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d101      	bne.n	800a8ae <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e04c      	b.n	800a948 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d106      	bne.n	800a8c8 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f7f7 fe52 	bl	800256c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2202      	movs	r2, #2
 800a8cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f022 0203 	bic.w	r2, r2, #3
 800a8de:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	4b19      	ldr	r3, [pc, #100]	; (800a950 <HAL_SPDIFRX_Init+0xb4>)
 800a8ec:	4013      	ands	r3, r2
 800a8ee:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a8f8:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a8fe:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a904:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a90a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a910:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a916:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a91c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800a922:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800a928:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	4313      	orrs	r3, r2
 800a92e:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2201      	movs	r2, #1
 800a942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	fff88407 	.word	0xfff88407

0800a954 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d101      	bne.n	800a966 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	e09d      	b.n	800aaa2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d108      	bne.n	800a980 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a976:	d009      	beq.n	800a98c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	61da      	str	r2, [r3, #28]
 800a97e:	e005      	b.n	800a98c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d106      	bne.n	800a9ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f7f7 fe22 	bl	80025f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2202      	movs	r2, #2
 800a9b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a9cc:	d902      	bls.n	800a9d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	60fb      	str	r3, [r7, #12]
 800a9d2:	e002      	b.n	800a9da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a9d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a9e2:	d007      	beq.n	800a9f4 <HAL_SPI_Init+0xa0>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a9ec:	d002      	beq.n	800a9f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800aa04:	431a      	orrs	r2, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	f003 0302 	and.w	r3, r3, #2
 800aa0e:	431a      	orrs	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	695b      	ldr	r3, [r3, #20]
 800aa14:	f003 0301 	and.w	r3, r3, #1
 800aa18:	431a      	orrs	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	699b      	ldr	r3, [r3, #24]
 800aa1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa22:	431a      	orrs	r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	69db      	ldr	r3, [r3, #28]
 800aa28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa2c:	431a      	orrs	r2, r3
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6a1b      	ldr	r3, [r3, #32]
 800aa32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa36:	ea42 0103 	orr.w	r1, r2, r3
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	430a      	orrs	r2, r1
 800aa48:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	699b      	ldr	r3, [r3, #24]
 800aa4e:	0c1b      	lsrs	r3, r3, #16
 800aa50:	f003 0204 	and.w	r2, r3, #4
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa58:	f003 0310 	and.w	r3, r3, #16
 800aa5c:	431a      	orrs	r2, r3
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa62:	f003 0308 	and.w	r3, r3, #8
 800aa66:	431a      	orrs	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800aa70:	ea42 0103 	orr.w	r1, r2, r3
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	430a      	orrs	r2, r1
 800aa80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	69da      	ldr	r2, [r3, #28]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aa90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b082      	sub	sp, #8
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d101      	bne.n	800aabc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aab8:	2301      	movs	r3, #1
 800aaba:	e049      	b.n	800ab50 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d106      	bne.n	800aad6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f7f7 fdef 	bl	80026b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2202      	movs	r2, #2
 800aada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	3304      	adds	r3, #4
 800aae6:	4619      	mov	r1, r3
 800aae8:	4610      	mov	r0, r2
 800aaea:	f000 fc2b 	bl	800b344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2201      	movs	r2, #1
 800ab02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2201      	movs	r2, #1
 800ab0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2201      	movs	r2, #1
 800ab12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2201      	movs	r2, #1
 800ab22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2201      	movs	r2, #1
 800ab32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2201      	movs	r2, #1
 800ab42:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d001      	beq.n	800ab70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e054      	b.n	800ac1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2202      	movs	r2, #2
 800ab74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	68da      	ldr	r2, [r3, #12]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f042 0201 	orr.w	r2, r2, #1
 800ab86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a26      	ldr	r2, [pc, #152]	; (800ac28 <HAL_TIM_Base_Start_IT+0xd0>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d022      	beq.n	800abd8 <HAL_TIM_Base_Start_IT+0x80>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab9a:	d01d      	beq.n	800abd8 <HAL_TIM_Base_Start_IT+0x80>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a22      	ldr	r2, [pc, #136]	; (800ac2c <HAL_TIM_Base_Start_IT+0xd4>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d018      	beq.n	800abd8 <HAL_TIM_Base_Start_IT+0x80>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a21      	ldr	r2, [pc, #132]	; (800ac30 <HAL_TIM_Base_Start_IT+0xd8>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d013      	beq.n	800abd8 <HAL_TIM_Base_Start_IT+0x80>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a1f      	ldr	r2, [pc, #124]	; (800ac34 <HAL_TIM_Base_Start_IT+0xdc>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d00e      	beq.n	800abd8 <HAL_TIM_Base_Start_IT+0x80>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a1e      	ldr	r2, [pc, #120]	; (800ac38 <HAL_TIM_Base_Start_IT+0xe0>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d009      	beq.n	800abd8 <HAL_TIM_Base_Start_IT+0x80>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a1c      	ldr	r2, [pc, #112]	; (800ac3c <HAL_TIM_Base_Start_IT+0xe4>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d004      	beq.n	800abd8 <HAL_TIM_Base_Start_IT+0x80>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a1b      	ldr	r2, [pc, #108]	; (800ac40 <HAL_TIM_Base_Start_IT+0xe8>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d115      	bne.n	800ac04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	689a      	ldr	r2, [r3, #8]
 800abde:	4b19      	ldr	r3, [pc, #100]	; (800ac44 <HAL_TIM_Base_Start_IT+0xec>)
 800abe0:	4013      	ands	r3, r2
 800abe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2b06      	cmp	r3, #6
 800abe8:	d015      	beq.n	800ac16 <HAL_TIM_Base_Start_IT+0xbe>
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abf0:	d011      	beq.n	800ac16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f042 0201 	orr.w	r2, r2, #1
 800ac00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac02:	e008      	b.n	800ac16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f042 0201 	orr.w	r2, r2, #1
 800ac12:	601a      	str	r2, [r3, #0]
 800ac14:	e000      	b.n	800ac18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac18:	2300      	movs	r3, #0
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3714      	adds	r7, #20
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop
 800ac28:	40010000 	.word	0x40010000
 800ac2c:	40000400 	.word	0x40000400
 800ac30:	40000800 	.word	0x40000800
 800ac34:	40000c00 	.word	0x40000c00
 800ac38:	40010400 	.word	0x40010400
 800ac3c:	40014000 	.word	0x40014000
 800ac40:	40001800 	.word	0x40001800
 800ac44:	00010007 	.word	0x00010007

0800ac48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d101      	bne.n	800ac5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ac56:	2301      	movs	r3, #1
 800ac58:	e049      	b.n	800acee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d106      	bne.n	800ac74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 f841 	bl	800acf6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2202      	movs	r2, #2
 800ac78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	3304      	adds	r3, #4
 800ac84:	4619      	mov	r1, r3
 800ac86:	4610      	mov	r0, r2
 800ac88:	f000 fb5c 	bl	800b344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2201      	movs	r2, #1
 800ac90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2201      	movs	r2, #1
 800ac98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2201      	movs	r2, #1
 800aca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2201      	movs	r2, #1
 800aca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2201      	movs	r2, #1
 800acb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2201      	movs	r2, #1
 800acb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2201      	movs	r2, #1
 800acc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2201      	movs	r2, #1
 800acc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2201      	movs	r2, #1
 800acd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2201      	movs	r2, #1
 800acd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2201      	movs	r2, #1
 800ace0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2201      	movs	r2, #1
 800ace8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800acec:	2300      	movs	r3, #0
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3708      	adds	r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800acf6:	b480      	push	{r7}
 800acf8:	b083      	sub	sp, #12
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800acfe:	bf00      	nop
 800ad00:	370c      	adds	r7, #12
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr

0800ad0a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b082      	sub	sp, #8
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	691b      	ldr	r3, [r3, #16]
 800ad18:	f003 0302 	and.w	r3, r3, #2
 800ad1c:	2b02      	cmp	r3, #2
 800ad1e:	d122      	bne.n	800ad66 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	f003 0302 	and.w	r3, r3, #2
 800ad2a:	2b02      	cmp	r3, #2
 800ad2c:	d11b      	bne.n	800ad66 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f06f 0202 	mvn.w	r2, #2
 800ad36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	f003 0303 	and.w	r3, r3, #3
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d003      	beq.n	800ad54 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 fadb 	bl	800b308 <HAL_TIM_IC_CaptureCallback>
 800ad52:	e005      	b.n	800ad60 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 facd 	bl	800b2f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 fade 	bl	800b31c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	691b      	ldr	r3, [r3, #16]
 800ad6c:	f003 0304 	and.w	r3, r3, #4
 800ad70:	2b04      	cmp	r3, #4
 800ad72:	d122      	bne.n	800adba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	f003 0304 	and.w	r3, r3, #4
 800ad7e:	2b04      	cmp	r3, #4
 800ad80:	d11b      	bne.n	800adba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f06f 0204 	mvn.w	r2, #4
 800ad8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2202      	movs	r2, #2
 800ad90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d003      	beq.n	800ada8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 fab1 	bl	800b308 <HAL_TIM_IC_CaptureCallback>
 800ada6:	e005      	b.n	800adb4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 faa3 	bl	800b2f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 fab4 	bl	800b31c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	f003 0308 	and.w	r3, r3, #8
 800adc4:	2b08      	cmp	r3, #8
 800adc6:	d122      	bne.n	800ae0e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	f003 0308 	and.w	r3, r3, #8
 800add2:	2b08      	cmp	r3, #8
 800add4:	d11b      	bne.n	800ae0e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f06f 0208 	mvn.w	r2, #8
 800adde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2204      	movs	r2, #4
 800ade4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	69db      	ldr	r3, [r3, #28]
 800adec:	f003 0303 	and.w	r3, r3, #3
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d003      	beq.n	800adfc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 fa87 	bl	800b308 <HAL_TIM_IC_CaptureCallback>
 800adfa:	e005      	b.n	800ae08 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 fa79 	bl	800b2f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 fa8a 	bl	800b31c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	691b      	ldr	r3, [r3, #16]
 800ae14:	f003 0310 	and.w	r3, r3, #16
 800ae18:	2b10      	cmp	r3, #16
 800ae1a:	d122      	bne.n	800ae62 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	f003 0310 	and.w	r3, r3, #16
 800ae26:	2b10      	cmp	r3, #16
 800ae28:	d11b      	bne.n	800ae62 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f06f 0210 	mvn.w	r2, #16
 800ae32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2208      	movs	r2, #8
 800ae38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	69db      	ldr	r3, [r3, #28]
 800ae40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d003      	beq.n	800ae50 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 fa5d 	bl	800b308 <HAL_TIM_IC_CaptureCallback>
 800ae4e:	e005      	b.n	800ae5c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 fa4f 	bl	800b2f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 fa60 	bl	800b31c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	691b      	ldr	r3, [r3, #16]
 800ae68:	f003 0301 	and.w	r3, r3, #1
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d10e      	bne.n	800ae8e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	f003 0301 	and.w	r3, r3, #1
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d107      	bne.n	800ae8e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f06f 0201 	mvn.w	r2, #1
 800ae86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f7f6 feed 	bl	8001c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae98:	2b80      	cmp	r3, #128	; 0x80
 800ae9a:	d10e      	bne.n	800aeba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aea6:	2b80      	cmp	r3, #128	; 0x80
 800aea8:	d107      	bne.n	800aeba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aeb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 fef3 	bl	800bca0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	691b      	ldr	r3, [r3, #16]
 800aec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aec8:	d10e      	bne.n	800aee8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aed4:	2b80      	cmp	r3, #128	; 0x80
 800aed6:	d107      	bne.n	800aee8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 fee6 	bl	800bcb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	691b      	ldr	r3, [r3, #16]
 800aeee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aef2:	2b40      	cmp	r3, #64	; 0x40
 800aef4:	d10e      	bne.n	800af14 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af00:	2b40      	cmp	r3, #64	; 0x40
 800af02:	d107      	bne.n	800af14 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 fa0e 	bl	800b330 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	f003 0320 	and.w	r3, r3, #32
 800af1e:	2b20      	cmp	r3, #32
 800af20:	d10e      	bne.n	800af40 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	f003 0320 	and.w	r3, r3, #32
 800af2c:	2b20      	cmp	r3, #32
 800af2e:	d107      	bne.n	800af40 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f06f 0220 	mvn.w	r2, #32
 800af38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fea6 	bl	800bc8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af40:	bf00      	nop
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d101      	bne.n	800af62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800af5e:	2302      	movs	r3, #2
 800af60:	e0fd      	b.n	800b15e <HAL_TIM_PWM_ConfigChannel+0x216>
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2201      	movs	r2, #1
 800af66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2b14      	cmp	r3, #20
 800af6e:	f200 80f0 	bhi.w	800b152 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800af72:	a201      	add	r2, pc, #4	; (adr r2, 800af78 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800af74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af78:	0800afcd 	.word	0x0800afcd
 800af7c:	0800b153 	.word	0x0800b153
 800af80:	0800b153 	.word	0x0800b153
 800af84:	0800b153 	.word	0x0800b153
 800af88:	0800b00d 	.word	0x0800b00d
 800af8c:	0800b153 	.word	0x0800b153
 800af90:	0800b153 	.word	0x0800b153
 800af94:	0800b153 	.word	0x0800b153
 800af98:	0800b04f 	.word	0x0800b04f
 800af9c:	0800b153 	.word	0x0800b153
 800afa0:	0800b153 	.word	0x0800b153
 800afa4:	0800b153 	.word	0x0800b153
 800afa8:	0800b08f 	.word	0x0800b08f
 800afac:	0800b153 	.word	0x0800b153
 800afb0:	0800b153 	.word	0x0800b153
 800afb4:	0800b153 	.word	0x0800b153
 800afb8:	0800b0d1 	.word	0x0800b0d1
 800afbc:	0800b153 	.word	0x0800b153
 800afc0:	0800b153 	.word	0x0800b153
 800afc4:	0800b153 	.word	0x0800b153
 800afc8:	0800b111 	.word	0x0800b111
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68b9      	ldr	r1, [r7, #8]
 800afd2:	4618      	mov	r0, r3
 800afd4:	f000 fa56 	bl	800b484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	699a      	ldr	r2, [r3, #24]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f042 0208 	orr.w	r2, r2, #8
 800afe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	699a      	ldr	r2, [r3, #24]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f022 0204 	bic.w	r2, r2, #4
 800aff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	6999      	ldr	r1, [r3, #24]
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	691a      	ldr	r2, [r3, #16]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	430a      	orrs	r2, r1
 800b008:	619a      	str	r2, [r3, #24]
      break;
 800b00a:	e0a3      	b.n	800b154 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	68b9      	ldr	r1, [r7, #8]
 800b012:	4618      	mov	r0, r3
 800b014:	f000 faa8 	bl	800b568 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	699a      	ldr	r2, [r3, #24]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	699a      	ldr	r2, [r3, #24]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	6999      	ldr	r1, [r3, #24]
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	021a      	lsls	r2, r3, #8
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	430a      	orrs	r2, r1
 800b04a:	619a      	str	r2, [r3, #24]
      break;
 800b04c:	e082      	b.n	800b154 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	68b9      	ldr	r1, [r7, #8]
 800b054:	4618      	mov	r0, r3
 800b056:	f000 faff 	bl	800b658 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	69da      	ldr	r2, [r3, #28]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f042 0208 	orr.w	r2, r2, #8
 800b068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	69da      	ldr	r2, [r3, #28]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f022 0204 	bic.w	r2, r2, #4
 800b078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	69d9      	ldr	r1, [r3, #28]
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	691a      	ldr	r2, [r3, #16]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	430a      	orrs	r2, r1
 800b08a:	61da      	str	r2, [r3, #28]
      break;
 800b08c:	e062      	b.n	800b154 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	68b9      	ldr	r1, [r7, #8]
 800b094:	4618      	mov	r0, r3
 800b096:	f000 fb55 	bl	800b744 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	69da      	ldr	r2, [r3, #28]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	69da      	ldr	r2, [r3, #28]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	69d9      	ldr	r1, [r3, #28]
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	691b      	ldr	r3, [r3, #16]
 800b0c4:	021a      	lsls	r2, r3, #8
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	430a      	orrs	r2, r1
 800b0cc:	61da      	str	r2, [r3, #28]
      break;
 800b0ce:	e041      	b.n	800b154 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	68b9      	ldr	r1, [r7, #8]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f000 fb8c 	bl	800b7f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f042 0208 	orr.w	r2, r2, #8
 800b0ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f022 0204 	bic.w	r2, r2, #4
 800b0fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	691a      	ldr	r2, [r3, #16]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	430a      	orrs	r2, r1
 800b10c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b10e:	e021      	b.n	800b154 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	68b9      	ldr	r1, [r7, #8]
 800b116:	4618      	mov	r0, r3
 800b118:	f000 fbbe 	bl	800b898 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b12a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b13a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	021a      	lsls	r2, r3, #8
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	430a      	orrs	r2, r1
 800b14e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b150:	e000      	b.n	800b154 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b152:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3710      	adds	r7, #16
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop

0800b168 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d101      	bne.n	800b180 <HAL_TIM_ConfigClockSource+0x18>
 800b17c:	2302      	movs	r3, #2
 800b17e:	e0b3      	b.n	800b2e8 <HAL_TIM_ConfigClockSource+0x180>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2201      	movs	r2, #1
 800b184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2202      	movs	r2, #2
 800b18c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	4b55      	ldr	r3, [pc, #340]	; (800b2f0 <HAL_TIM_ConfigClockSource+0x188>)
 800b19c:	4013      	ands	r3, r2
 800b19e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b1a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1b8:	d03e      	beq.n	800b238 <HAL_TIM_ConfigClockSource+0xd0>
 800b1ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1be:	f200 8087 	bhi.w	800b2d0 <HAL_TIM_ConfigClockSource+0x168>
 800b1c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1c6:	f000 8085 	beq.w	800b2d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b1ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1ce:	d87f      	bhi.n	800b2d0 <HAL_TIM_ConfigClockSource+0x168>
 800b1d0:	2b70      	cmp	r3, #112	; 0x70
 800b1d2:	d01a      	beq.n	800b20a <HAL_TIM_ConfigClockSource+0xa2>
 800b1d4:	2b70      	cmp	r3, #112	; 0x70
 800b1d6:	d87b      	bhi.n	800b2d0 <HAL_TIM_ConfigClockSource+0x168>
 800b1d8:	2b60      	cmp	r3, #96	; 0x60
 800b1da:	d050      	beq.n	800b27e <HAL_TIM_ConfigClockSource+0x116>
 800b1dc:	2b60      	cmp	r3, #96	; 0x60
 800b1de:	d877      	bhi.n	800b2d0 <HAL_TIM_ConfigClockSource+0x168>
 800b1e0:	2b50      	cmp	r3, #80	; 0x50
 800b1e2:	d03c      	beq.n	800b25e <HAL_TIM_ConfigClockSource+0xf6>
 800b1e4:	2b50      	cmp	r3, #80	; 0x50
 800b1e6:	d873      	bhi.n	800b2d0 <HAL_TIM_ConfigClockSource+0x168>
 800b1e8:	2b40      	cmp	r3, #64	; 0x40
 800b1ea:	d058      	beq.n	800b29e <HAL_TIM_ConfigClockSource+0x136>
 800b1ec:	2b40      	cmp	r3, #64	; 0x40
 800b1ee:	d86f      	bhi.n	800b2d0 <HAL_TIM_ConfigClockSource+0x168>
 800b1f0:	2b30      	cmp	r3, #48	; 0x30
 800b1f2:	d064      	beq.n	800b2be <HAL_TIM_ConfigClockSource+0x156>
 800b1f4:	2b30      	cmp	r3, #48	; 0x30
 800b1f6:	d86b      	bhi.n	800b2d0 <HAL_TIM_ConfigClockSource+0x168>
 800b1f8:	2b20      	cmp	r3, #32
 800b1fa:	d060      	beq.n	800b2be <HAL_TIM_ConfigClockSource+0x156>
 800b1fc:	2b20      	cmp	r3, #32
 800b1fe:	d867      	bhi.n	800b2d0 <HAL_TIM_ConfigClockSource+0x168>
 800b200:	2b00      	cmp	r3, #0
 800b202:	d05c      	beq.n	800b2be <HAL_TIM_ConfigClockSource+0x156>
 800b204:	2b10      	cmp	r3, #16
 800b206:	d05a      	beq.n	800b2be <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b208:	e062      	b.n	800b2d0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6818      	ldr	r0, [r3, #0]
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	6899      	ldr	r1, [r3, #8]
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	685a      	ldr	r2, [r3, #4]
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	f000 fc0b 	bl	800ba34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b22c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	609a      	str	r2, [r3, #8]
      break;
 800b236:	e04e      	b.n	800b2d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6818      	ldr	r0, [r3, #0]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	6899      	ldr	r1, [r3, #8]
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	685a      	ldr	r2, [r3, #4]
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	f000 fbf4 	bl	800ba34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	689a      	ldr	r2, [r3, #8]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b25a:	609a      	str	r2, [r3, #8]
      break;
 800b25c:	e03b      	b.n	800b2d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6818      	ldr	r0, [r3, #0]
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	6859      	ldr	r1, [r3, #4]
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	461a      	mov	r2, r3
 800b26c:	f000 fb68 	bl	800b940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2150      	movs	r1, #80	; 0x50
 800b276:	4618      	mov	r0, r3
 800b278:	f000 fbc1 	bl	800b9fe <TIM_ITRx_SetConfig>
      break;
 800b27c:	e02b      	b.n	800b2d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6818      	ldr	r0, [r3, #0]
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	6859      	ldr	r1, [r3, #4]
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	461a      	mov	r2, r3
 800b28c:	f000 fb87 	bl	800b99e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2160      	movs	r1, #96	; 0x60
 800b296:	4618      	mov	r0, r3
 800b298:	f000 fbb1 	bl	800b9fe <TIM_ITRx_SetConfig>
      break;
 800b29c:	e01b      	b.n	800b2d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6818      	ldr	r0, [r3, #0]
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	6859      	ldr	r1, [r3, #4]
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	68db      	ldr	r3, [r3, #12]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	f000 fb48 	bl	800b940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	2140      	movs	r1, #64	; 0x40
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f000 fba1 	bl	800b9fe <TIM_ITRx_SetConfig>
      break;
 800b2bc:	e00b      	b.n	800b2d6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	4610      	mov	r0, r2
 800b2ca:	f000 fb98 	bl	800b9fe <TIM_ITRx_SetConfig>
        break;
 800b2ce:	e002      	b.n	800b2d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b2d0:	bf00      	nop
 800b2d2:	e000      	b.n	800b2d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b2d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3710      	adds	r7, #16
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	fffeff88 	.word	0xfffeff88

0800b2f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b2fc:	bf00      	nop
 800b2fe:	370c      	adds	r7, #12
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr

0800b308 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b308:	b480      	push	{r7}
 800b30a:	b083      	sub	sp, #12
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b310:	bf00      	nop
 800b312:	370c      	adds	r7, #12
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b324:	bf00      	nop
 800b326:	370c      	adds	r7, #12
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b338:	bf00      	nop
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr

0800b344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b344:	b480      	push	{r7}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a40      	ldr	r2, [pc, #256]	; (800b458 <TIM_Base_SetConfig+0x114>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d013      	beq.n	800b384 <TIM_Base_SetConfig+0x40>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b362:	d00f      	beq.n	800b384 <TIM_Base_SetConfig+0x40>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a3d      	ldr	r2, [pc, #244]	; (800b45c <TIM_Base_SetConfig+0x118>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d00b      	beq.n	800b384 <TIM_Base_SetConfig+0x40>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a3c      	ldr	r2, [pc, #240]	; (800b460 <TIM_Base_SetConfig+0x11c>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d007      	beq.n	800b384 <TIM_Base_SetConfig+0x40>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a3b      	ldr	r2, [pc, #236]	; (800b464 <TIM_Base_SetConfig+0x120>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d003      	beq.n	800b384 <TIM_Base_SetConfig+0x40>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a3a      	ldr	r2, [pc, #232]	; (800b468 <TIM_Base_SetConfig+0x124>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d108      	bne.n	800b396 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b38a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	4313      	orrs	r3, r2
 800b394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4a2f      	ldr	r2, [pc, #188]	; (800b458 <TIM_Base_SetConfig+0x114>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d02b      	beq.n	800b3f6 <TIM_Base_SetConfig+0xb2>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3a4:	d027      	beq.n	800b3f6 <TIM_Base_SetConfig+0xb2>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4a2c      	ldr	r2, [pc, #176]	; (800b45c <TIM_Base_SetConfig+0x118>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d023      	beq.n	800b3f6 <TIM_Base_SetConfig+0xb2>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4a2b      	ldr	r2, [pc, #172]	; (800b460 <TIM_Base_SetConfig+0x11c>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d01f      	beq.n	800b3f6 <TIM_Base_SetConfig+0xb2>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4a2a      	ldr	r2, [pc, #168]	; (800b464 <TIM_Base_SetConfig+0x120>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d01b      	beq.n	800b3f6 <TIM_Base_SetConfig+0xb2>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4a29      	ldr	r2, [pc, #164]	; (800b468 <TIM_Base_SetConfig+0x124>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d017      	beq.n	800b3f6 <TIM_Base_SetConfig+0xb2>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	4a28      	ldr	r2, [pc, #160]	; (800b46c <TIM_Base_SetConfig+0x128>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d013      	beq.n	800b3f6 <TIM_Base_SetConfig+0xb2>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4a27      	ldr	r2, [pc, #156]	; (800b470 <TIM_Base_SetConfig+0x12c>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d00f      	beq.n	800b3f6 <TIM_Base_SetConfig+0xb2>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4a26      	ldr	r2, [pc, #152]	; (800b474 <TIM_Base_SetConfig+0x130>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d00b      	beq.n	800b3f6 <TIM_Base_SetConfig+0xb2>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	4a25      	ldr	r2, [pc, #148]	; (800b478 <TIM_Base_SetConfig+0x134>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d007      	beq.n	800b3f6 <TIM_Base_SetConfig+0xb2>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	4a24      	ldr	r2, [pc, #144]	; (800b47c <TIM_Base_SetConfig+0x138>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d003      	beq.n	800b3f6 <TIM_Base_SetConfig+0xb2>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4a23      	ldr	r2, [pc, #140]	; (800b480 <TIM_Base_SetConfig+0x13c>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d108      	bne.n	800b408 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	4313      	orrs	r3, r2
 800b406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	695b      	ldr	r3, [r3, #20]
 800b412:	4313      	orrs	r3, r2
 800b414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	689a      	ldr	r2, [r3, #8]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	4a0a      	ldr	r2, [pc, #40]	; (800b458 <TIM_Base_SetConfig+0x114>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d003      	beq.n	800b43c <TIM_Base_SetConfig+0xf8>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	4a0c      	ldr	r2, [pc, #48]	; (800b468 <TIM_Base_SetConfig+0x124>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d103      	bne.n	800b444 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	691a      	ldr	r2, [r3, #16]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	615a      	str	r2, [r3, #20]
}
 800b44a:	bf00      	nop
 800b44c:	3714      	adds	r7, #20
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
 800b456:	bf00      	nop
 800b458:	40010000 	.word	0x40010000
 800b45c:	40000400 	.word	0x40000400
 800b460:	40000800 	.word	0x40000800
 800b464:	40000c00 	.word	0x40000c00
 800b468:	40010400 	.word	0x40010400
 800b46c:	40014000 	.word	0x40014000
 800b470:	40014400 	.word	0x40014400
 800b474:	40014800 	.word	0x40014800
 800b478:	40001800 	.word	0x40001800
 800b47c:	40001c00 	.word	0x40001c00
 800b480:	40002000 	.word	0x40002000

0800b484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b484:	b480      	push	{r7}
 800b486:	b087      	sub	sp, #28
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6a1b      	ldr	r3, [r3, #32]
 800b492:	f023 0201 	bic.w	r2, r3, #1
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a1b      	ldr	r3, [r3, #32]
 800b49e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	699b      	ldr	r3, [r3, #24]
 800b4aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	4b2b      	ldr	r3, [pc, #172]	; (800b55c <TIM_OC1_SetConfig+0xd8>)
 800b4b0:	4013      	ands	r3, r2
 800b4b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f023 0303 	bic.w	r3, r3, #3
 800b4ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	68fa      	ldr	r2, [r7, #12]
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	f023 0302 	bic.w	r3, r3, #2
 800b4cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	697a      	ldr	r2, [r7, #20]
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	4a21      	ldr	r2, [pc, #132]	; (800b560 <TIM_OC1_SetConfig+0xdc>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d003      	beq.n	800b4e8 <TIM_OC1_SetConfig+0x64>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	4a20      	ldr	r2, [pc, #128]	; (800b564 <TIM_OC1_SetConfig+0xe0>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d10c      	bne.n	800b502 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	f023 0308 	bic.w	r3, r3, #8
 800b4ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	697a      	ldr	r2, [r7, #20]
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	f023 0304 	bic.w	r3, r3, #4
 800b500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4a16      	ldr	r2, [pc, #88]	; (800b560 <TIM_OC1_SetConfig+0xdc>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d003      	beq.n	800b512 <TIM_OC1_SetConfig+0x8e>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4a15      	ldr	r2, [pc, #84]	; (800b564 <TIM_OC1_SetConfig+0xe0>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d111      	bne.n	800b536 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	695b      	ldr	r3, [r3, #20]
 800b526:	693a      	ldr	r2, [r7, #16]
 800b528:	4313      	orrs	r3, r2
 800b52a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	699b      	ldr	r3, [r3, #24]
 800b530:	693a      	ldr	r2, [r7, #16]
 800b532:	4313      	orrs	r3, r2
 800b534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	693a      	ldr	r2, [r7, #16]
 800b53a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	685a      	ldr	r2, [r3, #4]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	697a      	ldr	r2, [r7, #20]
 800b54e:	621a      	str	r2, [r3, #32]
}
 800b550:	bf00      	nop
 800b552:	371c      	adds	r7, #28
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr
 800b55c:	fffeff8f 	.word	0xfffeff8f
 800b560:	40010000 	.word	0x40010000
 800b564:	40010400 	.word	0x40010400

0800b568 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b568:	b480      	push	{r7}
 800b56a:	b087      	sub	sp, #28
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6a1b      	ldr	r3, [r3, #32]
 800b576:	f023 0210 	bic.w	r2, r3, #16
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a1b      	ldr	r3, [r3, #32]
 800b582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	699b      	ldr	r3, [r3, #24]
 800b58e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	4b2e      	ldr	r3, [pc, #184]	; (800b64c <TIM_OC2_SetConfig+0xe4>)
 800b594:	4013      	ands	r3, r2
 800b596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b59e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	021b      	lsls	r3, r3, #8
 800b5a6:	68fa      	ldr	r2, [r7, #12]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	f023 0320 	bic.w	r3, r3, #32
 800b5b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	011b      	lsls	r3, r3, #4
 800b5ba:	697a      	ldr	r2, [r7, #20]
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a23      	ldr	r2, [pc, #140]	; (800b650 <TIM_OC2_SetConfig+0xe8>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d003      	beq.n	800b5d0 <TIM_OC2_SetConfig+0x68>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4a22      	ldr	r2, [pc, #136]	; (800b654 <TIM_OC2_SetConfig+0xec>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d10d      	bne.n	800b5ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	011b      	lsls	r3, r3, #4
 800b5de:	697a      	ldr	r2, [r7, #20]
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a18      	ldr	r2, [pc, #96]	; (800b650 <TIM_OC2_SetConfig+0xe8>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d003      	beq.n	800b5fc <TIM_OC2_SetConfig+0x94>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	4a17      	ldr	r2, [pc, #92]	; (800b654 <TIM_OC2_SetConfig+0xec>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d113      	bne.n	800b624 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b60a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	695b      	ldr	r3, [r3, #20]
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	693a      	ldr	r2, [r7, #16]
 800b614:	4313      	orrs	r3, r2
 800b616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	699b      	ldr	r3, [r3, #24]
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	693a      	ldr	r2, [r7, #16]
 800b620:	4313      	orrs	r3, r2
 800b622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	693a      	ldr	r2, [r7, #16]
 800b628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	68fa      	ldr	r2, [r7, #12]
 800b62e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	685a      	ldr	r2, [r3, #4]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	697a      	ldr	r2, [r7, #20]
 800b63c:	621a      	str	r2, [r3, #32]
}
 800b63e:	bf00      	nop
 800b640:	371c      	adds	r7, #28
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	feff8fff 	.word	0xfeff8fff
 800b650:	40010000 	.word	0x40010000
 800b654:	40010400 	.word	0x40010400

0800b658 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b658:	b480      	push	{r7}
 800b65a:	b087      	sub	sp, #28
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6a1b      	ldr	r3, [r3, #32]
 800b666:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6a1b      	ldr	r3, [r3, #32]
 800b672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	69db      	ldr	r3, [r3, #28]
 800b67e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	4b2d      	ldr	r3, [pc, #180]	; (800b738 <TIM_OC3_SetConfig+0xe0>)
 800b684:	4013      	ands	r3, r2
 800b686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f023 0303 	bic.w	r3, r3, #3
 800b68e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	4313      	orrs	r3, r2
 800b698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b6a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	021b      	lsls	r3, r3, #8
 800b6a8:	697a      	ldr	r2, [r7, #20]
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	4a22      	ldr	r2, [pc, #136]	; (800b73c <TIM_OC3_SetConfig+0xe4>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d003      	beq.n	800b6be <TIM_OC3_SetConfig+0x66>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4a21      	ldr	r2, [pc, #132]	; (800b740 <TIM_OC3_SetConfig+0xe8>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d10d      	bne.n	800b6da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b6c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	68db      	ldr	r3, [r3, #12]
 800b6ca:	021b      	lsls	r3, r3, #8
 800b6cc:	697a      	ldr	r2, [r7, #20]
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b6d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4a17      	ldr	r2, [pc, #92]	; (800b73c <TIM_OC3_SetConfig+0xe4>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d003      	beq.n	800b6ea <TIM_OC3_SetConfig+0x92>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4a16      	ldr	r2, [pc, #88]	; (800b740 <TIM_OC3_SetConfig+0xe8>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d113      	bne.n	800b712 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	695b      	ldr	r3, [r3, #20]
 800b6fe:	011b      	lsls	r3, r3, #4
 800b700:	693a      	ldr	r2, [r7, #16]
 800b702:	4313      	orrs	r3, r2
 800b704:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	699b      	ldr	r3, [r3, #24]
 800b70a:	011b      	lsls	r3, r3, #4
 800b70c:	693a      	ldr	r2, [r7, #16]
 800b70e:	4313      	orrs	r3, r2
 800b710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	693a      	ldr	r2, [r7, #16]
 800b716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	685a      	ldr	r2, [r3, #4]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	697a      	ldr	r2, [r7, #20]
 800b72a:	621a      	str	r2, [r3, #32]
}
 800b72c:	bf00      	nop
 800b72e:	371c      	adds	r7, #28
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr
 800b738:	fffeff8f 	.word	0xfffeff8f
 800b73c:	40010000 	.word	0x40010000
 800b740:	40010400 	.word	0x40010400

0800b744 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b744:	b480      	push	{r7}
 800b746:	b087      	sub	sp, #28
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6a1b      	ldr	r3, [r3, #32]
 800b752:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a1b      	ldr	r3, [r3, #32]
 800b75e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	69db      	ldr	r3, [r3, #28]
 800b76a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	4b1e      	ldr	r3, [pc, #120]	; (800b7e8 <TIM_OC4_SetConfig+0xa4>)
 800b770:	4013      	ands	r3, r2
 800b772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b77a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	021b      	lsls	r3, r3, #8
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	4313      	orrs	r3, r2
 800b786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b78e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	031b      	lsls	r3, r3, #12
 800b796:	693a      	ldr	r2, [r7, #16]
 800b798:	4313      	orrs	r3, r2
 800b79a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4a13      	ldr	r2, [pc, #76]	; (800b7ec <TIM_OC4_SetConfig+0xa8>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d003      	beq.n	800b7ac <TIM_OC4_SetConfig+0x68>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	4a12      	ldr	r2, [pc, #72]	; (800b7f0 <TIM_OC4_SetConfig+0xac>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d109      	bne.n	800b7c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b7b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	695b      	ldr	r3, [r3, #20]
 800b7b8:	019b      	lsls	r3, r3, #6
 800b7ba:	697a      	ldr	r2, [r7, #20]
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	697a      	ldr	r2, [r7, #20]
 800b7c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	685a      	ldr	r2, [r3, #4]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	693a      	ldr	r2, [r7, #16]
 800b7d8:	621a      	str	r2, [r3, #32]
}
 800b7da:	bf00      	nop
 800b7dc:	371c      	adds	r7, #28
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop
 800b7e8:	feff8fff 	.word	0xfeff8fff
 800b7ec:	40010000 	.word	0x40010000
 800b7f0:	40010400 	.word	0x40010400

0800b7f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b087      	sub	sp, #28
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a1b      	ldr	r3, [r3, #32]
 800b802:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6a1b      	ldr	r3, [r3, #32]
 800b80e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b81a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	4b1b      	ldr	r3, [pc, #108]	; (800b88c <TIM_OC5_SetConfig+0x98>)
 800b820:	4013      	ands	r3, r2
 800b822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b834:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	041b      	lsls	r3, r3, #16
 800b83c:	693a      	ldr	r2, [r7, #16]
 800b83e:	4313      	orrs	r3, r2
 800b840:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	4a12      	ldr	r2, [pc, #72]	; (800b890 <TIM_OC5_SetConfig+0x9c>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d003      	beq.n	800b852 <TIM_OC5_SetConfig+0x5e>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4a11      	ldr	r2, [pc, #68]	; (800b894 <TIM_OC5_SetConfig+0xa0>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d109      	bne.n	800b866 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b858:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	695b      	ldr	r3, [r3, #20]
 800b85e:	021b      	lsls	r3, r3, #8
 800b860:	697a      	ldr	r2, [r7, #20]
 800b862:	4313      	orrs	r3, r2
 800b864:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	697a      	ldr	r2, [r7, #20]
 800b86a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	685a      	ldr	r2, [r3, #4]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	693a      	ldr	r2, [r7, #16]
 800b87e:	621a      	str	r2, [r3, #32]
}
 800b880:	bf00      	nop
 800b882:	371c      	adds	r7, #28
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr
 800b88c:	fffeff8f 	.word	0xfffeff8f
 800b890:	40010000 	.word	0x40010000
 800b894:	40010400 	.word	0x40010400

0800b898 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b898:	b480      	push	{r7}
 800b89a:	b087      	sub	sp, #28
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6a1b      	ldr	r3, [r3, #32]
 800b8a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a1b      	ldr	r3, [r3, #32]
 800b8b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	4b1c      	ldr	r3, [pc, #112]	; (800b934 <TIM_OC6_SetConfig+0x9c>)
 800b8c4:	4013      	ands	r3, r2
 800b8c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	021b      	lsls	r3, r3, #8
 800b8ce:	68fa      	ldr	r2, [r7, #12]
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b8da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	051b      	lsls	r3, r3, #20
 800b8e2:	693a      	ldr	r2, [r7, #16]
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a13      	ldr	r2, [pc, #76]	; (800b938 <TIM_OC6_SetConfig+0xa0>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d003      	beq.n	800b8f8 <TIM_OC6_SetConfig+0x60>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a12      	ldr	r2, [pc, #72]	; (800b93c <TIM_OC6_SetConfig+0xa4>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d109      	bne.n	800b90c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b8fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	695b      	ldr	r3, [r3, #20]
 800b904:	029b      	lsls	r3, r3, #10
 800b906:	697a      	ldr	r2, [r7, #20]
 800b908:	4313      	orrs	r3, r2
 800b90a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	697a      	ldr	r2, [r7, #20]
 800b910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	68fa      	ldr	r2, [r7, #12]
 800b916:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	685a      	ldr	r2, [r3, #4]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	693a      	ldr	r2, [r7, #16]
 800b924:	621a      	str	r2, [r3, #32]
}
 800b926:	bf00      	nop
 800b928:	371c      	adds	r7, #28
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop
 800b934:	feff8fff 	.word	0xfeff8fff
 800b938:	40010000 	.word	0x40010000
 800b93c:	40010400 	.word	0x40010400

0800b940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b940:	b480      	push	{r7}
 800b942:	b087      	sub	sp, #28
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6a1b      	ldr	r3, [r3, #32]
 800b950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6a1b      	ldr	r3, [r3, #32]
 800b956:	f023 0201 	bic.w	r2, r3, #1
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	699b      	ldr	r3, [r3, #24]
 800b962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b96a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	011b      	lsls	r3, r3, #4
 800b970:	693a      	ldr	r2, [r7, #16]
 800b972:	4313      	orrs	r3, r2
 800b974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	f023 030a 	bic.w	r3, r3, #10
 800b97c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	4313      	orrs	r3, r2
 800b984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	693a      	ldr	r2, [r7, #16]
 800b98a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	621a      	str	r2, [r3, #32]
}
 800b992:	bf00      	nop
 800b994:	371c      	adds	r7, #28
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b99e:	b480      	push	{r7}
 800b9a0:	b087      	sub	sp, #28
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	60f8      	str	r0, [r7, #12]
 800b9a6:	60b9      	str	r1, [r7, #8]
 800b9a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6a1b      	ldr	r3, [r3, #32]
 800b9ae:	f023 0210 	bic.w	r2, r3, #16
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	699b      	ldr	r3, [r3, #24]
 800b9ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	6a1b      	ldr	r3, [r3, #32]
 800b9c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b9c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	031b      	lsls	r3, r3, #12
 800b9ce:	697a      	ldr	r2, [r7, #20]
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b9da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	011b      	lsls	r3, r3, #4
 800b9e0:	693a      	ldr	r2, [r7, #16]
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	697a      	ldr	r2, [r7, #20]
 800b9ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	693a      	ldr	r2, [r7, #16]
 800b9f0:	621a      	str	r2, [r3, #32]
}
 800b9f2:	bf00      	nop
 800b9f4:	371c      	adds	r7, #28
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr

0800b9fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b9fe:	b480      	push	{r7}
 800ba00:	b085      	sub	sp, #20
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
 800ba06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	f043 0307 	orr.w	r3, r3, #7
 800ba20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	609a      	str	r2, [r3, #8]
}
 800ba28:	bf00      	nop
 800ba2a:	3714      	adds	r7, #20
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b087      	sub	sp, #28
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	60b9      	str	r1, [r7, #8]
 800ba3e:	607a      	str	r2, [r7, #4]
 800ba40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	689b      	ldr	r3, [r3, #8]
 800ba46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	021a      	lsls	r2, r3, #8
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	431a      	orrs	r2, r3
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	697a      	ldr	r2, [r7, #20]
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	697a      	ldr	r2, [r7, #20]
 800ba66:	609a      	str	r2, [r3, #8]
}
 800ba68:	bf00      	nop
 800ba6a:	371c      	adds	r7, #28
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b085      	sub	sp, #20
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d101      	bne.n	800ba8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba88:	2302      	movs	r3, #2
 800ba8a:	e06d      	b.n	800bb68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2202      	movs	r2, #2
 800ba98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a30      	ldr	r2, [pc, #192]	; (800bb74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d004      	beq.n	800bac0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a2f      	ldr	r2, [pc, #188]	; (800bb78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d108      	bne.n	800bad2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bac6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	4313      	orrs	r3, r2
 800bad0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bad8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	68fa      	ldr	r2, [r7, #12]
 800bae0:	4313      	orrs	r3, r2
 800bae2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a20      	ldr	r2, [pc, #128]	; (800bb74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d022      	beq.n	800bb3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bafe:	d01d      	beq.n	800bb3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a1d      	ldr	r2, [pc, #116]	; (800bb7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d018      	beq.n	800bb3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a1c      	ldr	r2, [pc, #112]	; (800bb80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d013      	beq.n	800bb3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a1a      	ldr	r2, [pc, #104]	; (800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d00e      	beq.n	800bb3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a15      	ldr	r2, [pc, #84]	; (800bb78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d009      	beq.n	800bb3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4a16      	ldr	r2, [pc, #88]	; (800bb88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d004      	beq.n	800bb3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a15      	ldr	r2, [pc, #84]	; (800bb8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d10c      	bne.n	800bb56 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	68ba      	ldr	r2, [r7, #8]
 800bb54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2201      	movs	r2, #1
 800bb5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2200      	movs	r2, #0
 800bb62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb66:	2300      	movs	r3, #0
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3714      	adds	r7, #20
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr
 800bb74:	40010000 	.word	0x40010000
 800bb78:	40010400 	.word	0x40010400
 800bb7c:	40000400 	.word	0x40000400
 800bb80:	40000800 	.word	0x40000800
 800bb84:	40000c00 	.word	0x40000c00
 800bb88:	40014000 	.word	0x40014000
 800bb8c:	40001800 	.word	0x40001800

0800bb90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b085      	sub	sp, #20
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d101      	bne.n	800bbac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bba8:	2302      	movs	r3, #2
 800bbaa:	e065      	b.n	800bc78 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	691b      	ldr	r3, [r3, #16]
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	695b      	ldr	r3, [r3, #20]
 800bc04:	4313      	orrs	r3, r2
 800bc06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc12:	4313      	orrs	r3, r2
 800bc14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	699b      	ldr	r3, [r3, #24]
 800bc20:	041b      	lsls	r3, r3, #16
 800bc22:	4313      	orrs	r3, r2
 800bc24:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a16      	ldr	r2, [pc, #88]	; (800bc84 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d004      	beq.n	800bc3a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4a14      	ldr	r2, [pc, #80]	; (800bc88 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d115      	bne.n	800bc66 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc44:	051b      	lsls	r3, r3, #20
 800bc46:	4313      	orrs	r3, r2
 800bc48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	69db      	ldr	r3, [r3, #28]
 800bc54:	4313      	orrs	r3, r2
 800bc56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	6a1b      	ldr	r3, [r3, #32]
 800bc62:	4313      	orrs	r3, r2
 800bc64:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc76:	2300      	movs	r3, #0
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3714      	adds	r7, #20
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr
 800bc84:	40010000 	.word	0x40010000
 800bc88:	40010400 	.word	0x40010400

0800bc8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc94:	bf00      	nop
 800bc96:	370c      	adds	r7, #12
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bca8:	bf00      	nop
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bcbc:	bf00      	nop
 800bcbe:	370c      	adds	r7, #12
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b082      	sub	sp, #8
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d101      	bne.n	800bcda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e040      	b.n	800bd5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d106      	bne.n	800bcf0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f7f6 fdf8 	bl	80028e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2224      	movs	r2, #36	; 0x24
 800bcf4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f022 0201 	bic.w	r2, r2, #1
 800bd04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 f8c0 	bl	800be8c <UART_SetConfig>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d101      	bne.n	800bd16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bd12:	2301      	movs	r3, #1
 800bd14:	e022      	b.n	800bd5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d002      	beq.n	800bd24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 fb18 	bl	800c354 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	685a      	ldr	r2, [r3, #4]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bd32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	689a      	ldr	r2, [r3, #8]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f042 0201 	orr.w	r2, r2, #1
 800bd52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 fb9f 	bl	800c498 <UART_CheckIdleState>
 800bd5a:	4603      	mov	r3, r0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3708      	adds	r7, #8
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b08a      	sub	sp, #40	; 0x28
 800bd68:	af02      	add	r7, sp, #8
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	603b      	str	r3, [r7, #0]
 800bd70:	4613      	mov	r3, r2
 800bd72:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd78:	2b20      	cmp	r3, #32
 800bd7a:	f040 8081 	bne.w	800be80 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d002      	beq.n	800bd8a <HAL_UART_Transmit+0x26>
 800bd84:	88fb      	ldrh	r3, [r7, #6]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d101      	bne.n	800bd8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	e079      	b.n	800be82 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d101      	bne.n	800bd9c <HAL_UART_Transmit+0x38>
 800bd98:	2302      	movs	r3, #2
 800bd9a:	e072      	b.n	800be82 <HAL_UART_Transmit+0x11e>
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2200      	movs	r2, #0
 800bda8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2221      	movs	r2, #33	; 0x21
 800bdb0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bdb2:	f7f7 f863 	bl	8002e7c <HAL_GetTick>
 800bdb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	88fa      	ldrh	r2, [r7, #6]
 800bdbc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	88fa      	ldrh	r2, [r7, #6]
 800bdc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdd0:	d108      	bne.n	800bde4 <HAL_UART_Transmit+0x80>
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	691b      	ldr	r3, [r3, #16]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d104      	bne.n	800bde4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800bdda:	2300      	movs	r3, #0
 800bddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	61bb      	str	r3, [r7, #24]
 800bde2:	e003      	b.n	800bdec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bde8:	2300      	movs	r3, #0
 800bdea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800bdf4:	e02c      	b.n	800be50 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	9300      	str	r3, [sp, #0]
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	2180      	movs	r1, #128	; 0x80
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f000 fb7c 	bl	800c4fe <UART_WaitOnFlagUntilTimeout>
 800be06:	4603      	mov	r3, r0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d001      	beq.n	800be10 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800be0c:	2303      	movs	r3, #3
 800be0e:	e038      	b.n	800be82 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800be10:	69fb      	ldr	r3, [r7, #28]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d10b      	bne.n	800be2e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	881b      	ldrh	r3, [r3, #0]
 800be1a:	461a      	mov	r2, r3
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800be26:	69bb      	ldr	r3, [r7, #24]
 800be28:	3302      	adds	r3, #2
 800be2a:	61bb      	str	r3, [r7, #24]
 800be2c:	e007      	b.n	800be3e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	781a      	ldrb	r2, [r3, #0]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	3301      	adds	r3, #1
 800be3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800be44:	b29b      	uxth	r3, r3
 800be46:	3b01      	subs	r3, #1
 800be48:	b29a      	uxth	r2, r3
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800be56:	b29b      	uxth	r3, r3
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d1cc      	bne.n	800bdf6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	9300      	str	r3, [sp, #0]
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	2200      	movs	r2, #0
 800be64:	2140      	movs	r1, #64	; 0x40
 800be66:	68f8      	ldr	r0, [r7, #12]
 800be68:	f000 fb49 	bl	800c4fe <UART_WaitOnFlagUntilTimeout>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d001      	beq.n	800be76 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800be72:	2303      	movs	r3, #3
 800be74:	e005      	b.n	800be82 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2220      	movs	r2, #32
 800be7a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800be7c:	2300      	movs	r3, #0
 800be7e:	e000      	b.n	800be82 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800be80:	2302      	movs	r3, #2
  }
}
 800be82:	4618      	mov	r0, r3
 800be84:	3720      	adds	r7, #32
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
	...

0800be8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b088      	sub	sp, #32
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be94:	2300      	movs	r3, #0
 800be96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	689a      	ldr	r2, [r3, #8]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	691b      	ldr	r3, [r3, #16]
 800bea0:	431a      	orrs	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	695b      	ldr	r3, [r3, #20]
 800bea6:	431a      	orrs	r2, r3
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	69db      	ldr	r3, [r3, #28]
 800beac:	4313      	orrs	r3, r2
 800beae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	4ba6      	ldr	r3, [pc, #664]	; (800c150 <UART_SetConfig+0x2c4>)
 800beb8:	4013      	ands	r3, r2
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	6812      	ldr	r2, [r2, #0]
 800bebe:	6979      	ldr	r1, [r7, #20]
 800bec0:	430b      	orrs	r3, r1
 800bec2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	68da      	ldr	r2, [r3, #12]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	430a      	orrs	r2, r1
 800bed8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	699b      	ldr	r3, [r3, #24]
 800bede:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6a1b      	ldr	r3, [r3, #32]
 800bee4:	697a      	ldr	r2, [r7, #20]
 800bee6:	4313      	orrs	r3, r2
 800bee8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	697a      	ldr	r2, [r7, #20]
 800befa:	430a      	orrs	r2, r1
 800befc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4a94      	ldr	r2, [pc, #592]	; (800c154 <UART_SetConfig+0x2c8>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d120      	bne.n	800bf4a <UART_SetConfig+0xbe>
 800bf08:	4b93      	ldr	r3, [pc, #588]	; (800c158 <UART_SetConfig+0x2cc>)
 800bf0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf0e:	f003 0303 	and.w	r3, r3, #3
 800bf12:	2b03      	cmp	r3, #3
 800bf14:	d816      	bhi.n	800bf44 <UART_SetConfig+0xb8>
 800bf16:	a201      	add	r2, pc, #4	; (adr r2, 800bf1c <UART_SetConfig+0x90>)
 800bf18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf1c:	0800bf2d 	.word	0x0800bf2d
 800bf20:	0800bf39 	.word	0x0800bf39
 800bf24:	0800bf33 	.word	0x0800bf33
 800bf28:	0800bf3f 	.word	0x0800bf3f
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	77fb      	strb	r3, [r7, #31]
 800bf30:	e150      	b.n	800c1d4 <UART_SetConfig+0x348>
 800bf32:	2302      	movs	r3, #2
 800bf34:	77fb      	strb	r3, [r7, #31]
 800bf36:	e14d      	b.n	800c1d4 <UART_SetConfig+0x348>
 800bf38:	2304      	movs	r3, #4
 800bf3a:	77fb      	strb	r3, [r7, #31]
 800bf3c:	e14a      	b.n	800c1d4 <UART_SetConfig+0x348>
 800bf3e:	2308      	movs	r3, #8
 800bf40:	77fb      	strb	r3, [r7, #31]
 800bf42:	e147      	b.n	800c1d4 <UART_SetConfig+0x348>
 800bf44:	2310      	movs	r3, #16
 800bf46:	77fb      	strb	r3, [r7, #31]
 800bf48:	e144      	b.n	800c1d4 <UART_SetConfig+0x348>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4a83      	ldr	r2, [pc, #524]	; (800c15c <UART_SetConfig+0x2d0>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d132      	bne.n	800bfba <UART_SetConfig+0x12e>
 800bf54:	4b80      	ldr	r3, [pc, #512]	; (800c158 <UART_SetConfig+0x2cc>)
 800bf56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf5a:	f003 030c 	and.w	r3, r3, #12
 800bf5e:	2b0c      	cmp	r3, #12
 800bf60:	d828      	bhi.n	800bfb4 <UART_SetConfig+0x128>
 800bf62:	a201      	add	r2, pc, #4	; (adr r2, 800bf68 <UART_SetConfig+0xdc>)
 800bf64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf68:	0800bf9d 	.word	0x0800bf9d
 800bf6c:	0800bfb5 	.word	0x0800bfb5
 800bf70:	0800bfb5 	.word	0x0800bfb5
 800bf74:	0800bfb5 	.word	0x0800bfb5
 800bf78:	0800bfa9 	.word	0x0800bfa9
 800bf7c:	0800bfb5 	.word	0x0800bfb5
 800bf80:	0800bfb5 	.word	0x0800bfb5
 800bf84:	0800bfb5 	.word	0x0800bfb5
 800bf88:	0800bfa3 	.word	0x0800bfa3
 800bf8c:	0800bfb5 	.word	0x0800bfb5
 800bf90:	0800bfb5 	.word	0x0800bfb5
 800bf94:	0800bfb5 	.word	0x0800bfb5
 800bf98:	0800bfaf 	.word	0x0800bfaf
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	77fb      	strb	r3, [r7, #31]
 800bfa0:	e118      	b.n	800c1d4 <UART_SetConfig+0x348>
 800bfa2:	2302      	movs	r3, #2
 800bfa4:	77fb      	strb	r3, [r7, #31]
 800bfa6:	e115      	b.n	800c1d4 <UART_SetConfig+0x348>
 800bfa8:	2304      	movs	r3, #4
 800bfaa:	77fb      	strb	r3, [r7, #31]
 800bfac:	e112      	b.n	800c1d4 <UART_SetConfig+0x348>
 800bfae:	2308      	movs	r3, #8
 800bfb0:	77fb      	strb	r3, [r7, #31]
 800bfb2:	e10f      	b.n	800c1d4 <UART_SetConfig+0x348>
 800bfb4:	2310      	movs	r3, #16
 800bfb6:	77fb      	strb	r3, [r7, #31]
 800bfb8:	e10c      	b.n	800c1d4 <UART_SetConfig+0x348>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4a68      	ldr	r2, [pc, #416]	; (800c160 <UART_SetConfig+0x2d4>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d120      	bne.n	800c006 <UART_SetConfig+0x17a>
 800bfc4:	4b64      	ldr	r3, [pc, #400]	; (800c158 <UART_SetConfig+0x2cc>)
 800bfc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bfce:	2b30      	cmp	r3, #48	; 0x30
 800bfd0:	d013      	beq.n	800bffa <UART_SetConfig+0x16e>
 800bfd2:	2b30      	cmp	r3, #48	; 0x30
 800bfd4:	d814      	bhi.n	800c000 <UART_SetConfig+0x174>
 800bfd6:	2b20      	cmp	r3, #32
 800bfd8:	d009      	beq.n	800bfee <UART_SetConfig+0x162>
 800bfda:	2b20      	cmp	r3, #32
 800bfdc:	d810      	bhi.n	800c000 <UART_SetConfig+0x174>
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d002      	beq.n	800bfe8 <UART_SetConfig+0x15c>
 800bfe2:	2b10      	cmp	r3, #16
 800bfe4:	d006      	beq.n	800bff4 <UART_SetConfig+0x168>
 800bfe6:	e00b      	b.n	800c000 <UART_SetConfig+0x174>
 800bfe8:	2300      	movs	r3, #0
 800bfea:	77fb      	strb	r3, [r7, #31]
 800bfec:	e0f2      	b.n	800c1d4 <UART_SetConfig+0x348>
 800bfee:	2302      	movs	r3, #2
 800bff0:	77fb      	strb	r3, [r7, #31]
 800bff2:	e0ef      	b.n	800c1d4 <UART_SetConfig+0x348>
 800bff4:	2304      	movs	r3, #4
 800bff6:	77fb      	strb	r3, [r7, #31]
 800bff8:	e0ec      	b.n	800c1d4 <UART_SetConfig+0x348>
 800bffa:	2308      	movs	r3, #8
 800bffc:	77fb      	strb	r3, [r7, #31]
 800bffe:	e0e9      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c000:	2310      	movs	r3, #16
 800c002:	77fb      	strb	r3, [r7, #31]
 800c004:	e0e6      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a56      	ldr	r2, [pc, #344]	; (800c164 <UART_SetConfig+0x2d8>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d120      	bne.n	800c052 <UART_SetConfig+0x1c6>
 800c010:	4b51      	ldr	r3, [pc, #324]	; (800c158 <UART_SetConfig+0x2cc>)
 800c012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c016:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c01a:	2bc0      	cmp	r3, #192	; 0xc0
 800c01c:	d013      	beq.n	800c046 <UART_SetConfig+0x1ba>
 800c01e:	2bc0      	cmp	r3, #192	; 0xc0
 800c020:	d814      	bhi.n	800c04c <UART_SetConfig+0x1c0>
 800c022:	2b80      	cmp	r3, #128	; 0x80
 800c024:	d009      	beq.n	800c03a <UART_SetConfig+0x1ae>
 800c026:	2b80      	cmp	r3, #128	; 0x80
 800c028:	d810      	bhi.n	800c04c <UART_SetConfig+0x1c0>
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d002      	beq.n	800c034 <UART_SetConfig+0x1a8>
 800c02e:	2b40      	cmp	r3, #64	; 0x40
 800c030:	d006      	beq.n	800c040 <UART_SetConfig+0x1b4>
 800c032:	e00b      	b.n	800c04c <UART_SetConfig+0x1c0>
 800c034:	2300      	movs	r3, #0
 800c036:	77fb      	strb	r3, [r7, #31]
 800c038:	e0cc      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c03a:	2302      	movs	r3, #2
 800c03c:	77fb      	strb	r3, [r7, #31]
 800c03e:	e0c9      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c040:	2304      	movs	r3, #4
 800c042:	77fb      	strb	r3, [r7, #31]
 800c044:	e0c6      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c046:	2308      	movs	r3, #8
 800c048:	77fb      	strb	r3, [r7, #31]
 800c04a:	e0c3      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c04c:	2310      	movs	r3, #16
 800c04e:	77fb      	strb	r3, [r7, #31]
 800c050:	e0c0      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4a44      	ldr	r2, [pc, #272]	; (800c168 <UART_SetConfig+0x2dc>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d125      	bne.n	800c0a8 <UART_SetConfig+0x21c>
 800c05c:	4b3e      	ldr	r3, [pc, #248]	; (800c158 <UART_SetConfig+0x2cc>)
 800c05e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c06a:	d017      	beq.n	800c09c <UART_SetConfig+0x210>
 800c06c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c070:	d817      	bhi.n	800c0a2 <UART_SetConfig+0x216>
 800c072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c076:	d00b      	beq.n	800c090 <UART_SetConfig+0x204>
 800c078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c07c:	d811      	bhi.n	800c0a2 <UART_SetConfig+0x216>
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d003      	beq.n	800c08a <UART_SetConfig+0x1fe>
 800c082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c086:	d006      	beq.n	800c096 <UART_SetConfig+0x20a>
 800c088:	e00b      	b.n	800c0a2 <UART_SetConfig+0x216>
 800c08a:	2300      	movs	r3, #0
 800c08c:	77fb      	strb	r3, [r7, #31]
 800c08e:	e0a1      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c090:	2302      	movs	r3, #2
 800c092:	77fb      	strb	r3, [r7, #31]
 800c094:	e09e      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c096:	2304      	movs	r3, #4
 800c098:	77fb      	strb	r3, [r7, #31]
 800c09a:	e09b      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c09c:	2308      	movs	r3, #8
 800c09e:	77fb      	strb	r3, [r7, #31]
 800c0a0:	e098      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c0a2:	2310      	movs	r3, #16
 800c0a4:	77fb      	strb	r3, [r7, #31]
 800c0a6:	e095      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a2f      	ldr	r2, [pc, #188]	; (800c16c <UART_SetConfig+0x2e0>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d125      	bne.n	800c0fe <UART_SetConfig+0x272>
 800c0b2:	4b29      	ldr	r3, [pc, #164]	; (800c158 <UART_SetConfig+0x2cc>)
 800c0b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c0bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c0c0:	d017      	beq.n	800c0f2 <UART_SetConfig+0x266>
 800c0c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c0c6:	d817      	bhi.n	800c0f8 <UART_SetConfig+0x26c>
 800c0c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0cc:	d00b      	beq.n	800c0e6 <UART_SetConfig+0x25a>
 800c0ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0d2:	d811      	bhi.n	800c0f8 <UART_SetConfig+0x26c>
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d003      	beq.n	800c0e0 <UART_SetConfig+0x254>
 800c0d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0dc:	d006      	beq.n	800c0ec <UART_SetConfig+0x260>
 800c0de:	e00b      	b.n	800c0f8 <UART_SetConfig+0x26c>
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	77fb      	strb	r3, [r7, #31]
 800c0e4:	e076      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c0e6:	2302      	movs	r3, #2
 800c0e8:	77fb      	strb	r3, [r7, #31]
 800c0ea:	e073      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c0ec:	2304      	movs	r3, #4
 800c0ee:	77fb      	strb	r3, [r7, #31]
 800c0f0:	e070      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c0f2:	2308      	movs	r3, #8
 800c0f4:	77fb      	strb	r3, [r7, #31]
 800c0f6:	e06d      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c0f8:	2310      	movs	r3, #16
 800c0fa:	77fb      	strb	r3, [r7, #31]
 800c0fc:	e06a      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4a1b      	ldr	r2, [pc, #108]	; (800c170 <UART_SetConfig+0x2e4>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d138      	bne.n	800c17a <UART_SetConfig+0x2ee>
 800c108:	4b13      	ldr	r3, [pc, #76]	; (800c158 <UART_SetConfig+0x2cc>)
 800c10a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c10e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c112:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c116:	d017      	beq.n	800c148 <UART_SetConfig+0x2bc>
 800c118:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c11c:	d82a      	bhi.n	800c174 <UART_SetConfig+0x2e8>
 800c11e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c122:	d00b      	beq.n	800c13c <UART_SetConfig+0x2b0>
 800c124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c128:	d824      	bhi.n	800c174 <UART_SetConfig+0x2e8>
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d003      	beq.n	800c136 <UART_SetConfig+0x2aa>
 800c12e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c132:	d006      	beq.n	800c142 <UART_SetConfig+0x2b6>
 800c134:	e01e      	b.n	800c174 <UART_SetConfig+0x2e8>
 800c136:	2300      	movs	r3, #0
 800c138:	77fb      	strb	r3, [r7, #31]
 800c13a:	e04b      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c13c:	2302      	movs	r3, #2
 800c13e:	77fb      	strb	r3, [r7, #31]
 800c140:	e048      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c142:	2304      	movs	r3, #4
 800c144:	77fb      	strb	r3, [r7, #31]
 800c146:	e045      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c148:	2308      	movs	r3, #8
 800c14a:	77fb      	strb	r3, [r7, #31]
 800c14c:	e042      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c14e:	bf00      	nop
 800c150:	efff69f3 	.word	0xefff69f3
 800c154:	40011000 	.word	0x40011000
 800c158:	40023800 	.word	0x40023800
 800c15c:	40004400 	.word	0x40004400
 800c160:	40004800 	.word	0x40004800
 800c164:	40004c00 	.word	0x40004c00
 800c168:	40005000 	.word	0x40005000
 800c16c:	40011400 	.word	0x40011400
 800c170:	40007800 	.word	0x40007800
 800c174:	2310      	movs	r3, #16
 800c176:	77fb      	strb	r3, [r7, #31]
 800c178:	e02c      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	4a72      	ldr	r2, [pc, #456]	; (800c348 <UART_SetConfig+0x4bc>)
 800c180:	4293      	cmp	r3, r2
 800c182:	d125      	bne.n	800c1d0 <UART_SetConfig+0x344>
 800c184:	4b71      	ldr	r3, [pc, #452]	; (800c34c <UART_SetConfig+0x4c0>)
 800c186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c18a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c18e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c192:	d017      	beq.n	800c1c4 <UART_SetConfig+0x338>
 800c194:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c198:	d817      	bhi.n	800c1ca <UART_SetConfig+0x33e>
 800c19a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c19e:	d00b      	beq.n	800c1b8 <UART_SetConfig+0x32c>
 800c1a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1a4:	d811      	bhi.n	800c1ca <UART_SetConfig+0x33e>
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d003      	beq.n	800c1b2 <UART_SetConfig+0x326>
 800c1aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1ae:	d006      	beq.n	800c1be <UART_SetConfig+0x332>
 800c1b0:	e00b      	b.n	800c1ca <UART_SetConfig+0x33e>
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	77fb      	strb	r3, [r7, #31]
 800c1b6:	e00d      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c1b8:	2302      	movs	r3, #2
 800c1ba:	77fb      	strb	r3, [r7, #31]
 800c1bc:	e00a      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c1be:	2304      	movs	r3, #4
 800c1c0:	77fb      	strb	r3, [r7, #31]
 800c1c2:	e007      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c1c4:	2308      	movs	r3, #8
 800c1c6:	77fb      	strb	r3, [r7, #31]
 800c1c8:	e004      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c1ca:	2310      	movs	r3, #16
 800c1cc:	77fb      	strb	r3, [r7, #31]
 800c1ce:	e001      	b.n	800c1d4 <UART_SetConfig+0x348>
 800c1d0:	2310      	movs	r3, #16
 800c1d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	69db      	ldr	r3, [r3, #28]
 800c1d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1dc:	d15c      	bne.n	800c298 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 800c1de:	7ffb      	ldrb	r3, [r7, #31]
 800c1e0:	2b08      	cmp	r3, #8
 800c1e2:	d828      	bhi.n	800c236 <UART_SetConfig+0x3aa>
 800c1e4:	a201      	add	r2, pc, #4	; (adr r2, 800c1ec <UART_SetConfig+0x360>)
 800c1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ea:	bf00      	nop
 800c1ec:	0800c211 	.word	0x0800c211
 800c1f0:	0800c219 	.word	0x0800c219
 800c1f4:	0800c221 	.word	0x0800c221
 800c1f8:	0800c237 	.word	0x0800c237
 800c1fc:	0800c227 	.word	0x0800c227
 800c200:	0800c237 	.word	0x0800c237
 800c204:	0800c237 	.word	0x0800c237
 800c208:	0800c237 	.word	0x0800c237
 800c20c:	0800c22f 	.word	0x0800c22f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c210:	f7fb ff0a 	bl	8008028 <HAL_RCC_GetPCLK1Freq>
 800c214:	61b8      	str	r0, [r7, #24]
        break;
 800c216:	e013      	b.n	800c240 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c218:	f7fb ff1a 	bl	8008050 <HAL_RCC_GetPCLK2Freq>
 800c21c:	61b8      	str	r0, [r7, #24]
        break;
 800c21e:	e00f      	b.n	800c240 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c220:	4b4b      	ldr	r3, [pc, #300]	; (800c350 <UART_SetConfig+0x4c4>)
 800c222:	61bb      	str	r3, [r7, #24]
        break;
 800c224:	e00c      	b.n	800c240 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c226:	f7fb fe2d 	bl	8007e84 <HAL_RCC_GetSysClockFreq>
 800c22a:	61b8      	str	r0, [r7, #24]
        break;
 800c22c:	e008      	b.n	800c240 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c22e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c232:	61bb      	str	r3, [r7, #24]
        break;
 800c234:	e004      	b.n	800c240 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c236:	2300      	movs	r3, #0
 800c238:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c23a:	2301      	movs	r3, #1
 800c23c:	77bb      	strb	r3, [r7, #30]
        break;
 800c23e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d074      	beq.n	800c330 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	005a      	lsls	r2, r3, #1
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	085b      	lsrs	r3, r3, #1
 800c250:	441a      	add	r2, r3
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	fbb2 f3f3 	udiv	r3, r2, r3
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	2b0f      	cmp	r3, #15
 800c262:	d916      	bls.n	800c292 <UART_SetConfig+0x406>
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c26a:	d212      	bcs.n	800c292 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	b29b      	uxth	r3, r3
 800c270:	f023 030f 	bic.w	r3, r3, #15
 800c274:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	085b      	lsrs	r3, r3, #1
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	f003 0307 	and.w	r3, r3, #7
 800c280:	b29a      	uxth	r2, r3
 800c282:	89fb      	ldrh	r3, [r7, #14]
 800c284:	4313      	orrs	r3, r2
 800c286:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	89fa      	ldrh	r2, [r7, #14]
 800c28e:	60da      	str	r2, [r3, #12]
 800c290:	e04e      	b.n	800c330 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c292:	2301      	movs	r3, #1
 800c294:	77bb      	strb	r3, [r7, #30]
 800c296:	e04b      	b.n	800c330 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c298:	7ffb      	ldrb	r3, [r7, #31]
 800c29a:	2b08      	cmp	r3, #8
 800c29c:	d827      	bhi.n	800c2ee <UART_SetConfig+0x462>
 800c29e:	a201      	add	r2, pc, #4	; (adr r2, 800c2a4 <UART_SetConfig+0x418>)
 800c2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a4:	0800c2c9 	.word	0x0800c2c9
 800c2a8:	0800c2d1 	.word	0x0800c2d1
 800c2ac:	0800c2d9 	.word	0x0800c2d9
 800c2b0:	0800c2ef 	.word	0x0800c2ef
 800c2b4:	0800c2df 	.word	0x0800c2df
 800c2b8:	0800c2ef 	.word	0x0800c2ef
 800c2bc:	0800c2ef 	.word	0x0800c2ef
 800c2c0:	0800c2ef 	.word	0x0800c2ef
 800c2c4:	0800c2e7 	.word	0x0800c2e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2c8:	f7fb feae 	bl	8008028 <HAL_RCC_GetPCLK1Freq>
 800c2cc:	61b8      	str	r0, [r7, #24]
        break;
 800c2ce:	e013      	b.n	800c2f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c2d0:	f7fb febe 	bl	8008050 <HAL_RCC_GetPCLK2Freq>
 800c2d4:	61b8      	str	r0, [r7, #24]
        break;
 800c2d6:	e00f      	b.n	800c2f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c2d8:	4b1d      	ldr	r3, [pc, #116]	; (800c350 <UART_SetConfig+0x4c4>)
 800c2da:	61bb      	str	r3, [r7, #24]
        break;
 800c2dc:	e00c      	b.n	800c2f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c2de:	f7fb fdd1 	bl	8007e84 <HAL_RCC_GetSysClockFreq>
 800c2e2:	61b8      	str	r0, [r7, #24]
        break;
 800c2e4:	e008      	b.n	800c2f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2ea:	61bb      	str	r3, [r7, #24]
        break;
 800c2ec:	e004      	b.n	800c2f8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	77bb      	strb	r3, [r7, #30]
        break;
 800c2f6:	bf00      	nop
    }

    if (pclk != 0U)
 800c2f8:	69bb      	ldr	r3, [r7, #24]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d018      	beq.n	800c330 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	685b      	ldr	r3, [r3, #4]
 800c302:	085a      	lsrs	r2, r3, #1
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	441a      	add	r2, r3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c310:	b29b      	uxth	r3, r3
 800c312:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	2b0f      	cmp	r3, #15
 800c318:	d908      	bls.n	800c32c <UART_SetConfig+0x4a0>
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c320:	d204      	bcs.n	800c32c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	693a      	ldr	r2, [r7, #16]
 800c328:	60da      	str	r2, [r3, #12]
 800c32a:	e001      	b.n	800c330 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c32c:	2301      	movs	r3, #1
 800c32e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2200      	movs	r2, #0
 800c334:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c33c:	7fbb      	ldrb	r3, [r7, #30]
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3720      	adds	r7, #32
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	40007c00 	.word	0x40007c00
 800c34c:	40023800 	.word	0x40023800
 800c350:	00f42400 	.word	0x00f42400

0800c354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c360:	f003 0301 	and.w	r3, r3, #1
 800c364:	2b00      	cmp	r3, #0
 800c366:	d00a      	beq.n	800c37e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	430a      	orrs	r2, r1
 800c37c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c382:	f003 0302 	and.w	r3, r3, #2
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00a      	beq.n	800c3a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	430a      	orrs	r2, r1
 800c39e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a4:	f003 0304 	and.w	r3, r3, #4
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d00a      	beq.n	800c3c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	430a      	orrs	r2, r1
 800c3c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c6:	f003 0308 	and.w	r3, r3, #8
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d00a      	beq.n	800c3e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	430a      	orrs	r2, r1
 800c3e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e8:	f003 0310 	and.w	r3, r3, #16
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00a      	beq.n	800c406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	689b      	ldr	r3, [r3, #8]
 800c3f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	430a      	orrs	r2, r1
 800c404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c40a:	f003 0320 	and.w	r3, r3, #32
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00a      	beq.n	800c428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	430a      	orrs	r2, r1
 800c426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c42c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c430:	2b00      	cmp	r3, #0
 800c432:	d01a      	beq.n	800c46a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	430a      	orrs	r2, r1
 800c448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c44e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c452:	d10a      	bne.n	800c46a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	430a      	orrs	r2, r1
 800c468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c46e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c472:	2b00      	cmp	r3, #0
 800c474:	d00a      	beq.n	800c48c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	430a      	orrs	r2, r1
 800c48a:	605a      	str	r2, [r3, #4]
  }
}
 800c48c:	bf00      	nop
 800c48e:	370c      	adds	r7, #12
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr

0800c498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b086      	sub	sp, #24
 800c49c:	af02      	add	r7, sp, #8
 800c49e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c4a8:	f7f6 fce8 	bl	8002e7c <HAL_GetTick>
 800c4ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f003 0308 	and.w	r3, r3, #8
 800c4b8:	2b08      	cmp	r3, #8
 800c4ba:	d10e      	bne.n	800c4da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c4c0:	9300      	str	r3, [sp, #0]
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 f817 	bl	800c4fe <UART_WaitOnFlagUntilTimeout>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d001      	beq.n	800c4da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4d6:	2303      	movs	r3, #3
 800c4d8:	e00d      	b.n	800c4f6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2220      	movs	r2, #32
 800c4de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2220      	movs	r2, #32
 800c4e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c4f4:	2300      	movs	r3, #0
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3710      	adds	r7, #16
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b084      	sub	sp, #16
 800c502:	af00      	add	r7, sp, #0
 800c504:	60f8      	str	r0, [r7, #12]
 800c506:	60b9      	str	r1, [r7, #8]
 800c508:	603b      	str	r3, [r7, #0]
 800c50a:	4613      	mov	r3, r2
 800c50c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c50e:	e05e      	b.n	800c5ce <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c510:	69bb      	ldr	r3, [r7, #24]
 800c512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c516:	d05a      	beq.n	800c5ce <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c518:	f7f6 fcb0 	bl	8002e7c <HAL_GetTick>
 800c51c:	4602      	mov	r2, r0
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	69ba      	ldr	r2, [r7, #24]
 800c524:	429a      	cmp	r2, r3
 800c526:	d302      	bcc.n	800c52e <UART_WaitOnFlagUntilTimeout+0x30>
 800c528:	69bb      	ldr	r3, [r7, #24]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d11b      	bne.n	800c566 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c53c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	689a      	ldr	r2, [r3, #8]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f022 0201 	bic.w	r2, r2, #1
 800c54c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	2220      	movs	r2, #32
 800c552:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2220      	movs	r2, #32
 800c558:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2200      	movs	r2, #0
 800c55e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c562:	2303      	movs	r3, #3
 800c564:	e043      	b.n	800c5ee <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f003 0304 	and.w	r3, r3, #4
 800c570:	2b00      	cmp	r3, #0
 800c572:	d02c      	beq.n	800c5ce <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	69db      	ldr	r3, [r3, #28]
 800c57a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c57e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c582:	d124      	bne.n	800c5ce <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c58c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c59c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	689a      	ldr	r2, [r3, #8]
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f022 0201 	bic.w	r2, r2, #1
 800c5ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2220      	movs	r2, #32
 800c5b2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2220      	movs	r2, #32
 800c5b8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2220      	movs	r2, #32
 800c5be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c5ca:	2303      	movs	r3, #3
 800c5cc:	e00f      	b.n	800c5ee <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	69da      	ldr	r2, [r3, #28]
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	4013      	ands	r3, r2
 800c5d8:	68ba      	ldr	r2, [r7, #8]
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	bf0c      	ite	eq
 800c5de:	2301      	moveq	r3, #1
 800c5e0:	2300      	movne	r3, #0
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	79fb      	ldrb	r3, [r7, #7]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d091      	beq.n	800c510 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3710      	adds	r7, #16
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
	...

0800c5f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b085      	sub	sp, #20
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800c602:	2300      	movs	r3, #0
 800c604:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800c606:	2300      	movs	r3, #0
 800c608:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d027      	beq.n	800c662 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c618:	68fa      	ldr	r2, [r7, #12]
 800c61a:	4b2f      	ldr	r3, [pc, #188]	; (800c6d8 <FMC_SDRAM_Init+0xe0>)
 800c61c:	4013      	ands	r3, r2
 800c61e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c628:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800c62e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800c634:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800c63a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800c640:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800c646:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800c64c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c652:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	4313      	orrs	r3, r2
 800c658:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	68fa      	ldr	r2, [r7, #12]
 800c65e:	601a      	str	r2, [r3, #0]
 800c660:	e032      	b.n	800c6c8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c66e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c678:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c67e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	4313      	orrs	r3, r2
 800c684:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c68c:	68ba      	ldr	r2, [r7, #8]
 800c68e:	4b12      	ldr	r3, [pc, #72]	; (800c6d8 <FMC_SDRAM_Init+0xe0>)
 800c690:	4013      	ands	r3, r2
 800c692:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c69c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800c6a2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800c6a8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800c6ae:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800c6b4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c6b6:	68ba      	ldr	r2, [r7, #8]
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	68fa      	ldr	r2, [r7, #12]
 800c6c0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	68ba      	ldr	r2, [r7, #8]
 800c6c6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800c6c8:	2300      	movs	r3, #0
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3714      	adds	r7, #20
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop
 800c6d8:	ffff8000 	.word	0xffff8000

0800c6dc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b087      	sub	sp, #28
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d02e      	beq.n	800c754 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	689b      	ldr	r3, [r3, #8]
 800c6fa:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c702:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	3b01      	subs	r3, #1
 800c710:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c712:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	689b      	ldr	r3, [r3, #8]
 800c718:	3b01      	subs	r3, #1
 800c71a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c71c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	3b01      	subs	r3, #1
 800c724:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c726:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	691b      	ldr	r3, [r3, #16]
 800c72c:	3b01      	subs	r3, #1
 800c72e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c730:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	695b      	ldr	r3, [r3, #20]
 800c736:	3b01      	subs	r3, #1
 800c738:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c73a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	699b      	ldr	r3, [r3, #24]
 800c740:	3b01      	subs	r3, #1
 800c742:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c744:	4313      	orrs	r3, r2
 800c746:	697a      	ldr	r2, [r7, #20]
 800c748:	4313      	orrs	r3, r2
 800c74a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	697a      	ldr	r2, [r7, #20]
 800c750:	609a      	str	r2, [r3, #8]
 800c752:	e039      	b.n	800c7c8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	689b      	ldr	r3, [r3, #8]
 800c758:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c75a:	697a      	ldr	r2, [r7, #20]
 800c75c:	4b1e      	ldr	r3, [pc, #120]	; (800c7d8 <FMC_SDRAM_Timing_Init+0xfc>)
 800c75e:	4013      	ands	r3, r2
 800c760:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	3b01      	subs	r3, #1
 800c768:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	695b      	ldr	r3, [r3, #20]
 800c76e:	3b01      	subs	r3, #1
 800c770:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c772:	4313      	orrs	r3, r2
 800c774:	697a      	ldr	r2, [r7, #20]
 800c776:	4313      	orrs	r3, r2
 800c778:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	68db      	ldr	r3, [r3, #12]
 800c77e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c786:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	3b01      	subs	r3, #1
 800c794:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c796:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	689b      	ldr	r3, [r3, #8]
 800c79c:	3b01      	subs	r3, #1
 800c79e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c7a0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	691b      	ldr	r3, [r3, #16]
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c7aa:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	699b      	ldr	r3, [r3, #24]
 800c7b0:	3b01      	subs	r3, #1
 800c7b2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	693a      	ldr	r2, [r7, #16]
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	697a      	ldr	r2, [r7, #20]
 800c7c0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	693a      	ldr	r2, [r7, #16]
 800c7c6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800c7c8:	2300      	movs	r3, #0
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	371c      	adds	r7, #28
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr
 800c7d6:	bf00      	nop
 800c7d8:	ff0f0fff 	.word	0xff0f0fff

0800c7dc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800c7dc:	b480      	push	{r7}
 800c7de:	b085      	sub	sp, #20
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	60b9      	str	r1, [r7, #8]
 800c7e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	691a      	ldr	r2, [r3, #16]
 800c7ec:	4b0c      	ldr	r3, [pc, #48]	; (800c820 <FMC_SDRAM_SendCommand+0x44>)
 800c7ee:	4013      	ands	r3, r2
 800c7f0:	68ba      	ldr	r2, [r7, #8]
 800c7f2:	6811      	ldr	r1, [r2, #0]
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	6852      	ldr	r2, [r2, #4]
 800c7f8:	4311      	orrs	r1, r2
 800c7fa:	68ba      	ldr	r2, [r7, #8]
 800c7fc:	6892      	ldr	r2, [r2, #8]
 800c7fe:	3a01      	subs	r2, #1
 800c800:	0152      	lsls	r2, r2, #5
 800c802:	4311      	orrs	r1, r2
 800c804:	68ba      	ldr	r2, [r7, #8]
 800c806:	68d2      	ldr	r2, [r2, #12]
 800c808:	0252      	lsls	r2, r2, #9
 800c80a:	430a      	orrs	r2, r1
 800c80c:	431a      	orrs	r2, r3
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800c812:	2300      	movs	r3, #0
}
 800c814:	4618      	mov	r0, r3
 800c816:	3714      	adds	r7, #20
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr
 800c820:	ffc00000 	.word	0xffc00000

0800c824 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	695a      	ldr	r2, [r3, #20]
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	005b      	lsls	r3, r3, #1
 800c836:	431a      	orrs	r2, r3
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800c83c:	2300      	movs	r3, #0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	370c      	adds	r7, #12
 800c842:	46bd      	mov	sp, r7
 800c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c848:	4770      	bx	lr
	...

0800c84c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c84c:	b084      	sub	sp, #16
 800c84e:	b480      	push	{r7}
 800c850:	b085      	sub	sp, #20
 800c852:	af00      	add	r7, sp, #0
 800c854:	6078      	str	r0, [r7, #4]
 800c856:	f107 001c 	add.w	r0, r7, #28
 800c85a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c85e:	2300      	movs	r3, #0
 800c860:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c862:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c864:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c866:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c86a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c86e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c872:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c876:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	4313      	orrs	r3, r2
 800c87c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	685a      	ldr	r2, [r3, #4]
 800c882:	4b07      	ldr	r3, [pc, #28]	; (800c8a0 <SDMMC_Init+0x54>)
 800c884:	4013      	ands	r3, r2
 800c886:	68fa      	ldr	r2, [r7, #12]
 800c888:	431a      	orrs	r2, r3
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c88e:	2300      	movs	r3, #0
}
 800c890:	4618      	mov	r0, r3
 800c892:	3714      	adds	r7, #20
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	b004      	add	sp, #16
 800c89c:	4770      	bx	lr
 800c89e:	bf00      	nop
 800c8a0:	ffff8100 	.word	0xffff8100

0800c8a4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b083      	sub	sp, #12
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	370c      	adds	r7, #12
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr

0800c8be <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b082      	sub	sp, #8
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2203      	movs	r2, #3
 800c8ca:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c8cc:	2002      	movs	r0, #2
 800c8ce:	f7f6 fae1 	bl	8002e94 <HAL_Delay>
  
  return HAL_OK;
 800c8d2:	2300      	movs	r3, #0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3708      	adds	r7, #8
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f003 0303 	and.w	r3, r3, #3
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	370c      	adds	r7, #12
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b085      	sub	sp, #20
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c902:	2300      	movs	r3, #0
 800c904:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c916:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c91c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c922:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c924:	68fa      	ldr	r2, [r7, #12]
 800c926:	4313      	orrs	r3, r2
 800c928:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	68da      	ldr	r2, [r3, #12]
 800c92e:	4b06      	ldr	r3, [pc, #24]	; (800c948 <SDMMC_SendCommand+0x50>)
 800c930:	4013      	ands	r3, r2
 800c932:	68fa      	ldr	r2, [r7, #12]
 800c934:	431a      	orrs	r2, r3
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c93a:	2300      	movs	r3, #0
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3714      	adds	r7, #20
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr
 800c948:	fffff000 	.word	0xfffff000

0800c94c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	691b      	ldr	r3, [r3, #16]
 800c958:	b2db      	uxtb	r3, r3
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	370c      	adds	r7, #12
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr

0800c966 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c966:	b480      	push	{r7}
 800c968:	b085      	sub	sp, #20
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
 800c96e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	3314      	adds	r3, #20
 800c974:	461a      	mov	r2, r3
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	4413      	add	r3, r2
 800c97a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
}  
 800c980:	4618      	mov	r0, r3
 800c982:	3714      	adds	r7, #20
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b085      	sub	sp, #20
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c996:	2300      	movs	r3, #0
 800c998:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	685a      	ldr	r2, [r3, #4]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c9b2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c9b8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c9be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c9c0:	68fa      	ldr	r2, [r7, #12]
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ca:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	431a      	orrs	r2, r3
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c9d6:	2300      	movs	r3, #0

}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3714      	adds	r7, #20
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr

0800c9e4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b088      	sub	sp, #32
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c9f2:	2310      	movs	r3, #16
 800c9f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9f6:	2340      	movs	r3, #64	; 0x40
 800c9f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca04:	f107 0308 	add.w	r3, r7, #8
 800ca08:	4619      	mov	r1, r3
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f7ff ff74 	bl	800c8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ca10:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca14:	2110      	movs	r1, #16
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 fa46 	bl	800cea8 <SDMMC_GetCmdResp1>
 800ca1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca1e:	69fb      	ldr	r3, [r7, #28]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3720      	adds	r7, #32
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b088      	sub	sp, #32
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ca36:	2311      	movs	r3, #17
 800ca38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca3a:	2340      	movs	r3, #64	; 0x40
 800ca3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca48:	f107 0308 	add.w	r3, r7, #8
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f7ff ff52 	bl	800c8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ca54:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca58:	2111      	movs	r1, #17
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 fa24 	bl	800cea8 <SDMMC_GetCmdResp1>
 800ca60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca62:	69fb      	ldr	r3, [r7, #28]
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3720      	adds	r7, #32
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b088      	sub	sp, #32
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ca7a:	2312      	movs	r3, #18
 800ca7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca7e:	2340      	movs	r3, #64	; 0x40
 800ca80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca82:	2300      	movs	r3, #0
 800ca84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca8c:	f107 0308 	add.w	r3, r7, #8
 800ca90:	4619      	mov	r1, r3
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f7ff ff30 	bl	800c8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ca98:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca9c:	2112      	movs	r1, #18
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f000 fa02 	bl	800cea8 <SDMMC_GetCmdResp1>
 800caa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800caa6:	69fb      	ldr	r3, [r7, #28]
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3720      	adds	r7, #32
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b088      	sub	sp, #32
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cabe:	2318      	movs	r3, #24
 800cac0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cac2:	2340      	movs	r3, #64	; 0x40
 800cac4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cac6:	2300      	movs	r3, #0
 800cac8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800caca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cace:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cad0:	f107 0308 	add.w	r3, r7, #8
 800cad4:	4619      	mov	r1, r3
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f7ff ff0e 	bl	800c8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cadc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cae0:	2118      	movs	r1, #24
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f000 f9e0 	bl	800cea8 <SDMMC_GetCmdResp1>
 800cae8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800caea:	69fb      	ldr	r3, [r7, #28]
}
 800caec:	4618      	mov	r0, r3
 800caee:	3720      	adds	r7, #32
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b088      	sub	sp, #32
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cb02:	2319      	movs	r3, #25
 800cb04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb06:	2340      	movs	r3, #64	; 0x40
 800cb08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb14:	f107 0308 	add.w	r3, r7, #8
 800cb18:	4619      	mov	r1, r3
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7ff feec 	bl	800c8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cb20:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb24:	2119      	movs	r1, #25
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f000 f9be 	bl	800cea8 <SDMMC_GetCmdResp1>
 800cb2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb2e:	69fb      	ldr	r3, [r7, #28]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3720      	adds	r7, #32
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b088      	sub	sp, #32
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cb40:	2300      	movs	r3, #0
 800cb42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cb44:	230c      	movs	r3, #12
 800cb46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb48:	2340      	movs	r3, #64	; 0x40
 800cb4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb56:	f107 0308 	add.w	r3, r7, #8
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f7ff fecb 	bl	800c8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800cb62:	4a05      	ldr	r2, [pc, #20]	; (800cb78 <SDMMC_CmdStopTransfer+0x40>)
 800cb64:	210c      	movs	r1, #12
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 f99e 	bl	800cea8 <SDMMC_GetCmdResp1>
 800cb6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb6e:	69fb      	ldr	r3, [r7, #28]
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3720      	adds	r7, #32
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}
 800cb78:	05f5e100 	.word	0x05f5e100

0800cb7c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b08a      	sub	sp, #40	; 0x28
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cb8c:	2307      	movs	r3, #7
 800cb8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb90:	2340      	movs	r3, #64	; 0x40
 800cb92:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb94:	2300      	movs	r3, #0
 800cb96:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb9c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb9e:	f107 0310 	add.w	r3, r7, #16
 800cba2:	4619      	mov	r1, r3
 800cba4:	68f8      	ldr	r0, [r7, #12]
 800cba6:	f7ff fea7 	bl	800c8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800cbaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbae:	2107      	movs	r1, #7
 800cbb0:	68f8      	ldr	r0, [r7, #12]
 800cbb2:	f000 f979 	bl	800cea8 <SDMMC_GetCmdResp1>
 800cbb6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800cbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3728      	adds	r7, #40	; 0x28
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}

0800cbc2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b088      	sub	sp, #32
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbe0:	f107 0308 	add.w	r3, r7, #8
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f7ff fe86 	bl	800c8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 f92f 	bl	800ce50 <SDMMC_GetCmdError>
 800cbf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbf4:	69fb      	ldr	r3, [r7, #28]
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3720      	adds	r7, #32
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}

0800cbfe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800cbfe:	b580      	push	{r7, lr}
 800cc00:	b088      	sub	sp, #32
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cc06:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800cc0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cc0c:	2308      	movs	r3, #8
 800cc0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc10:	2340      	movs	r3, #64	; 0x40
 800cc12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc14:	2300      	movs	r3, #0
 800cc16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc1e:	f107 0308 	add.w	r3, r7, #8
 800cc22:	4619      	mov	r1, r3
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f7ff fe67 	bl	800c8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f000 fb26 	bl	800d27c <SDMMC_GetCmdResp7>
 800cc30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc32:	69fb      	ldr	r3, [r7, #28]
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3720      	adds	r7, #32
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b088      	sub	sp, #32
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cc4a:	2337      	movs	r3, #55	; 0x37
 800cc4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc4e:	2340      	movs	r3, #64	; 0x40
 800cc50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc52:	2300      	movs	r3, #0
 800cc54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc5c:	f107 0308 	add.w	r3, r7, #8
 800cc60:	4619      	mov	r1, r3
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f7ff fe48 	bl	800c8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800cc68:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc6c:	2137      	movs	r1, #55	; 0x37
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 f91a 	bl	800cea8 <SDMMC_GetCmdResp1>
 800cc74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc76:	69fb      	ldr	r3, [r7, #28]
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3720      	adds	r7, #32
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b088      	sub	sp, #32
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800cc8a:	683a      	ldr	r2, [r7, #0]
 800cc8c:	4b0d      	ldr	r3, [pc, #52]	; (800ccc4 <SDMMC_CmdAppOperCommand+0x44>)
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cc92:	2329      	movs	r3, #41	; 0x29
 800cc94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc96:	2340      	movs	r3, #64	; 0x40
 800cc98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cca2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cca4:	f107 0308 	add.w	r3, r7, #8
 800cca8:	4619      	mov	r1, r3
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7ff fe24 	bl	800c8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f000 fa2f 	bl	800d114 <SDMMC_GetCmdResp3>
 800ccb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccb8:	69fb      	ldr	r3, [r7, #28]
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3720      	adds	r7, #32
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	80100000 	.word	0x80100000

0800ccc8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b088      	sub	sp, #32
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ccd6:	2306      	movs	r3, #6
 800ccd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccda:	2340      	movs	r3, #64	; 0x40
 800ccdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccde:	2300      	movs	r3, #0
 800cce0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cce6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cce8:	f107 0308 	add.w	r3, r7, #8
 800ccec:	4619      	mov	r1, r3
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f7ff fe02 	bl	800c8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ccf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccf8:	2106      	movs	r1, #6
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 f8d4 	bl	800cea8 <SDMMC_GetCmdResp1>
 800cd00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd02:	69fb      	ldr	r3, [r7, #28]
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3720      	adds	r7, #32
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b088      	sub	sp, #32
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cd14:	2300      	movs	r3, #0
 800cd16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cd18:	2333      	movs	r3, #51	; 0x33
 800cd1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd1c:	2340      	movs	r3, #64	; 0x40
 800cd1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd20:	2300      	movs	r3, #0
 800cd22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd2a:	f107 0308 	add.w	r3, r7, #8
 800cd2e:	4619      	mov	r1, r3
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f7ff fde1 	bl	800c8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cd36:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd3a:	2133      	movs	r1, #51	; 0x33
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f000 f8b3 	bl	800cea8 <SDMMC_GetCmdResp1>
 800cd42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd44:	69fb      	ldr	r3, [r7, #28]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3720      	adds	r7, #32
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}

0800cd4e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800cd4e:	b580      	push	{r7, lr}
 800cd50:	b088      	sub	sp, #32
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cd56:	2300      	movs	r3, #0
 800cd58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cd5a:	2302      	movs	r3, #2
 800cd5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cd5e:	23c0      	movs	r3, #192	; 0xc0
 800cd60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd62:	2300      	movs	r3, #0
 800cd64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd6c:	f107 0308 	add.w	r3, r7, #8
 800cd70:	4619      	mov	r1, r3
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f7ff fdc0 	bl	800c8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f000 f983 	bl	800d084 <SDMMC_GetCmdResp2>
 800cd7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd80:	69fb      	ldr	r3, [r7, #28]
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3720      	adds	r7, #32
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}

0800cd8a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cd8a:	b580      	push	{r7, lr}
 800cd8c:	b088      	sub	sp, #32
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
 800cd92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cd98:	2309      	movs	r3, #9
 800cd9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cd9c:	23c0      	movs	r3, #192	; 0xc0
 800cd9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cda0:	2300      	movs	r3, #0
 800cda2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cda4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cda8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdaa:	f107 0308 	add.w	r3, r7, #8
 800cdae:	4619      	mov	r1, r3
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f7ff fda1 	bl	800c8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f000 f964 	bl	800d084 <SDMMC_GetCmdResp2>
 800cdbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdbe:	69fb      	ldr	r3, [r7, #28]
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3720      	adds	r7, #32
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b088      	sub	sp, #32
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cdd6:	2303      	movs	r3, #3
 800cdd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdda:	2340      	movs	r3, #64	; 0x40
 800cddc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdde:	2300      	movs	r3, #0
 800cde0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cde2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cde6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cde8:	f107 0308 	add.w	r3, r7, #8
 800cdec:	4619      	mov	r1, r3
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f7ff fd82 	bl	800c8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cdf4:	683a      	ldr	r2, [r7, #0]
 800cdf6:	2103      	movs	r1, #3
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f000 f9c9 	bl	800d190 <SDMMC_GetCmdResp6>
 800cdfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce00:	69fb      	ldr	r3, [r7, #28]
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3720      	adds	r7, #32
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}

0800ce0a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ce0a:	b580      	push	{r7, lr}
 800ce0c:	b088      	sub	sp, #32
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	6078      	str	r0, [r7, #4]
 800ce12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ce18:	230d      	movs	r3, #13
 800ce1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce1c:	2340      	movs	r3, #64	; 0x40
 800ce1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce20:	2300      	movs	r3, #0
 800ce22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce2a:	f107 0308 	add.w	r3, r7, #8
 800ce2e:	4619      	mov	r1, r3
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f7ff fd61 	bl	800c8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ce36:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce3a:	210d      	movs	r1, #13
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f000 f833 	bl	800cea8 <SDMMC_GetCmdResp1>
 800ce42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce44:	69fb      	ldr	r3, [r7, #28]
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3720      	adds	r7, #32
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
	...

0800ce50 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b085      	sub	sp, #20
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce58:	4b11      	ldr	r3, [pc, #68]	; (800cea0 <SDMMC_GetCmdError+0x50>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4a11      	ldr	r2, [pc, #68]	; (800cea4 <SDMMC_GetCmdError+0x54>)
 800ce5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce62:	0a5b      	lsrs	r3, r3, #9
 800ce64:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce68:	fb02 f303 	mul.w	r3, r2, r3
 800ce6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	1e5a      	subs	r2, r3, #1
 800ce72:	60fa      	str	r2, [r7, #12]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d102      	bne.n	800ce7e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce7c:	e009      	b.n	800ce92 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d0f1      	beq.n	800ce6e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	22c5      	movs	r2, #197	; 0xc5
 800ce8e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ce90:	2300      	movs	r3, #0
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3714      	adds	r7, #20
 800ce96:	46bd      	mov	sp, r7
 800ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop
 800cea0:	20000000 	.word	0x20000000
 800cea4:	10624dd3 	.word	0x10624dd3

0800cea8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b088      	sub	sp, #32
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	607a      	str	r2, [r7, #4]
 800ceb4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ceb6:	4b70      	ldr	r3, [pc, #448]	; (800d078 <SDMMC_GetCmdResp1+0x1d0>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a70      	ldr	r2, [pc, #448]	; (800d07c <SDMMC_GetCmdResp1+0x1d4>)
 800cebc:	fba2 2303 	umull	r2, r3, r2, r3
 800cec0:	0a5a      	lsrs	r2, r3, #9
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	fb02 f303 	mul.w	r3, r2, r3
 800cec8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	1e5a      	subs	r2, r3, #1
 800cece:	61fa      	str	r2, [r7, #28]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d102      	bne.n	800ceda <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ced4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ced8:	e0c9      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cede:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cee0:	69bb      	ldr	r3, [r7, #24]
 800cee2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d0ef      	beq.n	800ceca <SDMMC_GetCmdResp1+0x22>
 800ceea:	69bb      	ldr	r3, [r7, #24]
 800ceec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d1ea      	bne.n	800ceca <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cef8:	f003 0304 	and.w	r3, r3, #4
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d004      	beq.n	800cf0a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2204      	movs	r2, #4
 800cf04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf06:	2304      	movs	r3, #4
 800cf08:	e0b1      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf0e:	f003 0301 	and.w	r3, r3, #1
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d004      	beq.n	800cf20 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2201      	movs	r2, #1
 800cf1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	e0a6      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	22c5      	movs	r2, #197	; 0xc5
 800cf24:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	f7ff fd10 	bl	800c94c <SDMMC_GetCommandResponse>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	461a      	mov	r2, r3
 800cf30:	7afb      	ldrb	r3, [r7, #11]
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d001      	beq.n	800cf3a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf36:	2301      	movs	r3, #1
 800cf38:	e099      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cf3a:	2100      	movs	r1, #0
 800cf3c:	68f8      	ldr	r0, [r7, #12]
 800cf3e:	f7ff fd12 	bl	800c966 <SDMMC_GetResponse>
 800cf42:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cf44:	697a      	ldr	r2, [r7, #20]
 800cf46:	4b4e      	ldr	r3, [pc, #312]	; (800d080 <SDMMC_GetCmdResp1+0x1d8>)
 800cf48:	4013      	ands	r3, r2
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d101      	bne.n	800cf52 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	e08d      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	da02      	bge.n	800cf5e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cf58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cf5c:	e087      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d001      	beq.n	800cf6c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cf68:	2340      	movs	r3, #64	; 0x40
 800cf6a:	e080      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d001      	beq.n	800cf7a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cf76:	2380      	movs	r3, #128	; 0x80
 800cf78:	e079      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d002      	beq.n	800cf8a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cf84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf88:	e071      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d002      	beq.n	800cf9a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cf94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf98:	e069      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d002      	beq.n	800cfaa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cfa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfa8:	e061      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d002      	beq.n	800cfba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cfb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cfb8:	e059      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d002      	beq.n	800cfca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cfc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfc8:	e051      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d002      	beq.n	800cfda <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cfd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cfd8:	e049      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d002      	beq.n	800cfea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cfe4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cfe8:	e041      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d002      	beq.n	800cffa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cff4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cff8:	e039      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d000:	2b00      	cmp	r3, #0
 800d002:	d002      	beq.n	800d00a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d004:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d008:	e031      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d010:	2b00      	cmp	r3, #0
 800d012:	d002      	beq.n	800d01a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d014:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d018:	e029      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d020:	2b00      	cmp	r3, #0
 800d022:	d002      	beq.n	800d02a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d024:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d028:	e021      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d030:	2b00      	cmp	r3, #0
 800d032:	d002      	beq.n	800d03a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d034:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d038:	e019      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d040:	2b00      	cmp	r3, #0
 800d042:	d002      	beq.n	800d04a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d044:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d048:	e011      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d050:	2b00      	cmp	r3, #0
 800d052:	d002      	beq.n	800d05a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d054:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d058:	e009      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	f003 0308 	and.w	r3, r3, #8
 800d060:	2b00      	cmp	r3, #0
 800d062:	d002      	beq.n	800d06a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d064:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d068:	e001      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d06a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3720      	adds	r7, #32
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	20000000 	.word	0x20000000
 800d07c:	10624dd3 	.word	0x10624dd3
 800d080:	fdffe008 	.word	0xfdffe008

0800d084 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d084:	b480      	push	{r7}
 800d086:	b085      	sub	sp, #20
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d08c:	4b1f      	ldr	r3, [pc, #124]	; (800d10c <SDMMC_GetCmdResp2+0x88>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a1f      	ldr	r2, [pc, #124]	; (800d110 <SDMMC_GetCmdResp2+0x8c>)
 800d092:	fba2 2303 	umull	r2, r3, r2, r3
 800d096:	0a5b      	lsrs	r3, r3, #9
 800d098:	f241 3288 	movw	r2, #5000	; 0x1388
 800d09c:	fb02 f303 	mul.w	r3, r2, r3
 800d0a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	1e5a      	subs	r2, r3, #1
 800d0a6:	60fa      	str	r2, [r7, #12]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d102      	bne.n	800d0b2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d0ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d0b0:	e026      	b.n	800d100 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d0ef      	beq.n	800d0a2 <SDMMC_GetCmdResp2+0x1e>
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d1ea      	bne.n	800d0a2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0d0:	f003 0304 	and.w	r3, r3, #4
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d004      	beq.n	800d0e2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2204      	movs	r2, #4
 800d0dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d0de:	2304      	movs	r3, #4
 800d0e0:	e00e      	b.n	800d100 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0e6:	f003 0301 	and.w	r3, r3, #1
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d004      	beq.n	800d0f8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	e003      	b.n	800d100 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	22c5      	movs	r2, #197	; 0xc5
 800d0fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d0fe:	2300      	movs	r3, #0
}
 800d100:	4618      	mov	r0, r3
 800d102:	3714      	adds	r7, #20
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr
 800d10c:	20000000 	.word	0x20000000
 800d110:	10624dd3 	.word	0x10624dd3

0800d114 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d114:	b480      	push	{r7}
 800d116:	b085      	sub	sp, #20
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d11c:	4b1a      	ldr	r3, [pc, #104]	; (800d188 <SDMMC_GetCmdResp3+0x74>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4a1a      	ldr	r2, [pc, #104]	; (800d18c <SDMMC_GetCmdResp3+0x78>)
 800d122:	fba2 2303 	umull	r2, r3, r2, r3
 800d126:	0a5b      	lsrs	r3, r3, #9
 800d128:	f241 3288 	movw	r2, #5000	; 0x1388
 800d12c:	fb02 f303 	mul.w	r3, r2, r3
 800d130:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	1e5a      	subs	r2, r3, #1
 800d136:	60fa      	str	r2, [r7, #12]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d102      	bne.n	800d142 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d13c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d140:	e01b      	b.n	800d17a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d146:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d0ef      	beq.n	800d132 <SDMMC_GetCmdResp3+0x1e>
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d1ea      	bne.n	800d132 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d160:	f003 0304 	and.w	r3, r3, #4
 800d164:	2b00      	cmp	r3, #0
 800d166:	d004      	beq.n	800d172 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2204      	movs	r2, #4
 800d16c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d16e:	2304      	movs	r3, #4
 800d170:	e003      	b.n	800d17a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	22c5      	movs	r2, #197	; 0xc5
 800d176:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d178:	2300      	movs	r3, #0
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3714      	adds	r7, #20
 800d17e:	46bd      	mov	sp, r7
 800d180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d184:	4770      	bx	lr
 800d186:	bf00      	nop
 800d188:	20000000 	.word	0x20000000
 800d18c:	10624dd3 	.word	0x10624dd3

0800d190 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b088      	sub	sp, #32
 800d194:	af00      	add	r7, sp, #0
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	460b      	mov	r3, r1
 800d19a:	607a      	str	r2, [r7, #4]
 800d19c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d19e:	4b35      	ldr	r3, [pc, #212]	; (800d274 <SDMMC_GetCmdResp6+0xe4>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	4a35      	ldr	r2, [pc, #212]	; (800d278 <SDMMC_GetCmdResp6+0xe8>)
 800d1a4:	fba2 2303 	umull	r2, r3, r2, r3
 800d1a8:	0a5b      	lsrs	r3, r3, #9
 800d1aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1ae:	fb02 f303 	mul.w	r3, r2, r3
 800d1b2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d1b4:	69fb      	ldr	r3, [r7, #28]
 800d1b6:	1e5a      	subs	r2, r3, #1
 800d1b8:	61fa      	str	r2, [r7, #28]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d102      	bne.n	800d1c4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d1be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d1c2:	e052      	b.n	800d26a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1c8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d1ca:	69bb      	ldr	r3, [r7, #24]
 800d1cc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d0ef      	beq.n	800d1b4 <SDMMC_GetCmdResp6+0x24>
 800d1d4:	69bb      	ldr	r3, [r7, #24]
 800d1d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d1ea      	bne.n	800d1b4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1e2:	f003 0304 	and.w	r3, r3, #4
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d004      	beq.n	800d1f4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2204      	movs	r2, #4
 800d1ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d1f0:	2304      	movs	r3, #4
 800d1f2:	e03a      	b.n	800d26a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1f8:	f003 0301 	and.w	r3, r3, #1
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d004      	beq.n	800d20a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2201      	movs	r2, #1
 800d204:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d206:	2301      	movs	r3, #1
 800d208:	e02f      	b.n	800d26a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d20a:	68f8      	ldr	r0, [r7, #12]
 800d20c:	f7ff fb9e 	bl	800c94c <SDMMC_GetCommandResponse>
 800d210:	4603      	mov	r3, r0
 800d212:	461a      	mov	r2, r3
 800d214:	7afb      	ldrb	r3, [r7, #11]
 800d216:	4293      	cmp	r3, r2
 800d218:	d001      	beq.n	800d21e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d21a:	2301      	movs	r3, #1
 800d21c:	e025      	b.n	800d26a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	22c5      	movs	r2, #197	; 0xc5
 800d222:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d224:	2100      	movs	r1, #0
 800d226:	68f8      	ldr	r0, [r7, #12]
 800d228:	f7ff fb9d 	bl	800c966 <SDMMC_GetResponse>
 800d22c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d234:	2b00      	cmp	r3, #0
 800d236:	d106      	bne.n	800d246 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	0c1b      	lsrs	r3, r3, #16
 800d23c:	b29a      	uxth	r2, r3
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d242:	2300      	movs	r3, #0
 800d244:	e011      	b.n	800d26a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d002      	beq.n	800d256 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d254:	e009      	b.n	800d26a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d002      	beq.n	800d266 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d264:	e001      	b.n	800d26a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3720      	adds	r7, #32
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	20000000 	.word	0x20000000
 800d278:	10624dd3 	.word	0x10624dd3

0800d27c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b085      	sub	sp, #20
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d284:	4b22      	ldr	r3, [pc, #136]	; (800d310 <SDMMC_GetCmdResp7+0x94>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4a22      	ldr	r2, [pc, #136]	; (800d314 <SDMMC_GetCmdResp7+0x98>)
 800d28a:	fba2 2303 	umull	r2, r3, r2, r3
 800d28e:	0a5b      	lsrs	r3, r3, #9
 800d290:	f241 3288 	movw	r2, #5000	; 0x1388
 800d294:	fb02 f303 	mul.w	r3, r2, r3
 800d298:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	1e5a      	subs	r2, r3, #1
 800d29e:	60fa      	str	r2, [r7, #12]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d102      	bne.n	800d2aa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d2a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d2a8:	e02c      	b.n	800d304 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d0ef      	beq.n	800d29a <SDMMC_GetCmdResp7+0x1e>
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d1ea      	bne.n	800d29a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2c8:	f003 0304 	and.w	r3, r3, #4
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d004      	beq.n	800d2da <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2204      	movs	r2, #4
 800d2d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d2d6:	2304      	movs	r3, #4
 800d2d8:	e014      	b.n	800d304 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2de:	f003 0301 	and.w	r3, r3, #1
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d004      	beq.n	800d2f0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	e009      	b.n	800d304 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d002      	beq.n	800d302 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2240      	movs	r2, #64	; 0x40
 800d300:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d302:	2300      	movs	r3, #0
  
}
 800d304:	4618      	mov	r0, r3
 800d306:	3714      	adds	r7, #20
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr
 800d310:	20000000 	.word	0x20000000
 800d314:	10624dd3 	.word	0x10624dd3

0800d318 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d318:	b084      	sub	sp, #16
 800d31a:	b580      	push	{r7, lr}
 800d31c:	b084      	sub	sp, #16
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
 800d322:	f107 001c 	add.w	r0, r7, #28
 800d326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d120      	bne.n	800d372 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d334:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	68da      	ldr	r2, [r3, #12]
 800d340:	4b20      	ldr	r3, [pc, #128]	; (800d3c4 <USB_CoreInit+0xac>)
 800d342:	4013      	ands	r3, r2
 800d344:	687a      	ldr	r2, [r7, #4]
 800d346:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	68db      	ldr	r3, [r3, #12]
 800d34c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d356:	2b01      	cmp	r3, #1
 800d358:	d105      	bne.n	800d366 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	68db      	ldr	r3, [r3, #12]
 800d35e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f000 f942 	bl	800d5f0 <USB_CoreReset>
 800d36c:	4603      	mov	r3, r0
 800d36e:	73fb      	strb	r3, [r7, #15]
 800d370:	e010      	b.n	800d394 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	68db      	ldr	r3, [r3, #12]
 800d376:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 f936 	bl	800d5f0 <USB_CoreReset>
 800d384:	4603      	mov	r3, r0
 800d386:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d38c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800d394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d396:	2b01      	cmp	r3, #1
 800d398:	d10b      	bne.n	800d3b2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	689b      	ldr	r3, [r3, #8]
 800d39e:	f043 0206 	orr.w	r2, r3, #6
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	689b      	ldr	r3, [r3, #8]
 800d3aa:	f043 0220 	orr.w	r2, r3, #32
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3710      	adds	r7, #16
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d3be:	b004      	add	sp, #16
 800d3c0:	4770      	bx	lr
 800d3c2:	bf00      	nop
 800d3c4:	ffbdffbf 	.word	0xffbdffbf

0800d3c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b083      	sub	sp, #12
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	689b      	ldr	r3, [r3, #8]
 800d3d4:	f043 0201 	orr.w	r2, r3, #1
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d3dc:	2300      	movs	r3, #0
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	370c      	adds	r7, #12
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr

0800d3ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d3ea:	b480      	push	{r7}
 800d3ec:	b083      	sub	sp, #12
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	689b      	ldr	r3, [r3, #8]
 800d3f6:	f023 0201 	bic.w	r2, r3, #1
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d3fe:	2300      	movs	r3, #0
}
 800d400:	4618      	mov	r0, r3
 800d402:	370c      	adds	r7, #12
 800d404:	46bd      	mov	sp, r7
 800d406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40a:	4770      	bx	lr

0800d40c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	460b      	mov	r3, r1
 800d416:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	68db      	ldr	r3, [r3, #12]
 800d41c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d424:	78fb      	ldrb	r3, [r7, #3]
 800d426:	2b01      	cmp	r3, #1
 800d428:	d106      	bne.n	800d438 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	60da      	str	r2, [r3, #12]
 800d436:	e00b      	b.n	800d450 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d438:	78fb      	ldrb	r3, [r7, #3]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d106      	bne.n	800d44c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	68db      	ldr	r3, [r3, #12]
 800d442:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	60da      	str	r2, [r3, #12]
 800d44a:	e001      	b.n	800d450 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d44c:	2301      	movs	r3, #1
 800d44e:	e003      	b.n	800d458 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d450:	2032      	movs	r0, #50	; 0x32
 800d452:	f7f5 fd1f 	bl	8002e94 <HAL_Delay>

  return HAL_OK;
 800d456:	2300      	movs	r3, #0
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d460:	b480      	push	{r7}
 800d462:	b085      	sub	sp, #20
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d46a:	2300      	movs	r3, #0
 800d46c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	019b      	lsls	r3, r3, #6
 800d472:	f043 0220 	orr.w	r2, r3, #32
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	3301      	adds	r3, #1
 800d47e:	60fb      	str	r3, [r7, #12]
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	4a09      	ldr	r2, [pc, #36]	; (800d4a8 <USB_FlushTxFifo+0x48>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d901      	bls.n	800d48c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d488:	2303      	movs	r3, #3
 800d48a:	e006      	b.n	800d49a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	691b      	ldr	r3, [r3, #16]
 800d490:	f003 0320 	and.w	r3, r3, #32
 800d494:	2b20      	cmp	r3, #32
 800d496:	d0f0      	beq.n	800d47a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d498:	2300      	movs	r3, #0
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3714      	adds	r7, #20
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
 800d4a6:	bf00      	nop
 800d4a8:	00030d40 	.word	0x00030d40

0800d4ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b085      	sub	sp, #20
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2210      	movs	r2, #16
 800d4bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	60fb      	str	r3, [r7, #12]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	4a09      	ldr	r2, [pc, #36]	; (800d4ec <USB_FlushRxFifo+0x40>)
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	d901      	bls.n	800d4d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d4cc:	2303      	movs	r3, #3
 800d4ce:	e006      	b.n	800d4de <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	691b      	ldr	r3, [r3, #16]
 800d4d4:	f003 0310 	and.w	r3, r3, #16
 800d4d8:	2b10      	cmp	r3, #16
 800d4da:	d0f0      	beq.n	800d4be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d4dc:	2300      	movs	r3, #0
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3714      	adds	r7, #20
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e8:	4770      	bx	lr
 800d4ea:	bf00      	nop
 800d4ec:	00030d40 	.word	0x00030d40

0800d4f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b089      	sub	sp, #36	; 0x24
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	4611      	mov	r1, r2
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	460b      	mov	r3, r1
 800d500:	71fb      	strb	r3, [r7, #7]
 800d502:	4613      	mov	r3, r2
 800d504:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d50e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d512:	2b00      	cmp	r3, #0
 800d514:	d11a      	bne.n	800d54c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d516:	88bb      	ldrh	r3, [r7, #4]
 800d518:	3303      	adds	r3, #3
 800d51a:	089b      	lsrs	r3, r3, #2
 800d51c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d51e:	2300      	movs	r3, #0
 800d520:	61bb      	str	r3, [r7, #24]
 800d522:	e00f      	b.n	800d544 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d524:	79fb      	ldrb	r3, [r7, #7]
 800d526:	031a      	lsls	r2, r3, #12
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	4413      	add	r3, r2
 800d52c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d530:	461a      	mov	r2, r3
 800d532:	69fb      	ldr	r3, [r7, #28]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d538:	69fb      	ldr	r3, [r7, #28]
 800d53a:	3304      	adds	r3, #4
 800d53c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d53e:	69bb      	ldr	r3, [r7, #24]
 800d540:	3301      	adds	r3, #1
 800d542:	61bb      	str	r3, [r7, #24]
 800d544:	69ba      	ldr	r2, [r7, #24]
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	429a      	cmp	r2, r3
 800d54a:	d3eb      	bcc.n	800d524 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d54c:	2300      	movs	r3, #0
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3724      	adds	r7, #36	; 0x24
 800d552:	46bd      	mov	sp, r7
 800d554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d558:	4770      	bx	lr

0800d55a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d55a:	b480      	push	{r7}
 800d55c:	b089      	sub	sp, #36	; 0x24
 800d55e:	af00      	add	r7, sp, #0
 800d560:	60f8      	str	r0, [r7, #12]
 800d562:	60b9      	str	r1, [r7, #8]
 800d564:	4613      	mov	r3, r2
 800d566:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d570:	88fb      	ldrh	r3, [r7, #6]
 800d572:	3303      	adds	r3, #3
 800d574:	089b      	lsrs	r3, r3, #2
 800d576:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d578:	2300      	movs	r3, #0
 800d57a:	61bb      	str	r3, [r7, #24]
 800d57c:	e00b      	b.n	800d596 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	601a      	str	r2, [r3, #0]
    pDest++;
 800d58a:	69fb      	ldr	r3, [r7, #28]
 800d58c:	3304      	adds	r3, #4
 800d58e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	3301      	adds	r3, #1
 800d594:	61bb      	str	r3, [r7, #24]
 800d596:	69ba      	ldr	r2, [r7, #24]
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d3ef      	bcc.n	800d57e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d59e:	69fb      	ldr	r3, [r7, #28]
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3724      	adds	r7, #36	; 0x24
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr

0800d5ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b085      	sub	sp, #20
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	695b      	ldr	r3, [r3, #20]
 800d5b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	699b      	ldr	r3, [r3, #24]
 800d5be:	68fa      	ldr	r2, [r7, #12]
 800d5c0:	4013      	ands	r3, r2
 800d5c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3714      	adds	r7, #20
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr

0800d5d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d5d2:	b480      	push	{r7}
 800d5d4:	b083      	sub	sp, #12
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	695b      	ldr	r3, [r3, #20]
 800d5de:	f003 0301 	and.w	r3, r3, #1
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	370c      	adds	r7, #12
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ec:	4770      	bx	lr
	...

0800d5f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b085      	sub	sp, #20
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	3301      	adds	r3, #1
 800d600:	60fb      	str	r3, [r7, #12]
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	4a13      	ldr	r2, [pc, #76]	; (800d654 <USB_CoreReset+0x64>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d901      	bls.n	800d60e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d60a:	2303      	movs	r3, #3
 800d60c:	e01b      	b.n	800d646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	691b      	ldr	r3, [r3, #16]
 800d612:	2b00      	cmp	r3, #0
 800d614:	daf2      	bge.n	800d5fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d616:	2300      	movs	r3, #0
 800d618:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	691b      	ldr	r3, [r3, #16]
 800d61e:	f043 0201 	orr.w	r2, r3, #1
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	3301      	adds	r3, #1
 800d62a:	60fb      	str	r3, [r7, #12]
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	4a09      	ldr	r2, [pc, #36]	; (800d654 <USB_CoreReset+0x64>)
 800d630:	4293      	cmp	r3, r2
 800d632:	d901      	bls.n	800d638 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d634:	2303      	movs	r3, #3
 800d636:	e006      	b.n	800d646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	691b      	ldr	r3, [r3, #16]
 800d63c:	f003 0301 	and.w	r3, r3, #1
 800d640:	2b01      	cmp	r3, #1
 800d642:	d0f0      	beq.n	800d626 <USB_CoreReset+0x36>

  return HAL_OK;
 800d644:	2300      	movs	r3, #0
}
 800d646:	4618      	mov	r0, r3
 800d648:	3714      	adds	r7, #20
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop
 800d654:	00030d40 	.word	0x00030d40

0800d658 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d658:	b084      	sub	sp, #16
 800d65a:	b580      	push	{r7, lr}
 800d65c:	b084      	sub	sp, #16
 800d65e:	af00      	add	r7, sp, #0
 800d660:	6078      	str	r0, [r7, #4]
 800d662:	f107 001c 	add.w	r0, r7, #28
 800d666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d674:	461a      	mov	r2, r3
 800d676:	2300      	movs	r3, #0
 800d678:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d67e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d68a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d018      	beq.n	800d6c4 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d694:	2b01      	cmp	r3, #1
 800d696:	d10a      	bne.n	800d6ae <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	68ba      	ldr	r2, [r7, #8]
 800d6a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d6a6:	f043 0304 	orr.w	r3, r3, #4
 800d6aa:	6013      	str	r3, [r2, #0]
 800d6ac:	e014      	b.n	800d6d8 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	68ba      	ldr	r2, [r7, #8]
 800d6b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d6bc:	f023 0304 	bic.w	r3, r3, #4
 800d6c0:	6013      	str	r3, [r2, #0]
 800d6c2:	e009      	b.n	800d6d8 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	68ba      	ldr	r2, [r7, #8]
 800d6ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d6d2:	f023 0304 	bic.w	r3, r3, #4
 800d6d6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800d6d8:	2110      	movs	r1, #16
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f7ff fec0 	bl	800d460 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f7ff fee3 	bl	800d4ac <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	60fb      	str	r3, [r7, #12]
 800d6ea:	e015      	b.n	800d718 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	015a      	lsls	r2, r3, #5
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	4413      	add	r3, r2
 800d6f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d6fe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	015a      	lsls	r2, r3, #5
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	4413      	add	r3, r2
 800d708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d70c:	461a      	mov	r2, r3
 800d70e:	2300      	movs	r3, #0
 800d710:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	3301      	adds	r3, #1
 800d716:	60fb      	str	r3, [r7, #12]
 800d718:	6a3b      	ldr	r3, [r7, #32]
 800d71a:	68fa      	ldr	r2, [r7, #12]
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d3e5      	bcc.n	800d6ec <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800d720:	2101      	movs	r1, #1
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f000 f8ac 	bl	800d880 <USB_DriveVbus>

  HAL_Delay(200U);
 800d728:	20c8      	movs	r0, #200	; 0xc8
 800d72a:	f7f5 fbb3 	bl	8002e94 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2200      	movs	r2, #0
 800d732:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d73a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d744:	2b00      	cmp	r3, #0
 800d746:	d00b      	beq.n	800d760 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d74e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	4a14      	ldr	r2, [pc, #80]	; (800d7a4 <USB_HostInit+0x14c>)
 800d754:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	4a13      	ldr	r2, [pc, #76]	; (800d7a8 <USB_HostInit+0x150>)
 800d75a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d75e:	e009      	b.n	800d774 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2280      	movs	r2, #128	; 0x80
 800d764:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	4a10      	ldr	r2, [pc, #64]	; (800d7ac <USB_HostInit+0x154>)
 800d76a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	4a10      	ldr	r2, [pc, #64]	; (800d7b0 <USB_HostInit+0x158>)
 800d770:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d776:	2b00      	cmp	r3, #0
 800d778:	d105      	bne.n	800d786 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	699b      	ldr	r3, [r3, #24]
 800d77e:	f043 0210 	orr.w	r2, r3, #16
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	699a      	ldr	r2, [r3, #24]
 800d78a:	4b0a      	ldr	r3, [pc, #40]	; (800d7b4 <USB_HostInit+0x15c>)
 800d78c:	4313      	orrs	r3, r2
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800d792:	2300      	movs	r3, #0
}
 800d794:	4618      	mov	r0, r3
 800d796:	3710      	adds	r7, #16
 800d798:	46bd      	mov	sp, r7
 800d79a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d79e:	b004      	add	sp, #16
 800d7a0:	4770      	bx	lr
 800d7a2:	bf00      	nop
 800d7a4:	01000200 	.word	0x01000200
 800d7a8:	00e00300 	.word	0x00e00300
 800d7ac:	00600080 	.word	0x00600080
 800d7b0:	004000e0 	.word	0x004000e0
 800d7b4:	a3200008 	.word	0xa3200008

0800d7b8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b085      	sub	sp, #20
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	68fa      	ldr	r2, [r7, #12]
 800d7d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d7d6:	f023 0303 	bic.w	r3, r3, #3
 800d7da:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	78fb      	ldrb	r3, [r7, #3]
 800d7e6:	f003 0303 	and.w	r3, r3, #3
 800d7ea:	68f9      	ldr	r1, [r7, #12]
 800d7ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d7f0:	4313      	orrs	r3, r2
 800d7f2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d7f4:	78fb      	ldrb	r3, [r7, #3]
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d107      	bne.n	800d80a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d800:	461a      	mov	r2, r3
 800d802:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d806:	6053      	str	r3, [r2, #4]
 800d808:	e009      	b.n	800d81e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d80a:	78fb      	ldrb	r3, [r7, #3]
 800d80c:	2b02      	cmp	r3, #2
 800d80e:	d106      	bne.n	800d81e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d816:	461a      	mov	r2, r3
 800d818:	f241 7370 	movw	r3, #6000	; 0x1770
 800d81c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d81e:	2300      	movs	r3, #0
}
 800d820:	4618      	mov	r0, r3
 800d822:	3714      	adds	r7, #20
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr

0800d82c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d838:	2300      	movs	r3, #0
 800d83a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d84c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	68fa      	ldr	r2, [r7, #12]
 800d852:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d85a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d85c:	2064      	movs	r0, #100	; 0x64
 800d85e:	f7f5 fb19 	bl	8002e94 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	68fa      	ldr	r2, [r7, #12]
 800d866:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d86a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d86e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d870:	200a      	movs	r0, #10
 800d872:	f7f5 fb0f 	bl	8002e94 <HAL_Delay>

  return HAL_OK;
 800d876:	2300      	movs	r3, #0
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3710      	adds	r7, #16
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d880:	b480      	push	{r7}
 800d882:	b085      	sub	sp, #20
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	460b      	mov	r3, r1
 800d88a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d890:	2300      	movs	r3, #0
 800d892:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d8a4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d109      	bne.n	800d8c4 <USB_DriveVbus+0x44>
 800d8b0:	78fb      	ldrb	r3, [r7, #3]
 800d8b2:	2b01      	cmp	r3, #1
 800d8b4:	d106      	bne.n	800d8c4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	68fa      	ldr	r2, [r7, #12]
 800d8ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d8be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d8c2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d8ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8ce:	d109      	bne.n	800d8e4 <USB_DriveVbus+0x64>
 800d8d0:	78fb      	ldrb	r3, [r7, #3]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d106      	bne.n	800d8e4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	68fa      	ldr	r2, [r7, #12]
 800d8da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d8de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8e2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d8e4:	2300      	movs	r3, #0
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3714      	adds	r7, #20
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr

0800d8f2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d8f2:	b480      	push	{r7}
 800d8f4:	b085      	sub	sp, #20
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d8fe:	2300      	movs	r3, #0
 800d900:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	0c5b      	lsrs	r3, r3, #17
 800d910:	f003 0303 	and.w	r3, r3, #3
}
 800d914:	4618      	mov	r0, r3
 800d916:	3714      	adds	r7, #20
 800d918:	46bd      	mov	sp, r7
 800d91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91e:	4770      	bx	lr

0800d920 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d920:	b480      	push	{r7}
 800d922:	b085      	sub	sp, #20
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d932:	689b      	ldr	r3, [r3, #8]
 800d934:	b29b      	uxth	r3, r3
}
 800d936:	4618      	mov	r0, r3
 800d938:	3714      	adds	r7, #20
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr
	...

0800d944 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b088      	sub	sp, #32
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	4608      	mov	r0, r1
 800d94e:	4611      	mov	r1, r2
 800d950:	461a      	mov	r2, r3
 800d952:	4603      	mov	r3, r0
 800d954:	70fb      	strb	r3, [r7, #3]
 800d956:	460b      	mov	r3, r1
 800d958:	70bb      	strb	r3, [r7, #2]
 800d95a:	4613      	mov	r3, r2
 800d95c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d95e:	2300      	movs	r3, #0
 800d960:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d966:	78fb      	ldrb	r3, [r7, #3]
 800d968:	015a      	lsls	r2, r3, #5
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	4413      	add	r3, r2
 800d96e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d972:	461a      	mov	r2, r3
 800d974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d978:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d97a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d97e:	2b03      	cmp	r3, #3
 800d980:	d87e      	bhi.n	800da80 <USB_HC_Init+0x13c>
 800d982:	a201      	add	r2, pc, #4	; (adr r2, 800d988 <USB_HC_Init+0x44>)
 800d984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d988:	0800d999 	.word	0x0800d999
 800d98c:	0800da43 	.word	0x0800da43
 800d990:	0800d999 	.word	0x0800d999
 800d994:	0800da05 	.word	0x0800da05
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d998:	78fb      	ldrb	r3, [r7, #3]
 800d99a:	015a      	lsls	r2, r3, #5
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	4413      	add	r3, r2
 800d9a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	f240 439d 	movw	r3, #1181	; 0x49d
 800d9aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d9ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	da10      	bge.n	800d9d6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d9b4:	78fb      	ldrb	r3, [r7, #3]
 800d9b6:	015a      	lsls	r2, r3, #5
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	4413      	add	r3, r2
 800d9bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9c0:	68db      	ldr	r3, [r3, #12]
 800d9c2:	78fa      	ldrb	r2, [r7, #3]
 800d9c4:	0151      	lsls	r1, r2, #5
 800d9c6:	693a      	ldr	r2, [r7, #16]
 800d9c8:	440a      	add	r2, r1
 800d9ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d9ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9d2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800d9d4:	e057      	b.n	800da86 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d051      	beq.n	800da86 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800d9e2:	78fb      	ldrb	r3, [r7, #3]
 800d9e4:	015a      	lsls	r2, r3, #5
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	4413      	add	r3, r2
 800d9ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9ee:	68db      	ldr	r3, [r3, #12]
 800d9f0:	78fa      	ldrb	r2, [r7, #3]
 800d9f2:	0151      	lsls	r1, r2, #5
 800d9f4:	693a      	ldr	r2, [r7, #16]
 800d9f6:	440a      	add	r2, r1
 800d9f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d9fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800da00:	60d3      	str	r3, [r2, #12]
      break;
 800da02:	e040      	b.n	800da86 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800da04:	78fb      	ldrb	r3, [r7, #3]
 800da06:	015a      	lsls	r2, r3, #5
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	4413      	add	r3, r2
 800da0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da10:	461a      	mov	r2, r3
 800da12:	f240 639d 	movw	r3, #1693	; 0x69d
 800da16:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800da18:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	da34      	bge.n	800da8a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800da20:	78fb      	ldrb	r3, [r7, #3]
 800da22:	015a      	lsls	r2, r3, #5
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	4413      	add	r3, r2
 800da28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	78fa      	ldrb	r2, [r7, #3]
 800da30:	0151      	lsls	r1, r2, #5
 800da32:	693a      	ldr	r2, [r7, #16]
 800da34:	440a      	add	r2, r1
 800da36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da3e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800da40:	e023      	b.n	800da8a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800da42:	78fb      	ldrb	r3, [r7, #3]
 800da44:	015a      	lsls	r2, r3, #5
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	4413      	add	r3, r2
 800da4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da4e:	461a      	mov	r2, r3
 800da50:	f240 2325 	movw	r3, #549	; 0x225
 800da54:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800da56:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	da17      	bge.n	800da8e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800da5e:	78fb      	ldrb	r3, [r7, #3]
 800da60:	015a      	lsls	r2, r3, #5
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	4413      	add	r3, r2
 800da66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da6a:	68db      	ldr	r3, [r3, #12]
 800da6c:	78fa      	ldrb	r2, [r7, #3]
 800da6e:	0151      	lsls	r1, r2, #5
 800da70:	693a      	ldr	r2, [r7, #16]
 800da72:	440a      	add	r2, r1
 800da74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da78:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800da7c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800da7e:	e006      	b.n	800da8e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800da80:	2301      	movs	r3, #1
 800da82:	77fb      	strb	r3, [r7, #31]
      break;
 800da84:	e004      	b.n	800da90 <USB_HC_Init+0x14c>
      break;
 800da86:	bf00      	nop
 800da88:	e002      	b.n	800da90 <USB_HC_Init+0x14c>
      break;
 800da8a:	bf00      	nop
 800da8c:	e000      	b.n	800da90 <USB_HC_Init+0x14c>
      break;
 800da8e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da96:	699a      	ldr	r2, [r3, #24]
 800da98:	78fb      	ldrb	r3, [r7, #3]
 800da9a:	f003 030f 	and.w	r3, r3, #15
 800da9e:	2101      	movs	r1, #1
 800daa0:	fa01 f303 	lsl.w	r3, r1, r3
 800daa4:	6939      	ldr	r1, [r7, #16]
 800daa6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800daaa:	4313      	orrs	r3, r2
 800daac:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	699b      	ldr	r3, [r3, #24]
 800dab2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800daba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	da03      	bge.n	800daca <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800dac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dac6:	61bb      	str	r3, [r7, #24]
 800dac8:	e001      	b.n	800dace <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800daca:	2300      	movs	r3, #0
 800dacc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f7ff ff0f 	bl	800d8f2 <USB_GetHostSpeed>
 800dad4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800dad6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dada:	2b02      	cmp	r3, #2
 800dadc:	d106      	bne.n	800daec <USB_HC_Init+0x1a8>
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2b02      	cmp	r3, #2
 800dae2:	d003      	beq.n	800daec <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800dae4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dae8:	617b      	str	r3, [r7, #20]
 800daea:	e001      	b.n	800daf0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800daec:	2300      	movs	r3, #0
 800daee:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800daf0:	787b      	ldrb	r3, [r7, #1]
 800daf2:	059b      	lsls	r3, r3, #22
 800daf4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800daf8:	78bb      	ldrb	r3, [r7, #2]
 800dafa:	02db      	lsls	r3, r3, #11
 800dafc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800db00:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800db02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800db06:	049b      	lsls	r3, r3, #18
 800db08:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800db0c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800db0e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800db10:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800db14:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800db16:	69bb      	ldr	r3, [r7, #24]
 800db18:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800db1a:	78fb      	ldrb	r3, [r7, #3]
 800db1c:	0159      	lsls	r1, r3, #5
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	440b      	add	r3, r1
 800db22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db26:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800db2c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800db2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800db32:	2b03      	cmp	r3, #3
 800db34:	d10f      	bne.n	800db56 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800db36:	78fb      	ldrb	r3, [r7, #3]
 800db38:	015a      	lsls	r2, r3, #5
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	4413      	add	r3, r2
 800db3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	78fa      	ldrb	r2, [r7, #3]
 800db46:	0151      	lsls	r1, r2, #5
 800db48:	693a      	ldr	r2, [r7, #16]
 800db4a:	440a      	add	r2, r1
 800db4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800db54:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800db56:	7ffb      	ldrb	r3, [r7, #31]
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3720      	adds	r7, #32
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b08c      	sub	sp, #48	; 0x30
 800db64:	af02      	add	r7, sp, #8
 800db66:	60f8      	str	r0, [r7, #12]
 800db68:	60b9      	str	r1, [r7, #8]
 800db6a:	4613      	mov	r3, r2
 800db6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	785b      	ldrb	r3, [r3, #1]
 800db76:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800db78:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db7c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db86:	2b00      	cmp	r3, #0
 800db88:	d02d      	beq.n	800dbe6 <USB_HC_StartXfer+0x86>
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	791b      	ldrb	r3, [r3, #4]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d129      	bne.n	800dbe6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800db92:	79fb      	ldrb	r3, [r7, #7]
 800db94:	2b01      	cmp	r3, #1
 800db96:	d117      	bne.n	800dbc8 <USB_HC_StartXfer+0x68>
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	79db      	ldrb	r3, [r3, #7]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d003      	beq.n	800dba8 <USB_HC_StartXfer+0x48>
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	79db      	ldrb	r3, [r3, #7]
 800dba4:	2b02      	cmp	r3, #2
 800dba6:	d10f      	bne.n	800dbc8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800dba8:	69fb      	ldr	r3, [r7, #28]
 800dbaa:	015a      	lsls	r2, r3, #5
 800dbac:	6a3b      	ldr	r3, [r7, #32]
 800dbae:	4413      	add	r3, r2
 800dbb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbb4:	68db      	ldr	r3, [r3, #12]
 800dbb6:	69fa      	ldr	r2, [r7, #28]
 800dbb8:	0151      	lsls	r1, r2, #5
 800dbba:	6a3a      	ldr	r2, [r7, #32]
 800dbbc:	440a      	add	r2, r1
 800dbbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dbc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbc6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800dbc8:	79fb      	ldrb	r3, [r7, #7]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d10b      	bne.n	800dbe6 <USB_HC_StartXfer+0x86>
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	795b      	ldrb	r3, [r3, #5]
 800dbd2:	2b01      	cmp	r3, #1
 800dbd4:	d107      	bne.n	800dbe6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	785b      	ldrb	r3, [r3, #1]
 800dbda:	4619      	mov	r1, r3
 800dbdc:	68f8      	ldr	r0, [r7, #12]
 800dbde:	f000 fa2f 	bl	800e040 <USB_DoPing>
      return HAL_OK;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	e0f8      	b.n	800ddd8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	695b      	ldr	r3, [r3, #20]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d018      	beq.n	800dc20 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	695b      	ldr	r3, [r3, #20]
 800dbf2:	68ba      	ldr	r2, [r7, #8]
 800dbf4:	8912      	ldrh	r2, [r2, #8]
 800dbf6:	4413      	add	r3, r2
 800dbf8:	3b01      	subs	r3, #1
 800dbfa:	68ba      	ldr	r2, [r7, #8]
 800dbfc:	8912      	ldrh	r2, [r2, #8]
 800dbfe:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc02:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800dc04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dc06:	8b7b      	ldrh	r3, [r7, #26]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d90b      	bls.n	800dc24 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800dc0c:	8b7b      	ldrh	r3, [r7, #26]
 800dc0e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800dc10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dc12:	68ba      	ldr	r2, [r7, #8]
 800dc14:	8912      	ldrh	r2, [r2, #8]
 800dc16:	fb03 f202 	mul.w	r2, r3, r2
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	611a      	str	r2, [r3, #16]
 800dc1e:	e001      	b.n	800dc24 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800dc20:	2301      	movs	r3, #1
 800dc22:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	78db      	ldrb	r3, [r3, #3]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d007      	beq.n	800dc3c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800dc2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dc2e:	68ba      	ldr	r2, [r7, #8]
 800dc30:	8912      	ldrh	r2, [r2, #8]
 800dc32:	fb03 f202 	mul.w	r2, r3, r2
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	611a      	str	r2, [r3, #16]
 800dc3a:	e003      	b.n	800dc44 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	695a      	ldr	r2, [r3, #20]
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	691b      	ldr	r3, [r3, #16]
 800dc48:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dc4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dc4e:	04d9      	lsls	r1, r3, #19
 800dc50:	4b63      	ldr	r3, [pc, #396]	; (800dde0 <USB_HC_StartXfer+0x280>)
 800dc52:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dc54:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	7a9b      	ldrb	r3, [r3, #10]
 800dc5a:	075b      	lsls	r3, r3, #29
 800dc5c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dc60:	69f9      	ldr	r1, [r7, #28]
 800dc62:	0148      	lsls	r0, r1, #5
 800dc64:	6a39      	ldr	r1, [r7, #32]
 800dc66:	4401      	add	r1, r0
 800dc68:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dc6c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dc6e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800dc70:	79fb      	ldrb	r3, [r7, #7]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d009      	beq.n	800dc8a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	68d9      	ldr	r1, [r3, #12]
 800dc7a:	69fb      	ldr	r3, [r7, #28]
 800dc7c:	015a      	lsls	r2, r3, #5
 800dc7e:	6a3b      	ldr	r3, [r7, #32]
 800dc80:	4413      	add	r3, r2
 800dc82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc86:	460a      	mov	r2, r1
 800dc88:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800dc8a:	6a3b      	ldr	r3, [r7, #32]
 800dc8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc90:	689b      	ldr	r3, [r3, #8]
 800dc92:	f003 0301 	and.w	r3, r3, #1
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	bf0c      	ite	eq
 800dc9a:	2301      	moveq	r3, #1
 800dc9c:	2300      	movne	r3, #0
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800dca2:	69fb      	ldr	r3, [r7, #28]
 800dca4:	015a      	lsls	r2, r3, #5
 800dca6:	6a3b      	ldr	r3, [r7, #32]
 800dca8:	4413      	add	r3, r2
 800dcaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	69fa      	ldr	r2, [r7, #28]
 800dcb2:	0151      	lsls	r1, r2, #5
 800dcb4:	6a3a      	ldr	r2, [r7, #32]
 800dcb6:	440a      	add	r2, r1
 800dcb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dcbc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dcc0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800dcc2:	69fb      	ldr	r3, [r7, #28]
 800dcc4:	015a      	lsls	r2, r3, #5
 800dcc6:	6a3b      	ldr	r3, [r7, #32]
 800dcc8:	4413      	add	r3, r2
 800dcca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	7e7b      	ldrb	r3, [r7, #25]
 800dcd2:	075b      	lsls	r3, r3, #29
 800dcd4:	69f9      	ldr	r1, [r7, #28]
 800dcd6:	0148      	lsls	r0, r1, #5
 800dcd8:	6a39      	ldr	r1, [r7, #32]
 800dcda:	4401      	add	r1, r0
 800dcdc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800dce0:	4313      	orrs	r3, r2
 800dce2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	015a      	lsls	r2, r3, #5
 800dce8:	6a3b      	ldr	r3, [r7, #32]
 800dcea:	4413      	add	r3, r2
 800dcec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dcfa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	78db      	ldrb	r3, [r3, #3]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d004      	beq.n	800dd0e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd0a:	613b      	str	r3, [r7, #16]
 800dd0c:	e003      	b.n	800dd16 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dd14:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dd1c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800dd1e:	69fb      	ldr	r3, [r7, #28]
 800dd20:	015a      	lsls	r2, r3, #5
 800dd22:	6a3b      	ldr	r3, [r7, #32]
 800dd24:	4413      	add	r3, r2
 800dd26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800dd30:	79fb      	ldrb	r3, [r7, #7]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d001      	beq.n	800dd3a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800dd36:	2300      	movs	r3, #0
 800dd38:	e04e      	b.n	800ddd8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	78db      	ldrb	r3, [r3, #3]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d149      	bne.n	800ddd6 <USB_HC_StartXfer+0x276>
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	695b      	ldr	r3, [r3, #20]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d045      	beq.n	800ddd6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	79db      	ldrb	r3, [r3, #7]
 800dd4e:	2b03      	cmp	r3, #3
 800dd50:	d830      	bhi.n	800ddb4 <USB_HC_StartXfer+0x254>
 800dd52:	a201      	add	r2, pc, #4	; (adr r2, 800dd58 <USB_HC_StartXfer+0x1f8>)
 800dd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd58:	0800dd69 	.word	0x0800dd69
 800dd5c:	0800dd8d 	.word	0x0800dd8d
 800dd60:	0800dd69 	.word	0x0800dd69
 800dd64:	0800dd8d 	.word	0x0800dd8d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	695b      	ldr	r3, [r3, #20]
 800dd6c:	3303      	adds	r3, #3
 800dd6e:	089b      	lsrs	r3, r3, #2
 800dd70:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800dd72:	8afa      	ldrh	r2, [r7, #22]
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d91c      	bls.n	800ddb8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	699b      	ldr	r3, [r3, #24]
 800dd82:	f043 0220 	orr.w	r2, r3, #32
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	619a      	str	r2, [r3, #24]
        }
        break;
 800dd8a:	e015      	b.n	800ddb8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	695b      	ldr	r3, [r3, #20]
 800dd90:	3303      	adds	r3, #3
 800dd92:	089b      	lsrs	r3, r3, #2
 800dd94:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800dd96:	8afa      	ldrh	r2, [r7, #22]
 800dd98:	6a3b      	ldr	r3, [r7, #32]
 800dd9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dd9e:	691b      	ldr	r3, [r3, #16]
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d90a      	bls.n	800ddbc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	699b      	ldr	r3, [r3, #24]
 800ddaa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	619a      	str	r2, [r3, #24]
        }
        break;
 800ddb2:	e003      	b.n	800ddbc <USB_HC_StartXfer+0x25c>

      default:
        break;
 800ddb4:	bf00      	nop
 800ddb6:	e002      	b.n	800ddbe <USB_HC_StartXfer+0x25e>
        break;
 800ddb8:	bf00      	nop
 800ddba:	e000      	b.n	800ddbe <USB_HC_StartXfer+0x25e>
        break;
 800ddbc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	68d9      	ldr	r1, [r3, #12]
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	785a      	ldrb	r2, [r3, #1]
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	695b      	ldr	r3, [r3, #20]
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	2000      	movs	r0, #0
 800ddce:	9000      	str	r0, [sp, #0]
 800ddd0:	68f8      	ldr	r0, [r7, #12]
 800ddd2:	f7ff fb8d 	bl	800d4f0 <USB_WritePacket>
  }

  return HAL_OK;
 800ddd6:	2300      	movs	r3, #0
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3728      	adds	r7, #40	; 0x28
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	1ff80000 	.word	0x1ff80000

0800dde4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b085      	sub	sp, #20
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ddf6:	695b      	ldr	r3, [r3, #20]
 800ddf8:	b29b      	uxth	r3, r3
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3714      	adds	r7, #20
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr

0800de06 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800de06:	b480      	push	{r7}
 800de08:	b089      	sub	sp, #36	; 0x24
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	6078      	str	r0, [r7, #4]
 800de0e:	460b      	mov	r3, r1
 800de10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800de16:	78fb      	ldrb	r3, [r7, #3]
 800de18:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800de1a:	2300      	movs	r3, #0
 800de1c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	015a      	lsls	r2, r3, #5
 800de22:	69bb      	ldr	r3, [r7, #24]
 800de24:	4413      	add	r3, r2
 800de26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	0c9b      	lsrs	r3, r3, #18
 800de2e:	f003 0303 	and.w	r3, r3, #3
 800de32:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	015a      	lsls	r2, r3, #5
 800de38:	69bb      	ldr	r3, [r7, #24]
 800de3a:	4413      	add	r3, r2
 800de3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	0fdb      	lsrs	r3, r3, #31
 800de44:	f003 0301 	and.w	r3, r3, #1
 800de48:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	689b      	ldr	r3, [r3, #8]
 800de4e:	f003 0320 	and.w	r3, r3, #32
 800de52:	2b20      	cmp	r3, #32
 800de54:	d104      	bne.n	800de60 <USB_HC_Halt+0x5a>
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d101      	bne.n	800de60 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800de5c:	2300      	movs	r3, #0
 800de5e:	e0e8      	b.n	800e032 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d002      	beq.n	800de6c <USB_HC_Halt+0x66>
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	2b02      	cmp	r3, #2
 800de6a:	d173      	bne.n	800df54 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	015a      	lsls	r2, r3, #5
 800de70:	69bb      	ldr	r3, [r7, #24]
 800de72:	4413      	add	r3, r2
 800de74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	697a      	ldr	r2, [r7, #20]
 800de7c:	0151      	lsls	r1, r2, #5
 800de7e:	69ba      	ldr	r2, [r7, #24]
 800de80:	440a      	add	r2, r1
 800de82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de8a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	689b      	ldr	r3, [r3, #8]
 800de90:	f003 0320 	and.w	r3, r3, #32
 800de94:	2b00      	cmp	r3, #0
 800de96:	f040 80cb 	bne.w	800e030 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d143      	bne.n	800df2e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	015a      	lsls	r2, r3, #5
 800deaa:	69bb      	ldr	r3, [r7, #24]
 800deac:	4413      	add	r3, r2
 800deae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	697a      	ldr	r2, [r7, #20]
 800deb6:	0151      	lsls	r1, r2, #5
 800deb8:	69ba      	ldr	r2, [r7, #24]
 800deba:	440a      	add	r2, r1
 800debc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dec0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dec4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	015a      	lsls	r2, r3, #5
 800deca:	69bb      	ldr	r3, [r7, #24]
 800decc:	4413      	add	r3, r2
 800dece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	697a      	ldr	r2, [r7, #20]
 800ded6:	0151      	lsls	r1, r2, #5
 800ded8:	69ba      	ldr	r2, [r7, #24]
 800deda:	440a      	add	r2, r1
 800dedc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dee0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dee4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	015a      	lsls	r2, r3, #5
 800deea:	69bb      	ldr	r3, [r7, #24]
 800deec:	4413      	add	r3, r2
 800deee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	697a      	ldr	r2, [r7, #20]
 800def6:	0151      	lsls	r1, r2, #5
 800def8:	69ba      	ldr	r2, [r7, #24]
 800defa:	440a      	add	r2, r1
 800defc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800df04:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800df06:	69fb      	ldr	r3, [r7, #28]
 800df08:	3301      	adds	r3, #1
 800df0a:	61fb      	str	r3, [r7, #28]
 800df0c:	69fb      	ldr	r3, [r7, #28]
 800df0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df12:	d81d      	bhi.n	800df50 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	015a      	lsls	r2, r3, #5
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	4413      	add	r3, r2
 800df1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df2a:	d0ec      	beq.n	800df06 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800df2c:	e080      	b.n	800e030 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	015a      	lsls	r2, r3, #5
 800df32:	69bb      	ldr	r3, [r7, #24]
 800df34:	4413      	add	r3, r2
 800df36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	697a      	ldr	r2, [r7, #20]
 800df3e:	0151      	lsls	r1, r2, #5
 800df40:	69ba      	ldr	r2, [r7, #24]
 800df42:	440a      	add	r2, r1
 800df44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df4c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800df4e:	e06f      	b.n	800e030 <USB_HC_Halt+0x22a>
            break;
 800df50:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800df52:	e06d      	b.n	800e030 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	015a      	lsls	r2, r3, #5
 800df58:	69bb      	ldr	r3, [r7, #24]
 800df5a:	4413      	add	r3, r2
 800df5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	697a      	ldr	r2, [r7, #20]
 800df64:	0151      	lsls	r1, r2, #5
 800df66:	69ba      	ldr	r2, [r7, #24]
 800df68:	440a      	add	r2, r1
 800df6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df72:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800df74:	69bb      	ldr	r3, [r7, #24]
 800df76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800df7a:	691b      	ldr	r3, [r3, #16]
 800df7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800df80:	2b00      	cmp	r3, #0
 800df82:	d143      	bne.n	800e00c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	015a      	lsls	r2, r3, #5
 800df88:	69bb      	ldr	r3, [r7, #24]
 800df8a:	4413      	add	r3, r2
 800df8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	697a      	ldr	r2, [r7, #20]
 800df94:	0151      	lsls	r1, r2, #5
 800df96:	69ba      	ldr	r2, [r7, #24]
 800df98:	440a      	add	r2, r1
 800df9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dfa2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	015a      	lsls	r2, r3, #5
 800dfa8:	69bb      	ldr	r3, [r7, #24]
 800dfaa:	4413      	add	r3, r2
 800dfac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	697a      	ldr	r2, [r7, #20]
 800dfb4:	0151      	lsls	r1, r2, #5
 800dfb6:	69ba      	ldr	r2, [r7, #24]
 800dfb8:	440a      	add	r2, r1
 800dfba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dfbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dfc2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	015a      	lsls	r2, r3, #5
 800dfc8:	69bb      	ldr	r3, [r7, #24]
 800dfca:	4413      	add	r3, r2
 800dfcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	697a      	ldr	r2, [r7, #20]
 800dfd4:	0151      	lsls	r1, r2, #5
 800dfd6:	69ba      	ldr	r2, [r7, #24]
 800dfd8:	440a      	add	r2, r1
 800dfda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dfde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dfe2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800dfe4:	69fb      	ldr	r3, [r7, #28]
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	61fb      	str	r3, [r7, #28]
 800dfea:	69fb      	ldr	r3, [r7, #28]
 800dfec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dff0:	d81d      	bhi.n	800e02e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	015a      	lsls	r2, r3, #5
 800dff6:	69bb      	ldr	r3, [r7, #24]
 800dff8:	4413      	add	r3, r2
 800dffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e004:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e008:	d0ec      	beq.n	800dfe4 <USB_HC_Halt+0x1de>
 800e00a:	e011      	b.n	800e030 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	015a      	lsls	r2, r3, #5
 800e010:	69bb      	ldr	r3, [r7, #24]
 800e012:	4413      	add	r3, r2
 800e014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	697a      	ldr	r2, [r7, #20]
 800e01c:	0151      	lsls	r1, r2, #5
 800e01e:	69ba      	ldr	r2, [r7, #24]
 800e020:	440a      	add	r2, r1
 800e022:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e026:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e02a:	6013      	str	r3, [r2, #0]
 800e02c:	e000      	b.n	800e030 <USB_HC_Halt+0x22a>
          break;
 800e02e:	bf00      	nop
    }
  }

  return HAL_OK;
 800e030:	2300      	movs	r3, #0
}
 800e032:	4618      	mov	r0, r3
 800e034:	3724      	adds	r7, #36	; 0x24
 800e036:	46bd      	mov	sp, r7
 800e038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03c:	4770      	bx	lr
	...

0800e040 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e040:	b480      	push	{r7}
 800e042:	b087      	sub	sp, #28
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	460b      	mov	r3, r1
 800e04a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e050:	78fb      	ldrb	r3, [r7, #3]
 800e052:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e054:	2301      	movs	r3, #1
 800e056:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	04da      	lsls	r2, r3, #19
 800e05c:	4b15      	ldr	r3, [pc, #84]	; (800e0b4 <USB_DoPing+0x74>)
 800e05e:	4013      	ands	r3, r2
 800e060:	693a      	ldr	r2, [r7, #16]
 800e062:	0151      	lsls	r1, r2, #5
 800e064:	697a      	ldr	r2, [r7, #20]
 800e066:	440a      	add	r2, r1
 800e068:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e06c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e070:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	015a      	lsls	r2, r3, #5
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	4413      	add	r3, r2
 800e07a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e088:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e090:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	015a      	lsls	r2, r3, #5
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	4413      	add	r3, r2
 800e09a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e09e:	461a      	mov	r2, r3
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e0a4:	2300      	movs	r3, #0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	371c      	adds	r7, #28
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b0:	4770      	bx	lr
 800e0b2:	bf00      	nop
 800e0b4:	1ff80000 	.word	0x1ff80000

0800e0b8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b086      	sub	sp, #24
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f7ff f98e 	bl	800d3ea <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800e0ce:	2110      	movs	r1, #16
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f7ff f9c5 	bl	800d460 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f7ff f9e8 	bl	800d4ac <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e0dc:	2300      	movs	r3, #0
 800e0de:	613b      	str	r3, [r7, #16]
 800e0e0:	e01f      	b.n	800e122 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	015a      	lsls	r2, r3, #5
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e0f8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e100:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e108:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	015a      	lsls	r2, r3, #5
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	4413      	add	r3, r2
 800e112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e116:	461a      	mov	r2, r3
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	3301      	adds	r3, #1
 800e120:	613b      	str	r3, [r7, #16]
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	2b0f      	cmp	r3, #15
 800e126:	d9dc      	bls.n	800e0e2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e128:	2300      	movs	r3, #0
 800e12a:	613b      	str	r3, [r7, #16]
 800e12c:	e034      	b.n	800e198 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	015a      	lsls	r2, r3, #5
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	4413      	add	r3, r2
 800e136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e144:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e14c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e154:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	015a      	lsls	r2, r3, #5
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	4413      	add	r3, r2
 800e15e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e162:	461a      	mov	r2, r3
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	3301      	adds	r3, #1
 800e16c:	617b      	str	r3, [r7, #20]
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e174:	d80c      	bhi.n	800e190 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	015a      	lsls	r2, r3, #5
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	4413      	add	r3, r2
 800e17e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e188:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e18c:	d0ec      	beq.n	800e168 <USB_StopHost+0xb0>
 800e18e:	e000      	b.n	800e192 <USB_StopHost+0xda>
        break;
 800e190:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	3301      	adds	r3, #1
 800e196:	613b      	str	r3, [r7, #16]
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	2b0f      	cmp	r3, #15
 800e19c:	d9c7      	bls.n	800e12e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e1a4:	461a      	mov	r2, r3
 800e1a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e1aa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1b2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f7ff f907 	bl	800d3c8 <USB_EnableGlobalInt>

  return HAL_OK;
 800e1ba:	2300      	movs	r3, #0
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3718      	adds	r7, #24
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}

0800e1c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e1c8:	4904      	ldr	r1, [pc, #16]	; (800e1dc <MX_FATFS_Init+0x18>)
 800e1ca:	4805      	ldr	r0, [pc, #20]	; (800e1e0 <MX_FATFS_Init+0x1c>)
 800e1cc:	f003 fa9c 	bl	8011708 <FATFS_LinkDriver>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	461a      	mov	r2, r3
 800e1d4:	4b03      	ldr	r3, [pc, #12]	; (800e1e4 <MX_FATFS_Init+0x20>)
 800e1d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e1d8:	bf00      	nop
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	20000b6c 	.word	0x20000b6c
 800e1e0:	08014d68 	.word	0x08014d68
 800e1e4:	20000b68 	.word	0x20000b68

0800e1e8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e1f2:	f000 f87b 	bl	800e2ec <BSP_SD_IsDetected>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b01      	cmp	r3, #1
 800e1fa:	d001      	beq.n	800e200 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e1fc:	2302      	movs	r3, #2
 800e1fe:	e012      	b.n	800e226 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e200:	480b      	ldr	r0, [pc, #44]	; (800e230 <BSP_SD_Init+0x48>)
 800e202:	f7fb fa2d 	bl	8009660 <HAL_SD_Init>
 800e206:	4603      	mov	r3, r0
 800e208:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e20a:	79fb      	ldrb	r3, [r7, #7]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d109      	bne.n	800e224 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e210:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e214:	4806      	ldr	r0, [pc, #24]	; (800e230 <BSP_SD_Init+0x48>)
 800e216:	f7fb fe7b 	bl	8009f10 <HAL_SD_ConfigWideBusOperation>
 800e21a:	4603      	mov	r3, r0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d001      	beq.n	800e224 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e220:	2301      	movs	r3, #1
 800e222:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e224:	79fb      	ldrb	r3, [r7, #7]
}
 800e226:	4618      	mov	r0, r3
 800e228:	3708      	adds	r7, #8
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
 800e22e:	bf00      	nop
 800e230:	2000070c 	.word	0x2000070c

0800e234 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b086      	sub	sp, #24
 800e238:	af00      	add	r7, sp, #0
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e240:	2300      	movs	r3, #0
 800e242:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	68ba      	ldr	r2, [r7, #8]
 800e248:	68f9      	ldr	r1, [r7, #12]
 800e24a:	4806      	ldr	r0, [pc, #24]	; (800e264 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e24c:	f7fb fabe 	bl	80097cc <HAL_SD_ReadBlocks_DMA>
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	d001      	beq.n	800e25a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e256:	2301      	movs	r3, #1
 800e258:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e25a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3718      	adds	r7, #24
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}
 800e264:	2000070c 	.word	0x2000070c

0800e268 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b086      	sub	sp, #24
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	60b9      	str	r1, [r7, #8]
 800e272:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e274:	2300      	movs	r3, #0
 800e276:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	68ba      	ldr	r2, [r7, #8]
 800e27c:	68f9      	ldr	r1, [r7, #12]
 800e27e:	4806      	ldr	r0, [pc, #24]	; (800e298 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e280:	f7fb fb86 	bl	8009990 <HAL_SD_WriteBlocks_DMA>
 800e284:	4603      	mov	r3, r0
 800e286:	2b00      	cmp	r3, #0
 800e288:	d001      	beq.n	800e28e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e28a:	2301      	movs	r3, #1
 800e28c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e28e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e290:	4618      	mov	r0, r3
 800e292:	3718      	adds	r7, #24
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	2000070c 	.word	0x2000070c

0800e29c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e2a0:	4805      	ldr	r0, [pc, #20]	; (800e2b8 <BSP_SD_GetCardState+0x1c>)
 800e2a2:	f7fb fecf 	bl	800a044 <HAL_SD_GetCardState>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	2b04      	cmp	r3, #4
 800e2aa:	bf14      	ite	ne
 800e2ac:	2301      	movne	r3, #1
 800e2ae:	2300      	moveq	r3, #0
 800e2b0:	b2db      	uxtb	r3, r3
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	bd80      	pop	{r7, pc}
 800e2b6:	bf00      	nop
 800e2b8:	2000070c 	.word	0x2000070c

0800e2bc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b082      	sub	sp, #8
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e2c4:	6879      	ldr	r1, [r7, #4]
 800e2c6:	4803      	ldr	r0, [pc, #12]	; (800e2d4 <BSP_SD_GetCardInfo+0x18>)
 800e2c8:	f7fb fdf6 	bl	8009eb8 <HAL_SD_GetCardInfo>
}
 800e2cc:	bf00      	nop
 800e2ce:	3708      	adds	r7, #8
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	2000070c 	.word	0x2000070c

0800e2d8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b082      	sub	sp, #8
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e2e0:	f000 f9b2 	bl	800e648 <BSP_SD_ReadCpltCallback>
}
 800e2e4:	bf00      	nop
 800e2e6:	3708      	adds	r7, #8
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}

0800e2ec <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b082      	sub	sp, #8
 800e2f0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e2f6:	f000 f80b 	bl	800e310 <BSP_PlatformIsDetected>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d101      	bne.n	800e304 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e300:	2300      	movs	r3, #0
 800e302:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e304:	79fb      	ldrb	r3, [r7, #7]
 800e306:	b2db      	uxtb	r3, r3
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3708      	adds	r7, #8
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e310:	b580      	push	{r7, lr}
 800e312:	b082      	sub	sp, #8
 800e314:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e316:	2301      	movs	r3, #1
 800e318:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e31a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e31e:	4806      	ldr	r0, [pc, #24]	; (800e338 <BSP_PlatformIsDetected+0x28>)
 800e320:	f7f6 feb0 	bl	8005084 <HAL_GPIO_ReadPin>
 800e324:	4603      	mov	r3, r0
 800e326:	2b00      	cmp	r3, #0
 800e328:	d001      	beq.n	800e32e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e32a:	2300      	movs	r3, #0
 800e32c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e32e:	79fb      	ldrb	r3, [r7, #7]
}
 800e330:	4618      	mov	r0, r3
 800e332:	3708      	adds	r7, #8
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	40020800 	.word	0x40020800

0800e33c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b084      	sub	sp, #16
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800e344:	f003 fa2c 	bl	80117a0 <osKernelSysTick>
 800e348:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800e34a:	e006      	b.n	800e35a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e34c:	f7ff ffa6 	bl	800e29c <BSP_SD_GetCardState>
 800e350:	4603      	mov	r3, r0
 800e352:	2b00      	cmp	r3, #0
 800e354:	d101      	bne.n	800e35a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e356:	2300      	movs	r3, #0
 800e358:	e009      	b.n	800e36e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800e35a:	f003 fa21 	bl	80117a0 <osKernelSysTick>
 800e35e:	4602      	mov	r2, r0
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	1ad3      	subs	r3, r2, r3
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	429a      	cmp	r2, r3
 800e368:	d8f0      	bhi.n	800e34c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e36a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3710      	adds	r7, #16
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
	...

0800e378 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b082      	sub	sp, #8
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	4603      	mov	r3, r0
 800e380:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e382:	4b0b      	ldr	r3, [pc, #44]	; (800e3b0 <SD_CheckStatus+0x38>)
 800e384:	2201      	movs	r2, #1
 800e386:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e388:	f7ff ff88 	bl	800e29c <BSP_SD_GetCardState>
 800e38c:	4603      	mov	r3, r0
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d107      	bne.n	800e3a2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e392:	4b07      	ldr	r3, [pc, #28]	; (800e3b0 <SD_CheckStatus+0x38>)
 800e394:	781b      	ldrb	r3, [r3, #0]
 800e396:	b2db      	uxtb	r3, r3
 800e398:	f023 0301 	bic.w	r3, r3, #1
 800e39c:	b2da      	uxtb	r2, r3
 800e39e:	4b04      	ldr	r3, [pc, #16]	; (800e3b0 <SD_CheckStatus+0x38>)
 800e3a0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e3a2:	4b03      	ldr	r3, [pc, #12]	; (800e3b0 <SD_CheckStatus+0x38>)
 800e3a4:	781b      	ldrb	r3, [r3, #0]
 800e3a6:	b2db      	uxtb	r3, r3
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3708      	adds	r7, #8
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	20000009 	.word	0x20000009

0800e3b4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e3b4:	b590      	push	{r4, r7, lr}
 800e3b6:	b087      	sub	sp, #28
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800e3be:	4b20      	ldr	r3, [pc, #128]	; (800e440 <SD_initialize+0x8c>)
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800e3c4:	f003 f9e0 	bl	8011788 <osKernelRunning>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d030      	beq.n	800e430 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800e3ce:	f7ff ff0b 	bl	800e1e8 <BSP_SD_Init>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d107      	bne.n	800e3e8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800e3d8:	79fb      	ldrb	r3, [r7, #7]
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7ff ffcc 	bl	800e378 <SD_CheckStatus>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	461a      	mov	r2, r3
 800e3e4:	4b16      	ldr	r3, [pc, #88]	; (800e440 <SD_initialize+0x8c>)
 800e3e6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800e3e8:	4b15      	ldr	r3, [pc, #84]	; (800e440 <SD_initialize+0x8c>)
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	b2db      	uxtb	r3, r3
 800e3ee:	2b01      	cmp	r3, #1
 800e3f0:	d01e      	beq.n	800e430 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800e3f2:	4b14      	ldr	r3, [pc, #80]	; (800e444 <SD_initialize+0x90>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d10e      	bne.n	800e418 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800e3fa:	4b13      	ldr	r3, [pc, #76]	; (800e448 <SD_initialize+0x94>)
 800e3fc:	f107 0408 	add.w	r4, r7, #8
 800e400:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e402:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800e406:	f107 0308 	add.w	r3, r7, #8
 800e40a:	2100      	movs	r1, #0
 800e40c:	4618      	mov	r0, r3
 800e40e:	f003 fa37 	bl	8011880 <osMessageCreate>
 800e412:	4603      	mov	r3, r0
 800e414:	4a0b      	ldr	r2, [pc, #44]	; (800e444 <SD_initialize+0x90>)
 800e416:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800e418:	4b0a      	ldr	r3, [pc, #40]	; (800e444 <SD_initialize+0x90>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d107      	bne.n	800e430 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800e420:	4b07      	ldr	r3, [pc, #28]	; (800e440 <SD_initialize+0x8c>)
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	b2db      	uxtb	r3, r3
 800e426:	f043 0301 	orr.w	r3, r3, #1
 800e42a:	b2da      	uxtb	r2, r3
 800e42c:	4b04      	ldr	r3, [pc, #16]	; (800e440 <SD_initialize+0x8c>)
 800e42e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800e430:	4b03      	ldr	r3, [pc, #12]	; (800e440 <SD_initialize+0x8c>)
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	b2db      	uxtb	r3, r3
}
 800e436:	4618      	mov	r0, r3
 800e438:	371c      	adds	r7, #28
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd90      	pop	{r4, r7, pc}
 800e43e:	bf00      	nop
 800e440:	20000009 	.word	0x20000009
 800e444:	20000b70 	.word	0x20000b70
 800e448:	08014cf4 	.word	0x08014cf4

0800e44c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	4603      	mov	r3, r0
 800e454:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e456:	79fb      	ldrb	r3, [r7, #7]
 800e458:	4618      	mov	r0, r3
 800e45a:	f7ff ff8d 	bl	800e378 <SD_CheckStatus>
 800e45e:	4603      	mov	r3, r0
}
 800e460:	4618      	mov	r0, r3
 800e462:	3708      	adds	r7, #8
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}

0800e468 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b08a      	sub	sp, #40	; 0x28
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	60b9      	str	r1, [r7, #8]
 800e470:	607a      	str	r2, [r7, #4]
 800e472:	603b      	str	r3, [r7, #0]
 800e474:	4603      	mov	r3, r0
 800e476:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800e478:	2301      	movs	r3, #1
 800e47a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e47e:	f247 5030 	movw	r0, #30000	; 0x7530
 800e482:	f7ff ff5b 	bl	800e33c <SD_CheckStatusWithTimeout>
 800e486:	4603      	mov	r3, r0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	da02      	bge.n	800e492 <SD_read+0x2a>
  {
    return res;
 800e48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e490:	e032      	b.n	800e4f8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800e492:	683a      	ldr	r2, [r7, #0]
 800e494:	6879      	ldr	r1, [r7, #4]
 800e496:	68b8      	ldr	r0, [r7, #8]
 800e498:	f7ff fecc 	bl	800e234 <BSP_SD_ReadBlocks_DMA>
 800e49c:	4603      	mov	r3, r0
 800e49e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800e4a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d124      	bne.n	800e4f4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e4aa:	4b15      	ldr	r3, [pc, #84]	; (800e500 <SD_read+0x98>)
 800e4ac:	6819      	ldr	r1, [r3, #0]
 800e4ae:	f107 0314 	add.w	r3, r7, #20
 800e4b2:	f247 5230 	movw	r2, #30000	; 0x7530
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f003 fa4a 	bl	8011950 <osMessageGet>

    if (event.status == osEventMessage)
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	2b10      	cmp	r3, #16
 800e4c0:	d118      	bne.n	800e4f4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800e4c2:	69bb      	ldr	r3, [r7, #24]
 800e4c4:	2b01      	cmp	r3, #1
 800e4c6:	d115      	bne.n	800e4f4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800e4c8:	f003 f96a 	bl	80117a0 <osKernelSysTick>
 800e4cc:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800e4ce:	e008      	b.n	800e4e2 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e4d0:	f7ff fee4 	bl	800e29c <BSP_SD_GetCardState>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d103      	bne.n	800e4e2 <SD_read+0x7a>
              {
                res = RES_OK;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800e4e0:	e008      	b.n	800e4f4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800e4e2:	f003 f95d 	bl	80117a0 <osKernelSysTick>
 800e4e6:	4602      	mov	r2, r0
 800e4e8:	6a3b      	ldr	r3, [r7, #32]
 800e4ea:	1ad3      	subs	r3, r2, r3
 800e4ec:	f247 522f 	movw	r2, #29999	; 0x752f
 800e4f0:	4293      	cmp	r3, r2
 800e4f2:	d9ed      	bls.n	800e4d0 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800e4f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3728      	adds	r7, #40	; 0x28
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	20000b70 	.word	0x20000b70

0800e504 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b08a      	sub	sp, #40	; 0x28
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60b9      	str	r1, [r7, #8]
 800e50c:	607a      	str	r2, [r7, #4]
 800e50e:	603b      	str	r3, [r7, #0]
 800e510:	4603      	mov	r3, r0
 800e512:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e514:	2301      	movs	r3, #1
 800e516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e51a:	f247 5030 	movw	r0, #30000	; 0x7530
 800e51e:	f7ff ff0d 	bl	800e33c <SD_CheckStatusWithTimeout>
 800e522:	4603      	mov	r3, r0
 800e524:	2b00      	cmp	r3, #0
 800e526:	da02      	bge.n	800e52e <SD_write+0x2a>
  {
    return res;
 800e528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e52c:	e02e      	b.n	800e58c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e52e:	683a      	ldr	r2, [r7, #0]
 800e530:	6879      	ldr	r1, [r7, #4]
 800e532:	68b8      	ldr	r0, [r7, #8]
 800e534:	f7ff fe98 	bl	800e268 <BSP_SD_WriteBlocks_DMA>
 800e538:	4603      	mov	r3, r0
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d124      	bne.n	800e588 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e53e:	4b15      	ldr	r3, [pc, #84]	; (800e594 <SD_write+0x90>)
 800e540:	6819      	ldr	r1, [r3, #0]
 800e542:	f107 0314 	add.w	r3, r7, #20
 800e546:	f247 5230 	movw	r2, #30000	; 0x7530
 800e54a:	4618      	mov	r0, r3
 800e54c:	f003 fa00 	bl	8011950 <osMessageGet>

    if (event.status == osEventMessage)
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	2b10      	cmp	r3, #16
 800e554:	d118      	bne.n	800e588 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800e556:	69bb      	ldr	r3, [r7, #24]
 800e558:	2b02      	cmp	r3, #2
 800e55a:	d115      	bne.n	800e588 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800e55c:	f003 f920 	bl	80117a0 <osKernelSysTick>
 800e560:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e562:	e008      	b.n	800e576 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e564:	f7ff fe9a 	bl	800e29c <BSP_SD_GetCardState>
 800e568:	4603      	mov	r3, r0
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d103      	bne.n	800e576 <SD_write+0x72>
          {
            res = RES_OK;
 800e56e:	2300      	movs	r3, #0
 800e570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e574:	e008      	b.n	800e588 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e576:	f003 f913 	bl	80117a0 <osKernelSysTick>
 800e57a:	4602      	mov	r2, r0
 800e57c:	6a3b      	ldr	r3, [r7, #32]
 800e57e:	1ad3      	subs	r3, r2, r3
 800e580:	f247 522f 	movw	r2, #29999	; 0x752f
 800e584:	4293      	cmp	r3, r2
 800e586:	d9ed      	bls.n	800e564 <SD_write+0x60>
    }

  }
#endif

  return res;
 800e588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3728      	adds	r7, #40	; 0x28
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}
 800e594:	20000b70 	.word	0x20000b70

0800e598 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b08c      	sub	sp, #48	; 0x30
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	4603      	mov	r3, r0
 800e5a0:	603a      	str	r2, [r7, #0]
 800e5a2:	71fb      	strb	r3, [r7, #7]
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e5ae:	4b25      	ldr	r3, [pc, #148]	; (800e644 <SD_ioctl+0xac>)
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	b2db      	uxtb	r3, r3
 800e5b4:	f003 0301 	and.w	r3, r3, #1
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d001      	beq.n	800e5c0 <SD_ioctl+0x28>
 800e5bc:	2303      	movs	r3, #3
 800e5be:	e03c      	b.n	800e63a <SD_ioctl+0xa2>

  switch (cmd)
 800e5c0:	79bb      	ldrb	r3, [r7, #6]
 800e5c2:	2b03      	cmp	r3, #3
 800e5c4:	d834      	bhi.n	800e630 <SD_ioctl+0x98>
 800e5c6:	a201      	add	r2, pc, #4	; (adr r2, 800e5cc <SD_ioctl+0x34>)
 800e5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5cc:	0800e5dd 	.word	0x0800e5dd
 800e5d0:	0800e5e5 	.word	0x0800e5e5
 800e5d4:	0800e5fd 	.word	0x0800e5fd
 800e5d8:	0800e617 	.word	0x0800e617
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e5e2:	e028      	b.n	800e636 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e5e4:	f107 030c 	add.w	r3, r7, #12
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7ff fe67 	bl	800e2bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e5ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e5fa:	e01c      	b.n	800e636 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e5fc:	f107 030c 	add.w	r3, r7, #12
 800e600:	4618      	mov	r0, r3
 800e602:	f7ff fe5b 	bl	800e2bc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e608:	b29a      	uxth	r2, r3
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e60e:	2300      	movs	r3, #0
 800e610:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e614:	e00f      	b.n	800e636 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e616:	f107 030c 	add.w	r3, r7, #12
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7ff fe4e 	bl	800e2bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e622:	0a5a      	lsrs	r2, r3, #9
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e628:	2300      	movs	r3, #0
 800e62a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e62e:	e002      	b.n	800e636 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e630:	2304      	movs	r3, #4
 800e632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e636:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3730      	adds	r7, #48	; 0x30
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	20000009 	.word	0x20000009

0800e648 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800e64c:	4b04      	ldr	r3, [pc, #16]	; (800e660 <BSP_SD_ReadCpltCallback+0x18>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2200      	movs	r2, #0
 800e652:	2101      	movs	r1, #1
 800e654:	4618      	mov	r0, r3
 800e656:	f003 f93b 	bl	80118d0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800e65a:	bf00      	nop
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	20000b70 	.word	0x20000b70

0800e664 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 800e664:	b580      	push	{r7, lr}
 800e666:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800e668:	4b31      	ldr	r3, [pc, #196]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e66a:	2228      	movs	r2, #40	; 0x28
 800e66c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800e66e:	4b30      	ldr	r3, [pc, #192]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e670:	2209      	movs	r2, #9
 800e672:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800e674:	4b2e      	ldr	r3, [pc, #184]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e676:	2235      	movs	r2, #53	; 0x35
 800e678:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800e67a:	4b2d      	ldr	r3, [pc, #180]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e67c:	220b      	movs	r2, #11
 800e67e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800e680:	4b2b      	ldr	r3, [pc, #172]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e682:	f240 121b 	movw	r2, #283	; 0x11b
 800e686:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800e688:	4b29      	ldr	r3, [pc, #164]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e68a:	f240 2215 	movw	r2, #533	; 0x215
 800e68e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800e690:	4b27      	ldr	r3, [pc, #156]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e692:	f240 121d 	movw	r2, #285	; 0x11d
 800e696:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800e698:	4b25      	ldr	r3, [pc, #148]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e69a:	f240 2235 	movw	r2, #565	; 0x235
 800e69e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800e6a0:	2100      	movs	r1, #0
 800e6a2:	4823      	ldr	r0, [pc, #140]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e6a4:	f000 fbbc 	bl	800ee20 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800e6a8:	4b21      	ldr	r3, [pc, #132]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e6aa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e6ae:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800e6b0:	4b1f      	ldr	r3, [pc, #124]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e6b2:	f44f 7288 	mov.w	r2, #272	; 0x110
 800e6b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800e6b8:	4b1d      	ldr	r3, [pc, #116]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800e6c0:	4b1b      	ldr	r3, [pc, #108]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800e6c8:	4b19      	ldr	r3, [pc, #100]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800e6d0:	4b17      	ldr	r3, [pc, #92]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800e6d6:	4b16      	ldr	r3, [pc, #88]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e6d8:	2200      	movs	r2, #0
 800e6da:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800e6dc:	4b14      	ldr	r3, [pc, #80]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e6de:	2200      	movs	r2, #0
 800e6e0:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800e6e2:	4b13      	ldr	r3, [pc, #76]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800e6e8:	4b11      	ldr	r3, [pc, #68]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e6ea:	4a12      	ldr	r2, [pc, #72]	; (800e734 <BSP_LCD_Init+0xd0>)
 800e6ec:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800e6ee:	4810      	ldr	r0, [pc, #64]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e6f0:	f7f8 fd6e 	bl	80071d0 <HAL_LTDC_GetState>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d103      	bne.n	800e702 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800e6fa:	2100      	movs	r1, #0
 800e6fc:	480c      	ldr	r0, [pc, #48]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e6fe:	f000 fab5 	bl	800ec6c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800e702:	480b      	ldr	r0, [pc, #44]	; (800e730 <BSP_LCD_Init+0xcc>)
 800e704:	f7f8 fb94 	bl	8006e30 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800e708:	2201      	movs	r2, #1
 800e70a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e70e:	480a      	ldr	r0, [pc, #40]	; (800e738 <BSP_LCD_Init+0xd4>)
 800e710:	f7f6 fcd0 	bl	80050b4 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800e714:	2201      	movs	r2, #1
 800e716:	2108      	movs	r1, #8
 800e718:	4808      	ldr	r0, [pc, #32]	; (800e73c <BSP_LCD_Init+0xd8>)
 800e71a:	f7f6 fccb 	bl	80050b4 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800e71e:	f000 fc9f 	bl	800f060 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800e722:	4807      	ldr	r0, [pc, #28]	; (800e740 <BSP_LCD_Init+0xdc>)
 800e724:	f000 f8d8 	bl	800e8d8 <BSP_LCD_SetFont>
  
  return LCD_OK;
 800e728:	2300      	movs	r3, #0
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	bd80      	pop	{r7, pc}
 800e72e:	bf00      	nop
 800e730:	20000b74 	.word	0x20000b74
 800e734:	40016800 	.word	0x40016800
 800e738:	40022000 	.word	0x40022000
 800e73c:	40022800 	.word	0x40022800
 800e740:	2000000c 	.word	0x2000000c

0800e744 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800e744:	b480      	push	{r7}
 800e746:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800e748:	4b06      	ldr	r3, [pc, #24]	; (800e764 <BSP_LCD_GetXSize+0x20>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	4a06      	ldr	r2, [pc, #24]	; (800e768 <BSP_LCD_GetXSize+0x24>)
 800e74e:	2134      	movs	r1, #52	; 0x34
 800e750:	fb01 f303 	mul.w	r3, r1, r3
 800e754:	4413      	add	r3, r2
 800e756:	3360      	adds	r3, #96	; 0x60
 800e758:	681b      	ldr	r3, [r3, #0]
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr
 800e764:	20000c5c 	.word	0x20000c5c
 800e768:	20000b74 	.word	0x20000b74

0800e76c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800e76c:	b480      	push	{r7}
 800e76e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800e770:	4b06      	ldr	r3, [pc, #24]	; (800e78c <BSP_LCD_GetYSize+0x20>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4a06      	ldr	r2, [pc, #24]	; (800e790 <BSP_LCD_GetYSize+0x24>)
 800e776:	2134      	movs	r1, #52	; 0x34
 800e778:	fb01 f303 	mul.w	r3, r1, r3
 800e77c:	4413      	add	r3, r2
 800e77e:	3364      	adds	r3, #100	; 0x64
 800e780:	681b      	ldr	r3, [r3, #0]
}
 800e782:	4618      	mov	r0, r3
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr
 800e78c:	20000c5c 	.word	0x20000c5c
 800e790:	20000b74 	.word	0x20000b74

0800e794 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800e794:	b580      	push	{r7, lr}
 800e796:	b090      	sub	sp, #64	; 0x40
 800e798:	af00      	add	r7, sp, #0
 800e79a:	4603      	mov	r3, r0
 800e79c:	6039      	str	r1, [r7, #0]
 800e79e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 800e7a4:	f7ff ffce 	bl	800e744 <BSP_LCD_GetXSize>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800e7b0:	f7ff ffdc 	bl	800e76c <BSP_LCD_GetYSize>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800e7c0:	23ff      	movs	r3, #255	; 0xff
 800e7c2:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800e7da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e7de:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800e7e0:	2307      	movs	r3, #7
 800e7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 800e7e4:	f7ff ffae 	bl	800e744 <BSP_LCD_GetXSize>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800e7ec:	f7ff ffbe 	bl	800e76c <BSP_LCD_GetYSize>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800e7f4:	88fa      	ldrh	r2, [r7, #6]
 800e7f6:	f107 030c 	add.w	r3, r7, #12
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	4812      	ldr	r0, [pc, #72]	; (800e848 <BSP_LCD_LayerDefaultInit+0xb4>)
 800e7fe:	f7f8 fca9 	bl	8007154 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800e802:	88fa      	ldrh	r2, [r7, #6]
 800e804:	4911      	ldr	r1, [pc, #68]	; (800e84c <BSP_LCD_LayerDefaultInit+0xb8>)
 800e806:	4613      	mov	r3, r2
 800e808:	005b      	lsls	r3, r3, #1
 800e80a:	4413      	add	r3, r2
 800e80c:	009b      	lsls	r3, r3, #2
 800e80e:	440b      	add	r3, r1
 800e810:	3304      	adds	r3, #4
 800e812:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e816:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800e818:	88fa      	ldrh	r2, [r7, #6]
 800e81a:	490c      	ldr	r1, [pc, #48]	; (800e84c <BSP_LCD_LayerDefaultInit+0xb8>)
 800e81c:	4613      	mov	r3, r2
 800e81e:	005b      	lsls	r3, r3, #1
 800e820:	4413      	add	r3, r2
 800e822:	009b      	lsls	r3, r3, #2
 800e824:	440b      	add	r3, r1
 800e826:	3308      	adds	r3, #8
 800e828:	4a09      	ldr	r2, [pc, #36]	; (800e850 <BSP_LCD_LayerDefaultInit+0xbc>)
 800e82a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800e82c:	88fa      	ldrh	r2, [r7, #6]
 800e82e:	4907      	ldr	r1, [pc, #28]	; (800e84c <BSP_LCD_LayerDefaultInit+0xb8>)
 800e830:	4613      	mov	r3, r2
 800e832:	005b      	lsls	r3, r3, #1
 800e834:	4413      	add	r3, r2
 800e836:	009b      	lsls	r3, r3, #2
 800e838:	440b      	add	r3, r1
 800e83a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800e83e:	601a      	str	r2, [r3, #0]
}
 800e840:	bf00      	nop
 800e842:	3740      	adds	r7, #64	; 0x40
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}
 800e848:	20000b74 	.word	0x20000b74
 800e84c:	20000c60 	.word	0x20000c60
 800e850:	2000000c 	.word	0x2000000c

0800e854 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800e854:	b480      	push	{r7}
 800e856:	b083      	sub	sp, #12
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800e85c:	4a04      	ldr	r2, [pc, #16]	; (800e870 <BSP_LCD_SelectLayer+0x1c>)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6013      	str	r3, [r2, #0]
} 
 800e862:	bf00      	nop
 800e864:	370c      	adds	r7, #12
 800e866:	46bd      	mov	sp, r7
 800e868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86c:	4770      	bx	lr
 800e86e:	bf00      	nop
 800e870:	20000c5c 	.word	0x20000c5c

0800e874 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800e874:	b480      	push	{r7}
 800e876:	b083      	sub	sp, #12
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800e87c:	4b07      	ldr	r3, [pc, #28]	; (800e89c <BSP_LCD_SetTextColor+0x28>)
 800e87e:	681a      	ldr	r2, [r3, #0]
 800e880:	4907      	ldr	r1, [pc, #28]	; (800e8a0 <BSP_LCD_SetTextColor+0x2c>)
 800e882:	4613      	mov	r3, r2
 800e884:	005b      	lsls	r3, r3, #1
 800e886:	4413      	add	r3, r2
 800e888:	009b      	lsls	r3, r3, #2
 800e88a:	440b      	add	r3, r1
 800e88c:	687a      	ldr	r2, [r7, #4]
 800e88e:	601a      	str	r2, [r3, #0]
}
 800e890:	bf00      	nop
 800e892:	370c      	adds	r7, #12
 800e894:	46bd      	mov	sp, r7
 800e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89a:	4770      	bx	lr
 800e89c:	20000c5c 	.word	0x20000c5c
 800e8a0:	20000c60 	.word	0x20000c60

0800e8a4 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800e8ac:	4b08      	ldr	r3, [pc, #32]	; (800e8d0 <BSP_LCD_SetBackColor+0x2c>)
 800e8ae:	681a      	ldr	r2, [r3, #0]
 800e8b0:	4908      	ldr	r1, [pc, #32]	; (800e8d4 <BSP_LCD_SetBackColor+0x30>)
 800e8b2:	4613      	mov	r3, r2
 800e8b4:	005b      	lsls	r3, r3, #1
 800e8b6:	4413      	add	r3, r2
 800e8b8:	009b      	lsls	r3, r3, #2
 800e8ba:	440b      	add	r3, r1
 800e8bc:	3304      	adds	r3, #4
 800e8be:	687a      	ldr	r2, [r7, #4]
 800e8c0:	601a      	str	r2, [r3, #0]
}
 800e8c2:	bf00      	nop
 800e8c4:	370c      	adds	r7, #12
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8cc:	4770      	bx	lr
 800e8ce:	bf00      	nop
 800e8d0:	20000c5c 	.word	0x20000c5c
 800e8d4:	20000c60 	.word	0x20000c60

0800e8d8 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b083      	sub	sp, #12
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800e8e0:	4b08      	ldr	r3, [pc, #32]	; (800e904 <BSP_LCD_SetFont+0x2c>)
 800e8e2:	681a      	ldr	r2, [r3, #0]
 800e8e4:	4908      	ldr	r1, [pc, #32]	; (800e908 <BSP_LCD_SetFont+0x30>)
 800e8e6:	4613      	mov	r3, r2
 800e8e8:	005b      	lsls	r3, r3, #1
 800e8ea:	4413      	add	r3, r2
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	440b      	add	r3, r1
 800e8f0:	3308      	adds	r3, #8
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	601a      	str	r2, [r3, #0]
}
 800e8f6:	bf00      	nop
 800e8f8:	370c      	adds	r7, #12
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr
 800e902:	bf00      	nop
 800e904:	20000c5c 	.word	0x20000c5c
 800e908:	20000c60 	.word	0x20000c60

0800e90c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800e90c:	b480      	push	{r7}
 800e90e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 800e910:	4b07      	ldr	r3, [pc, #28]	; (800e930 <BSP_LCD_GetFont+0x24>)
 800e912:	681a      	ldr	r2, [r3, #0]
 800e914:	4907      	ldr	r1, [pc, #28]	; (800e934 <BSP_LCD_GetFont+0x28>)
 800e916:	4613      	mov	r3, r2
 800e918:	005b      	lsls	r3, r3, #1
 800e91a:	4413      	add	r3, r2
 800e91c:	009b      	lsls	r3, r3, #2
 800e91e:	440b      	add	r3, r1
 800e920:	3308      	adds	r3, #8
 800e922:	681b      	ldr	r3, [r3, #0]
}
 800e924:	4618      	mov	r0, r3
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr
 800e92e:	bf00      	nop
 800e930:	20000c5c 	.word	0x20000c5c
 800e934:	20000c60 	.word	0x20000c60

0800e938 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800e938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e93a:	b085      	sub	sp, #20
 800e93c:	af02      	add	r7, sp, #8
 800e93e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800e940:	4b0f      	ldr	r3, [pc, #60]	; (800e980 <BSP_LCD_Clear+0x48>)
 800e942:	681c      	ldr	r4, [r3, #0]
 800e944:	4b0e      	ldr	r3, [pc, #56]	; (800e980 <BSP_LCD_Clear+0x48>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	4a0e      	ldr	r2, [pc, #56]	; (800e984 <BSP_LCD_Clear+0x4c>)
 800e94a:	2134      	movs	r1, #52	; 0x34
 800e94c:	fb01 f303 	mul.w	r3, r1, r3
 800e950:	4413      	add	r3, r2
 800e952:	335c      	adds	r3, #92	; 0x5c
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	461e      	mov	r6, r3
 800e958:	f7ff fef4 	bl	800e744 <BSP_LCD_GetXSize>
 800e95c:	4605      	mov	r5, r0
 800e95e:	f7ff ff05 	bl	800e76c <BSP_LCD_GetYSize>
 800e962:	4602      	mov	r2, r0
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	9301      	str	r3, [sp, #4]
 800e968:	2300      	movs	r3, #0
 800e96a:	9300      	str	r3, [sp, #0]
 800e96c:	4613      	mov	r3, r2
 800e96e:	462a      	mov	r2, r5
 800e970:	4631      	mov	r1, r6
 800e972:	4620      	mov	r0, r4
 800e974:	f000 fb28 	bl	800efc8 <LL_FillBuffer>
}
 800e978:	bf00      	nop
 800e97a:	370c      	adds	r7, #12
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e980:	20000c5c 	.word	0x20000c5c
 800e984:	20000b74 	.word	0x20000b74

0800e988 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800e988:	b590      	push	{r4, r7, lr}
 800e98a:	b083      	sub	sp, #12
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	4603      	mov	r3, r0
 800e990:	80fb      	strh	r3, [r7, #6]
 800e992:	460b      	mov	r3, r1
 800e994:	80bb      	strh	r3, [r7, #4]
 800e996:	4613      	mov	r3, r2
 800e998:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800e99a:	4b1b      	ldr	r3, [pc, #108]	; (800ea08 <BSP_LCD_DisplayChar+0x80>)
 800e99c:	681a      	ldr	r2, [r3, #0]
 800e99e:	491b      	ldr	r1, [pc, #108]	; (800ea0c <BSP_LCD_DisplayChar+0x84>)
 800e9a0:	4613      	mov	r3, r2
 800e9a2:	005b      	lsls	r3, r3, #1
 800e9a4:	4413      	add	r3, r2
 800e9a6:	009b      	lsls	r3, r3, #2
 800e9a8:	440b      	add	r3, r1
 800e9aa:	3308      	adds	r3, #8
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	6819      	ldr	r1, [r3, #0]
 800e9b0:	78fb      	ldrb	r3, [r7, #3]
 800e9b2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800e9b6:	4b14      	ldr	r3, [pc, #80]	; (800ea08 <BSP_LCD_DisplayChar+0x80>)
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	4c14      	ldr	r4, [pc, #80]	; (800ea0c <BSP_LCD_DisplayChar+0x84>)
 800e9bc:	4613      	mov	r3, r2
 800e9be:	005b      	lsls	r3, r3, #1
 800e9c0:	4413      	add	r3, r2
 800e9c2:	009b      	lsls	r3, r3, #2
 800e9c4:	4423      	add	r3, r4
 800e9c6:	3308      	adds	r3, #8
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800e9cc:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800e9d0:	4b0d      	ldr	r3, [pc, #52]	; (800ea08 <BSP_LCD_DisplayChar+0x80>)
 800e9d2:	681a      	ldr	r2, [r3, #0]
 800e9d4:	4c0d      	ldr	r4, [pc, #52]	; (800ea0c <BSP_LCD_DisplayChar+0x84>)
 800e9d6:	4613      	mov	r3, r2
 800e9d8:	005b      	lsls	r3, r3, #1
 800e9da:	4413      	add	r3, r2
 800e9dc:	009b      	lsls	r3, r3, #2
 800e9de:	4423      	add	r3, r4
 800e9e0:	3308      	adds	r3, #8
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	889b      	ldrh	r3, [r3, #4]
 800e9e6:	3307      	adds	r3, #7
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	da00      	bge.n	800e9ee <BSP_LCD_DisplayChar+0x66>
 800e9ec:	3307      	adds	r3, #7
 800e9ee:	10db      	asrs	r3, r3, #3
 800e9f0:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800e9f4:	18ca      	adds	r2, r1, r3
 800e9f6:	88b9      	ldrh	r1, [r7, #4]
 800e9f8:	88fb      	ldrh	r3, [r7, #6]
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f000 fa2c 	bl	800ee58 <DrawChar>
}
 800ea00:	bf00      	nop
 800ea02:	370c      	adds	r7, #12
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd90      	pop	{r4, r7, pc}
 800ea08:	20000c5c 	.word	0x20000c5c
 800ea0c:	20000c60 	.word	0x20000c60

0800ea10 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800ea10:	b5b0      	push	{r4, r5, r7, lr}
 800ea12:	b088      	sub	sp, #32
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	60ba      	str	r2, [r7, #8]
 800ea18:	461a      	mov	r2, r3
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	81fb      	strh	r3, [r7, #14]
 800ea1e:	460b      	mov	r3, r1
 800ea20:	81bb      	strh	r3, [r7, #12]
 800ea22:	4613      	mov	r3, r2
 800ea24:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800ea26:	2301      	movs	r3, #1
 800ea28:	83fb      	strh	r3, [r7, #30]
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800ea2e:	2300      	movs	r3, #0
 800ea30:	61bb      	str	r3, [r7, #24]
 800ea32:	2300      	movs	r3, #0
 800ea34:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800ea3a:	e002      	b.n	800ea42 <BSP_LCD_DisplayStringAt+0x32>
 800ea3c:	69bb      	ldr	r3, [r7, #24]
 800ea3e:	3301      	adds	r3, #1
 800ea40:	61bb      	str	r3, [r7, #24]
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	1c5a      	adds	r2, r3, #1
 800ea46:	617a      	str	r2, [r7, #20]
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d1f6      	bne.n	800ea3c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800ea4e:	f7ff fe79 	bl	800e744 <BSP_LCD_GetXSize>
 800ea52:	4601      	mov	r1, r0
 800ea54:	4b50      	ldr	r3, [pc, #320]	; (800eb98 <BSP_LCD_DisplayStringAt+0x188>)
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	4850      	ldr	r0, [pc, #320]	; (800eb9c <BSP_LCD_DisplayStringAt+0x18c>)
 800ea5a:	4613      	mov	r3, r2
 800ea5c:	005b      	lsls	r3, r3, #1
 800ea5e:	4413      	add	r3, r2
 800ea60:	009b      	lsls	r3, r3, #2
 800ea62:	4403      	add	r3, r0
 800ea64:	3308      	adds	r3, #8
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	889b      	ldrh	r3, [r3, #4]
 800ea6a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ea6e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800ea70:	79fb      	ldrb	r3, [r7, #7]
 800ea72:	2b03      	cmp	r3, #3
 800ea74:	d01c      	beq.n	800eab0 <BSP_LCD_DisplayStringAt+0xa0>
 800ea76:	2b03      	cmp	r3, #3
 800ea78:	dc33      	bgt.n	800eae2 <BSP_LCD_DisplayStringAt+0xd2>
 800ea7a:	2b01      	cmp	r3, #1
 800ea7c:	d002      	beq.n	800ea84 <BSP_LCD_DisplayStringAt+0x74>
 800ea7e:	2b02      	cmp	r3, #2
 800ea80:	d019      	beq.n	800eab6 <BSP_LCD_DisplayStringAt+0xa6>
 800ea82:	e02e      	b.n	800eae2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800ea84:	693a      	ldr	r2, [r7, #16]
 800ea86:	69bb      	ldr	r3, [r7, #24]
 800ea88:	1ad1      	subs	r1, r2, r3
 800ea8a:	4b43      	ldr	r3, [pc, #268]	; (800eb98 <BSP_LCD_DisplayStringAt+0x188>)
 800ea8c:	681a      	ldr	r2, [r3, #0]
 800ea8e:	4843      	ldr	r0, [pc, #268]	; (800eb9c <BSP_LCD_DisplayStringAt+0x18c>)
 800ea90:	4613      	mov	r3, r2
 800ea92:	005b      	lsls	r3, r3, #1
 800ea94:	4413      	add	r3, r2
 800ea96:	009b      	lsls	r3, r3, #2
 800ea98:	4403      	add	r3, r0
 800ea9a:	3308      	adds	r3, #8
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	889b      	ldrh	r3, [r3, #4]
 800eaa0:	fb01 f303 	mul.w	r3, r1, r3
 800eaa4:	085b      	lsrs	r3, r3, #1
 800eaa6:	b29a      	uxth	r2, r3
 800eaa8:	89fb      	ldrh	r3, [r7, #14]
 800eaaa:	4413      	add	r3, r2
 800eaac:	83fb      	strh	r3, [r7, #30]
      break;
 800eaae:	e01b      	b.n	800eae8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 800eab0:	89fb      	ldrh	r3, [r7, #14]
 800eab2:	83fb      	strh	r3, [r7, #30]
      break;
 800eab4:	e018      	b.n	800eae8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800eab6:	693a      	ldr	r2, [r7, #16]
 800eab8:	69bb      	ldr	r3, [r7, #24]
 800eaba:	1ad3      	subs	r3, r2, r3
 800eabc:	b299      	uxth	r1, r3
 800eabe:	4b36      	ldr	r3, [pc, #216]	; (800eb98 <BSP_LCD_DisplayStringAt+0x188>)
 800eac0:	681a      	ldr	r2, [r3, #0]
 800eac2:	4836      	ldr	r0, [pc, #216]	; (800eb9c <BSP_LCD_DisplayStringAt+0x18c>)
 800eac4:	4613      	mov	r3, r2
 800eac6:	005b      	lsls	r3, r3, #1
 800eac8:	4413      	add	r3, r2
 800eaca:	009b      	lsls	r3, r3, #2
 800eacc:	4403      	add	r3, r0
 800eace:	3308      	adds	r3, #8
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	889b      	ldrh	r3, [r3, #4]
 800ead4:	fb11 f303 	smulbb	r3, r1, r3
 800ead8:	b29a      	uxth	r2, r3
 800eada:	89fb      	ldrh	r3, [r7, #14]
 800eadc:	1ad3      	subs	r3, r2, r3
 800eade:	83fb      	strh	r3, [r7, #30]
      break;
 800eae0:	e002      	b.n	800eae8 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 800eae2:	89fb      	ldrh	r3, [r7, #14]
 800eae4:	83fb      	strh	r3, [r7, #30]
      break;
 800eae6:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800eae8:	8bfb      	ldrh	r3, [r7, #30]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d003      	beq.n	800eaf6 <BSP_LCD_DisplayStringAt+0xe6>
 800eaee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	da1d      	bge.n	800eb32 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800eafa:	e01a      	b.n	800eb32 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	781a      	ldrb	r2, [r3, #0]
 800eb00:	89b9      	ldrh	r1, [r7, #12]
 800eb02:	8bfb      	ldrh	r3, [r7, #30]
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7ff ff3f 	bl	800e988 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800eb0a:	4b23      	ldr	r3, [pc, #140]	; (800eb98 <BSP_LCD_DisplayStringAt+0x188>)
 800eb0c:	681a      	ldr	r2, [r3, #0]
 800eb0e:	4923      	ldr	r1, [pc, #140]	; (800eb9c <BSP_LCD_DisplayStringAt+0x18c>)
 800eb10:	4613      	mov	r3, r2
 800eb12:	005b      	lsls	r3, r3, #1
 800eb14:	4413      	add	r3, r2
 800eb16:	009b      	lsls	r3, r3, #2
 800eb18:	440b      	add	r3, r1
 800eb1a:	3308      	adds	r3, #8
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	889a      	ldrh	r2, [r3, #4]
 800eb20:	8bfb      	ldrh	r3, [r7, #30]
 800eb22:	4413      	add	r3, r2
 800eb24:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	60bb      	str	r3, [r7, #8]
    i++;
 800eb2c:	8bbb      	ldrh	r3, [r7, #28]
 800eb2e:	3301      	adds	r3, #1
 800eb30:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	bf14      	ite	ne
 800eb3a:	2301      	movne	r3, #1
 800eb3c:	2300      	moveq	r3, #0
 800eb3e:	b2dc      	uxtb	r4, r3
 800eb40:	f7ff fe00 	bl	800e744 <BSP_LCD_GetXSize>
 800eb44:	8bb9      	ldrh	r1, [r7, #28]
 800eb46:	4b14      	ldr	r3, [pc, #80]	; (800eb98 <BSP_LCD_DisplayStringAt+0x188>)
 800eb48:	681a      	ldr	r2, [r3, #0]
 800eb4a:	4d14      	ldr	r5, [pc, #80]	; (800eb9c <BSP_LCD_DisplayStringAt+0x18c>)
 800eb4c:	4613      	mov	r3, r2
 800eb4e:	005b      	lsls	r3, r3, #1
 800eb50:	4413      	add	r3, r2
 800eb52:	009b      	lsls	r3, r3, #2
 800eb54:	442b      	add	r3, r5
 800eb56:	3308      	adds	r3, #8
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	889b      	ldrh	r3, [r3, #4]
 800eb5c:	fb01 f303 	mul.w	r3, r1, r3
 800eb60:	1ac3      	subs	r3, r0, r3
 800eb62:	b299      	uxth	r1, r3
 800eb64:	4b0c      	ldr	r3, [pc, #48]	; (800eb98 <BSP_LCD_DisplayStringAt+0x188>)
 800eb66:	681a      	ldr	r2, [r3, #0]
 800eb68:	480c      	ldr	r0, [pc, #48]	; (800eb9c <BSP_LCD_DisplayStringAt+0x18c>)
 800eb6a:	4613      	mov	r3, r2
 800eb6c:	005b      	lsls	r3, r3, #1
 800eb6e:	4413      	add	r3, r2
 800eb70:	009b      	lsls	r3, r3, #2
 800eb72:	4403      	add	r3, r0
 800eb74:	3308      	adds	r3, #8
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	889b      	ldrh	r3, [r3, #4]
 800eb7a:	4299      	cmp	r1, r3
 800eb7c:	bf2c      	ite	cs
 800eb7e:	2301      	movcs	r3, #1
 800eb80:	2300      	movcc	r3, #0
 800eb82:	b2db      	uxtb	r3, r3
 800eb84:	4023      	ands	r3, r4
 800eb86:	b2db      	uxtb	r3, r3
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d1b7      	bne.n	800eafc <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 800eb8c:	bf00      	nop
 800eb8e:	bf00      	nop
 800eb90:	3720      	adds	r7, #32
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bdb0      	pop	{r4, r5, r7, pc}
 800eb96:	bf00      	nop
 800eb98:	20000c5c 	.word	0x20000c5c
 800eb9c:	20000c60 	.word	0x20000c60

0800eba0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800eba0:	b5b0      	push	{r4, r5, r7, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	4603      	mov	r3, r0
 800eba8:	603a      	str	r2, [r7, #0]
 800ebaa:	80fb      	strh	r3, [r7, #6]
 800ebac:	460b      	mov	r3, r1
 800ebae:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800ebb0:	4b1d      	ldr	r3, [pc, #116]	; (800ec28 <BSP_LCD_DrawPixel+0x88>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	4a1d      	ldr	r2, [pc, #116]	; (800ec2c <BSP_LCD_DrawPixel+0x8c>)
 800ebb6:	2134      	movs	r1, #52	; 0x34
 800ebb8:	fb01 f303 	mul.w	r3, r1, r3
 800ebbc:	4413      	add	r3, r2
 800ebbe:	3348      	adds	r3, #72	; 0x48
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	2b02      	cmp	r3, #2
 800ebc4:	d116      	bne.n	800ebf4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800ebc6:	4b18      	ldr	r3, [pc, #96]	; (800ec28 <BSP_LCD_DrawPixel+0x88>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	4a18      	ldr	r2, [pc, #96]	; (800ec2c <BSP_LCD_DrawPixel+0x8c>)
 800ebcc:	2134      	movs	r1, #52	; 0x34
 800ebce:	fb01 f303 	mul.w	r3, r1, r3
 800ebd2:	4413      	add	r3, r2
 800ebd4:	335c      	adds	r3, #92	; 0x5c
 800ebd6:	681c      	ldr	r4, [r3, #0]
 800ebd8:	88bd      	ldrh	r5, [r7, #4]
 800ebda:	f7ff fdb3 	bl	800e744 <BSP_LCD_GetXSize>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	fb03 f205 	mul.w	r2, r3, r5
 800ebe4:	88fb      	ldrh	r3, [r7, #6]
 800ebe6:	4413      	add	r3, r2
 800ebe8:	005b      	lsls	r3, r3, #1
 800ebea:	4423      	add	r3, r4
 800ebec:	683a      	ldr	r2, [r7, #0]
 800ebee:	b292      	uxth	r2, r2
 800ebf0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800ebf2:	e015      	b.n	800ec20 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800ebf4:	4b0c      	ldr	r3, [pc, #48]	; (800ec28 <BSP_LCD_DrawPixel+0x88>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	4a0c      	ldr	r2, [pc, #48]	; (800ec2c <BSP_LCD_DrawPixel+0x8c>)
 800ebfa:	2134      	movs	r1, #52	; 0x34
 800ebfc:	fb01 f303 	mul.w	r3, r1, r3
 800ec00:	4413      	add	r3, r2
 800ec02:	335c      	adds	r3, #92	; 0x5c
 800ec04:	681c      	ldr	r4, [r3, #0]
 800ec06:	88bd      	ldrh	r5, [r7, #4]
 800ec08:	f7ff fd9c 	bl	800e744 <BSP_LCD_GetXSize>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	fb03 f205 	mul.w	r2, r3, r5
 800ec12:	88fb      	ldrh	r3, [r7, #6]
 800ec14:	4413      	add	r3, r2
 800ec16:	009b      	lsls	r3, r3, #2
 800ec18:	4423      	add	r3, r4
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	6013      	str	r3, [r2, #0]
}
 800ec20:	bf00      	nop
 800ec22:	3708      	adds	r7, #8
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bdb0      	pop	{r4, r5, r7, pc}
 800ec28:	20000c5c 	.word	0x20000c5c
 800ec2c:	20000b74 	.word	0x20000b74

0800ec30 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800ec34:	4b0a      	ldr	r3, [pc, #40]	; (800ec60 <BSP_LCD_DisplayOn+0x30>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	699a      	ldr	r2, [r3, #24]
 800ec3a:	4b09      	ldr	r3, [pc, #36]	; (800ec60 <BSP_LCD_DisplayOn+0x30>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	f042 0201 	orr.w	r2, r2, #1
 800ec42:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800ec44:	2201      	movs	r2, #1
 800ec46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ec4a:	4806      	ldr	r0, [pc, #24]	; (800ec64 <BSP_LCD_DisplayOn+0x34>)
 800ec4c:	f7f6 fa32 	bl	80050b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800ec50:	2201      	movs	r2, #1
 800ec52:	2108      	movs	r1, #8
 800ec54:	4804      	ldr	r0, [pc, #16]	; (800ec68 <BSP_LCD_DisplayOn+0x38>)
 800ec56:	f7f6 fa2d 	bl	80050b4 <HAL_GPIO_WritePin>
}
 800ec5a:	bf00      	nop
 800ec5c:	bd80      	pop	{r7, pc}
 800ec5e:	bf00      	nop
 800ec60:	20000b74 	.word	0x20000b74
 800ec64:	40022000 	.word	0x40022000
 800ec68:	40022800 	.word	0x40022800

0800ec6c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b090      	sub	sp, #64	; 0x40
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800ec76:	4b64      	ldr	r3, [pc, #400]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ec78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec7a:	4a63      	ldr	r2, [pc, #396]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ec7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ec80:	6453      	str	r3, [r2, #68]	; 0x44
 800ec82:	4b61      	ldr	r3, [pc, #388]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ec84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ec8a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800ec8e:	4b5e      	ldr	r3, [pc, #376]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ec90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec92:	4a5d      	ldr	r2, [pc, #372]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ec94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ec98:	6313      	str	r3, [r2, #48]	; 0x30
 800ec9a:	4b5b      	ldr	r3, [pc, #364]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ec9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eca2:	627b      	str	r3, [r7, #36]	; 0x24
 800eca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800eca6:	4b58      	ldr	r3, [pc, #352]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800eca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecaa:	4a57      	ldr	r2, [pc, #348]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ecac:	f043 0310 	orr.w	r3, r3, #16
 800ecb0:	6313      	str	r3, [r2, #48]	; 0x30
 800ecb2:	4b55      	ldr	r3, [pc, #340]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ecb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecb6:	f003 0310 	and.w	r3, r3, #16
 800ecba:	623b      	str	r3, [r7, #32]
 800ecbc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800ecbe:	4b52      	ldr	r3, [pc, #328]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ecc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecc2:	4a51      	ldr	r2, [pc, #324]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ecc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecc8:	6313      	str	r3, [r2, #48]	; 0x30
 800ecca:	4b4f      	ldr	r3, [pc, #316]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800eccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecd2:	61fb      	str	r3, [r7, #28]
 800ecd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800ecd6:	4b4c      	ldr	r3, [pc, #304]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ecd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecda:	4a4b      	ldr	r2, [pc, #300]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ecdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ece0:	6313      	str	r3, [r2, #48]	; 0x30
 800ece2:	4b49      	ldr	r3, [pc, #292]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ece4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ece6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ecea:	61bb      	str	r3, [r7, #24]
 800ecec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800ecee:	4b46      	ldr	r3, [pc, #280]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ecf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecf2:	4a45      	ldr	r2, [pc, #276]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ecf4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ecf8:	6313      	str	r3, [r2, #48]	; 0x30
 800ecfa:	4b43      	ldr	r3, [pc, #268]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ecfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ed02:	617b      	str	r3, [r7, #20]
 800ed04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800ed06:	4b40      	ldr	r3, [pc, #256]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ed08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed0a:	4a3f      	ldr	r2, [pc, #252]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ed0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ed10:	6313      	str	r3, [r2, #48]	; 0x30
 800ed12:	4b3d      	ldr	r3, [pc, #244]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ed14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed1a:	613b      	str	r3, [r7, #16]
 800ed1c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800ed1e:	4b3a      	ldr	r3, [pc, #232]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ed20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed22:	4a39      	ldr	r2, [pc, #228]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ed24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ed28:	6313      	str	r3, [r2, #48]	; 0x30
 800ed2a:	4b37      	ldr	r3, [pc, #220]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ed2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed32:	60fb      	str	r3, [r7, #12]
 800ed34:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800ed36:	4b34      	ldr	r3, [pc, #208]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ed38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed3a:	4a33      	ldr	r2, [pc, #204]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ed3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ed40:	6313      	str	r3, [r2, #48]	; 0x30
 800ed42:	4b31      	ldr	r3, [pc, #196]	; (800ee08 <BSP_LCD_MspInit+0x19c>)
 800ed44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed4a:	60bb      	str	r3, [r7, #8]
 800ed4c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800ed4e:	2310      	movs	r3, #16
 800ed50:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800ed52:	2302      	movs	r3, #2
 800ed54:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800ed56:	2300      	movs	r3, #0
 800ed58:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800ed5a:	2302      	movs	r3, #2
 800ed5c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800ed5e:	230e      	movs	r3, #14
 800ed60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800ed62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ed66:	4619      	mov	r1, r3
 800ed68:	4828      	ldr	r0, [pc, #160]	; (800ee0c <BSP_LCD_MspInit+0x1a0>)
 800ed6a:	f7f5 ffdf 	bl	8004d2c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800ed6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed72:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800ed74:	2302      	movs	r3, #2
 800ed76:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800ed78:	2309      	movs	r3, #9
 800ed7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800ed7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ed80:	4619      	mov	r1, r3
 800ed82:	4823      	ldr	r0, [pc, #140]	; (800ee10 <BSP_LCD_MspInit+0x1a4>)
 800ed84:	f7f5 ffd2 	bl	8004d2c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800ed88:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 800ed8c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800ed8e:	2302      	movs	r3, #2
 800ed90:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800ed92:	230e      	movs	r3, #14
 800ed94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800ed96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	481d      	ldr	r0, [pc, #116]	; (800ee14 <BSP_LCD_MspInit+0x1a8>)
 800ed9e:	f7f5 ffc5 	bl	8004d2c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800eda2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800eda6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800eda8:	2302      	movs	r3, #2
 800edaa:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800edac:	230e      	movs	r3, #14
 800edae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800edb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800edb4:	4619      	mov	r1, r3
 800edb6:	4818      	ldr	r0, [pc, #96]	; (800ee18 <BSP_LCD_MspInit+0x1ac>)
 800edb8:	f7f5 ffb8 	bl	8004d2c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800edbc:	23f7      	movs	r3, #247	; 0xf7
 800edbe:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800edc0:	2302      	movs	r3, #2
 800edc2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800edc4:	230e      	movs	r3, #14
 800edc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800edc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800edcc:	4619      	mov	r1, r3
 800edce:	4813      	ldr	r0, [pc, #76]	; (800ee1c <BSP_LCD_MspInit+0x1b0>)
 800edd0:	f7f5 ffac 	bl	8004d2c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800edd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800edd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800edda:	2301      	movs	r3, #1
 800eddc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800edde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ede2:	4619      	mov	r1, r3
 800ede4:	480b      	ldr	r0, [pc, #44]	; (800ee14 <BSP_LCD_MspInit+0x1a8>)
 800ede6:	f7f5 ffa1 	bl	8004d2c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800edea:	2308      	movs	r3, #8
 800edec:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800edee:	2301      	movs	r3, #1
 800edf0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800edf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800edf6:	4619      	mov	r1, r3
 800edf8:	4808      	ldr	r0, [pc, #32]	; (800ee1c <BSP_LCD_MspInit+0x1b0>)
 800edfa:	f7f5 ff97 	bl	8004d2c <HAL_GPIO_Init>
}
 800edfe:	bf00      	nop
 800ee00:	3740      	adds	r7, #64	; 0x40
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	40023800 	.word	0x40023800
 800ee0c:	40021000 	.word	0x40021000
 800ee10:	40021800 	.word	0x40021800
 800ee14:	40022000 	.word	0x40022000
 800ee18:	40022400 	.word	0x40022400
 800ee1c:	40022800 	.word	0x40022800

0800ee20 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800ee2a:	4b0a      	ldr	r3, [pc, #40]	; (800ee54 <BSP_LCD_ClockConfig+0x34>)
 800ee2c:	2208      	movs	r2, #8
 800ee2e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800ee30:	4b08      	ldr	r3, [pc, #32]	; (800ee54 <BSP_LCD_ClockConfig+0x34>)
 800ee32:	22c0      	movs	r2, #192	; 0xc0
 800ee34:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800ee36:	4b07      	ldr	r3, [pc, #28]	; (800ee54 <BSP_LCD_ClockConfig+0x34>)
 800ee38:	2205      	movs	r2, #5
 800ee3a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800ee3c:	4b05      	ldr	r3, [pc, #20]	; (800ee54 <BSP_LCD_ClockConfig+0x34>)
 800ee3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ee42:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800ee44:	4803      	ldr	r0, [pc, #12]	; (800ee54 <BSP_LCD_ClockConfig+0x34>)
 800ee46:	f7f9 f949 	bl	80080dc <HAL_RCCEx_PeriphCLKConfig>
}
 800ee4a:	bf00      	nop
 800ee4c:	3708      	adds	r7, #8
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	20000c78 	.word	0x20000c78

0800ee58 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b088      	sub	sp, #32
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	4603      	mov	r3, r0
 800ee60:	603a      	str	r2, [r7, #0]
 800ee62:	80fb      	strh	r3, [r7, #6]
 800ee64:	460b      	mov	r3, r1
 800ee66:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	61fb      	str	r3, [r7, #28]
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 800ee70:	4b53      	ldr	r3, [pc, #332]	; (800efc0 <DrawChar+0x168>)
 800ee72:	681a      	ldr	r2, [r3, #0]
 800ee74:	4953      	ldr	r1, [pc, #332]	; (800efc4 <DrawChar+0x16c>)
 800ee76:	4613      	mov	r3, r2
 800ee78:	005b      	lsls	r3, r3, #1
 800ee7a:	4413      	add	r3, r2
 800ee7c:	009b      	lsls	r3, r3, #2
 800ee7e:	440b      	add	r3, r1
 800ee80:	3308      	adds	r3, #8
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	88db      	ldrh	r3, [r3, #6]
 800ee86:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800ee88:	4b4d      	ldr	r3, [pc, #308]	; (800efc0 <DrawChar+0x168>)
 800ee8a:	681a      	ldr	r2, [r3, #0]
 800ee8c:	494d      	ldr	r1, [pc, #308]	; (800efc4 <DrawChar+0x16c>)
 800ee8e:	4613      	mov	r3, r2
 800ee90:	005b      	lsls	r3, r3, #1
 800ee92:	4413      	add	r3, r2
 800ee94:	009b      	lsls	r3, r3, #2
 800ee96:	440b      	add	r3, r1
 800ee98:	3308      	adds	r3, #8
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	889b      	ldrh	r3, [r3, #4]
 800ee9e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 800eea0:	8a3b      	ldrh	r3, [r7, #16]
 800eea2:	3307      	adds	r3, #7
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	da00      	bge.n	800eeaa <DrawChar+0x52>
 800eea8:	3307      	adds	r3, #7
 800eeaa:	10db      	asrs	r3, r3, #3
 800eeac:	b2db      	uxtb	r3, r3
 800eeae:	00db      	lsls	r3, r3, #3
 800eeb0:	b2da      	uxtb	r2, r3
 800eeb2:	8a3b      	ldrh	r3, [r7, #16]
 800eeb4:	b2db      	uxtb	r3, r3
 800eeb6:	1ad3      	subs	r3, r2, r3
 800eeb8:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800eeba:	2300      	movs	r3, #0
 800eebc:	61fb      	str	r3, [r7, #28]
 800eebe:	e076      	b.n	800efae <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800eec0:	8a3b      	ldrh	r3, [r7, #16]
 800eec2:	3307      	adds	r3, #7
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	da00      	bge.n	800eeca <DrawChar+0x72>
 800eec8:	3307      	adds	r3, #7
 800eeca:	10db      	asrs	r3, r3, #3
 800eecc:	461a      	mov	r2, r3
 800eece:	69fb      	ldr	r3, [r7, #28]
 800eed0:	fb02 f303 	mul.w	r3, r2, r3
 800eed4:	683a      	ldr	r2, [r7, #0]
 800eed6:	4413      	add	r3, r2
 800eed8:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800eeda:	8a3b      	ldrh	r3, [r7, #16]
 800eedc:	3307      	adds	r3, #7
 800eede:	2b00      	cmp	r3, #0
 800eee0:	da00      	bge.n	800eee4 <DrawChar+0x8c>
 800eee2:	3307      	adds	r3, #7
 800eee4:	10db      	asrs	r3, r3, #3
 800eee6:	2b01      	cmp	r3, #1
 800eee8:	d002      	beq.n	800eef0 <DrawChar+0x98>
 800eeea:	2b02      	cmp	r3, #2
 800eeec:	d004      	beq.n	800eef8 <DrawChar+0xa0>
 800eeee:	e00c      	b.n	800ef0a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	781b      	ldrb	r3, [r3, #0]
 800eef4:	617b      	str	r3, [r7, #20]
      break;
 800eef6:	e016      	b.n	800ef26 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	021b      	lsls	r3, r3, #8
 800eefe:	68ba      	ldr	r2, [r7, #8]
 800ef00:	3201      	adds	r2, #1
 800ef02:	7812      	ldrb	r2, [r2, #0]
 800ef04:	4313      	orrs	r3, r2
 800ef06:	617b      	str	r3, [r7, #20]
      break;
 800ef08:	e00d      	b.n	800ef26 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	041a      	lsls	r2, r3, #16
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	3301      	adds	r3, #1
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	021b      	lsls	r3, r3, #8
 800ef18:	4313      	orrs	r3, r2
 800ef1a:	68ba      	ldr	r2, [r7, #8]
 800ef1c:	3202      	adds	r2, #2
 800ef1e:	7812      	ldrb	r2, [r2, #0]
 800ef20:	4313      	orrs	r3, r2
 800ef22:	617b      	str	r3, [r7, #20]
      break;
 800ef24:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800ef26:	2300      	movs	r3, #0
 800ef28:	61bb      	str	r3, [r7, #24]
 800ef2a:	e036      	b.n	800ef9a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800ef2c:	8a3a      	ldrh	r2, [r7, #16]
 800ef2e:	69bb      	ldr	r3, [r7, #24]
 800ef30:	1ad2      	subs	r2, r2, r3
 800ef32:	7bfb      	ldrb	r3, [r7, #15]
 800ef34:	4413      	add	r3, r2
 800ef36:	3b01      	subs	r3, #1
 800ef38:	2201      	movs	r2, #1
 800ef3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ef3e:	461a      	mov	r2, r3
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	4013      	ands	r3, r2
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d012      	beq.n	800ef6e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	b29a      	uxth	r2, r3
 800ef4c:	88fb      	ldrh	r3, [r7, #6]
 800ef4e:	4413      	add	r3, r2
 800ef50:	b298      	uxth	r0, r3
 800ef52:	4b1b      	ldr	r3, [pc, #108]	; (800efc0 <DrawChar+0x168>)
 800ef54:	681a      	ldr	r2, [r3, #0]
 800ef56:	491b      	ldr	r1, [pc, #108]	; (800efc4 <DrawChar+0x16c>)
 800ef58:	4613      	mov	r3, r2
 800ef5a:	005b      	lsls	r3, r3, #1
 800ef5c:	4413      	add	r3, r2
 800ef5e:	009b      	lsls	r3, r3, #2
 800ef60:	440b      	add	r3, r1
 800ef62:	681a      	ldr	r2, [r3, #0]
 800ef64:	88bb      	ldrh	r3, [r7, #4]
 800ef66:	4619      	mov	r1, r3
 800ef68:	f7ff fe1a 	bl	800eba0 <BSP_LCD_DrawPixel>
 800ef6c:	e012      	b.n	800ef94 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800ef6e:	69bb      	ldr	r3, [r7, #24]
 800ef70:	b29a      	uxth	r2, r3
 800ef72:	88fb      	ldrh	r3, [r7, #6]
 800ef74:	4413      	add	r3, r2
 800ef76:	b298      	uxth	r0, r3
 800ef78:	4b11      	ldr	r3, [pc, #68]	; (800efc0 <DrawChar+0x168>)
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	4911      	ldr	r1, [pc, #68]	; (800efc4 <DrawChar+0x16c>)
 800ef7e:	4613      	mov	r3, r2
 800ef80:	005b      	lsls	r3, r3, #1
 800ef82:	4413      	add	r3, r2
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	440b      	add	r3, r1
 800ef88:	3304      	adds	r3, #4
 800ef8a:	681a      	ldr	r2, [r3, #0]
 800ef8c:	88bb      	ldrh	r3, [r7, #4]
 800ef8e:	4619      	mov	r1, r3
 800ef90:	f7ff fe06 	bl	800eba0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800ef94:	69bb      	ldr	r3, [r7, #24]
 800ef96:	3301      	adds	r3, #1
 800ef98:	61bb      	str	r3, [r7, #24]
 800ef9a:	8a3b      	ldrh	r3, [r7, #16]
 800ef9c:	69ba      	ldr	r2, [r7, #24]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d3c4      	bcc.n	800ef2c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800efa2:	88bb      	ldrh	r3, [r7, #4]
 800efa4:	3301      	adds	r3, #1
 800efa6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800efa8:	69fb      	ldr	r3, [r7, #28]
 800efaa:	3301      	adds	r3, #1
 800efac:	61fb      	str	r3, [r7, #28]
 800efae:	8a7b      	ldrh	r3, [r7, #18]
 800efb0:	69fa      	ldr	r2, [r7, #28]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d384      	bcc.n	800eec0 <DrawChar+0x68>
  }
}
 800efb6:	bf00      	nop
 800efb8:	bf00      	nop
 800efba:	3720      	adds	r7, #32
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	20000c5c 	.word	0x20000c5c
 800efc4:	20000c60 	.word	0x20000c60

0800efc8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b086      	sub	sp, #24
 800efcc:	af02      	add	r7, sp, #8
 800efce:	60f8      	str	r0, [r7, #12]
 800efd0:	60b9      	str	r1, [r7, #8]
 800efd2:	607a      	str	r2, [r7, #4]
 800efd4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800efd6:	4b1e      	ldr	r3, [pc, #120]	; (800f050 <LL_FillBuffer+0x88>)
 800efd8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800efdc:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800efde:	4b1d      	ldr	r3, [pc, #116]	; (800f054 <LL_FillBuffer+0x8c>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	4a1d      	ldr	r2, [pc, #116]	; (800f058 <LL_FillBuffer+0x90>)
 800efe4:	2134      	movs	r1, #52	; 0x34
 800efe6:	fb01 f303 	mul.w	r3, r1, r3
 800efea:	4413      	add	r3, r2
 800efec:	3348      	adds	r3, #72	; 0x48
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2b02      	cmp	r3, #2
 800eff2:	d103      	bne.n	800effc <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 800eff4:	4b16      	ldr	r3, [pc, #88]	; (800f050 <LL_FillBuffer+0x88>)
 800eff6:	2202      	movs	r2, #2
 800eff8:	609a      	str	r2, [r3, #8]
 800effa:	e002      	b.n	800f002 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800effc:	4b14      	ldr	r3, [pc, #80]	; (800f050 <LL_FillBuffer+0x88>)
 800effe:	2200      	movs	r2, #0
 800f000:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800f002:	4a13      	ldr	r2, [pc, #76]	; (800f050 <LL_FillBuffer+0x88>)
 800f004:	69bb      	ldr	r3, [r7, #24]
 800f006:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800f008:	4b11      	ldr	r3, [pc, #68]	; (800f050 <LL_FillBuffer+0x88>)
 800f00a:	4a14      	ldr	r2, [pc, #80]	; (800f05c <LL_FillBuffer+0x94>)
 800f00c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800f00e:	4810      	ldr	r0, [pc, #64]	; (800f050 <LL_FillBuffer+0x88>)
 800f010:	f7f4 fe8a 	bl	8003d28 <HAL_DMA2D_Init>
 800f014:	4603      	mov	r3, r0
 800f016:	2b00      	cmp	r3, #0
 800f018:	d115      	bne.n	800f046 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800f01a:	68f9      	ldr	r1, [r7, #12]
 800f01c:	480c      	ldr	r0, [pc, #48]	; (800f050 <LL_FillBuffer+0x88>)
 800f01e:	f7f5 f8f1 	bl	8004204 <HAL_DMA2D_ConfigLayer>
 800f022:	4603      	mov	r3, r0
 800f024:	2b00      	cmp	r3, #0
 800f026:	d10e      	bne.n	800f046 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800f028:	68ba      	ldr	r2, [r7, #8]
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	9300      	str	r3, [sp, #0]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	69f9      	ldr	r1, [r7, #28]
 800f032:	4807      	ldr	r0, [pc, #28]	; (800f050 <LL_FillBuffer+0x88>)
 800f034:	f7f4 fec2 	bl	8003dbc <HAL_DMA2D_Start>
 800f038:	4603      	mov	r3, r0
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d103      	bne.n	800f046 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800f03e:	210a      	movs	r1, #10
 800f040:	4803      	ldr	r0, [pc, #12]	; (800f050 <LL_FillBuffer+0x88>)
 800f042:	f7f4 fee6 	bl	8003e12 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800f046:	bf00      	nop
 800f048:	3710      	adds	r7, #16
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
 800f04e:	bf00      	nop
 800f050:	20000c1c 	.word	0x20000c1c
 800f054:	20000c5c 	.word	0x20000c5c
 800f058:	20000b74 	.word	0x20000b74
 800f05c:	4002b000 	.word	0x4002b000

0800f060 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800f060:	b580      	push	{r7, lr}
 800f062:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800f064:	4b29      	ldr	r3, [pc, #164]	; (800f10c <BSP_SDRAM_Init+0xac>)
 800f066:	4a2a      	ldr	r2, [pc, #168]	; (800f110 <BSP_SDRAM_Init+0xb0>)
 800f068:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800f06a:	4b2a      	ldr	r3, [pc, #168]	; (800f114 <BSP_SDRAM_Init+0xb4>)
 800f06c:	2202      	movs	r2, #2
 800f06e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800f070:	4b28      	ldr	r3, [pc, #160]	; (800f114 <BSP_SDRAM_Init+0xb4>)
 800f072:	2207      	movs	r2, #7
 800f074:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800f076:	4b27      	ldr	r3, [pc, #156]	; (800f114 <BSP_SDRAM_Init+0xb4>)
 800f078:	2204      	movs	r2, #4
 800f07a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800f07c:	4b25      	ldr	r3, [pc, #148]	; (800f114 <BSP_SDRAM_Init+0xb4>)
 800f07e:	2207      	movs	r2, #7
 800f080:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800f082:	4b24      	ldr	r3, [pc, #144]	; (800f114 <BSP_SDRAM_Init+0xb4>)
 800f084:	2202      	movs	r2, #2
 800f086:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800f088:	4b22      	ldr	r3, [pc, #136]	; (800f114 <BSP_SDRAM_Init+0xb4>)
 800f08a:	2202      	movs	r2, #2
 800f08c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800f08e:	4b21      	ldr	r3, [pc, #132]	; (800f114 <BSP_SDRAM_Init+0xb4>)
 800f090:	2202      	movs	r2, #2
 800f092:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800f094:	4b1d      	ldr	r3, [pc, #116]	; (800f10c <BSP_SDRAM_Init+0xac>)
 800f096:	2200      	movs	r2, #0
 800f098:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800f09a:	4b1c      	ldr	r3, [pc, #112]	; (800f10c <BSP_SDRAM_Init+0xac>)
 800f09c:	2200      	movs	r2, #0
 800f09e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800f0a0:	4b1a      	ldr	r3, [pc, #104]	; (800f10c <BSP_SDRAM_Init+0xac>)
 800f0a2:	2204      	movs	r2, #4
 800f0a4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800f0a6:	4b19      	ldr	r3, [pc, #100]	; (800f10c <BSP_SDRAM_Init+0xac>)
 800f0a8:	2210      	movs	r2, #16
 800f0aa:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800f0ac:	4b17      	ldr	r3, [pc, #92]	; (800f10c <BSP_SDRAM_Init+0xac>)
 800f0ae:	2240      	movs	r2, #64	; 0x40
 800f0b0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800f0b2:	4b16      	ldr	r3, [pc, #88]	; (800f10c <BSP_SDRAM_Init+0xac>)
 800f0b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f0b8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800f0ba:	4b14      	ldr	r3, [pc, #80]	; (800f10c <BSP_SDRAM_Init+0xac>)
 800f0bc:	2200      	movs	r2, #0
 800f0be:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800f0c0:	4b12      	ldr	r3, [pc, #72]	; (800f10c <BSP_SDRAM_Init+0xac>)
 800f0c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f0c6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800f0c8:	4b10      	ldr	r3, [pc, #64]	; (800f10c <BSP_SDRAM_Init+0xac>)
 800f0ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f0ce:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800f0d0:	4b0e      	ldr	r3, [pc, #56]	; (800f10c <BSP_SDRAM_Init+0xac>)
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	480c      	ldr	r0, [pc, #48]	; (800f10c <BSP_SDRAM_Init+0xac>)
 800f0da:	f000 f87f 	bl	800f1dc <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800f0de:	490d      	ldr	r1, [pc, #52]	; (800f114 <BSP_SDRAM_Init+0xb4>)
 800f0e0:	480a      	ldr	r0, [pc, #40]	; (800f10c <BSP_SDRAM_Init+0xac>)
 800f0e2:	f7fb fb5c 	bl	800a79e <HAL_SDRAM_Init>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d003      	beq.n	800f0f4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800f0ec:	4b0a      	ldr	r3, [pc, #40]	; (800f118 <BSP_SDRAM_Init+0xb8>)
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	701a      	strb	r2, [r3, #0]
 800f0f2:	e002      	b.n	800f0fa <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800f0f4:	4b08      	ldr	r3, [pc, #32]	; (800f118 <BSP_SDRAM_Init+0xb8>)
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800f0fa:	f240 6003 	movw	r0, #1539	; 0x603
 800f0fe:	f000 f80d 	bl	800f11c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800f102:	4b05      	ldr	r3, [pc, #20]	; (800f118 <BSP_SDRAM_Init+0xb8>)
 800f104:	781b      	ldrb	r3, [r3, #0]
}
 800f106:	4618      	mov	r0, r3
 800f108:	bd80      	pop	{r7, pc}
 800f10a:	bf00      	nop
 800f10c:	20000cfc 	.word	0x20000cfc
 800f110:	a0000140 	.word	0xa0000140
 800f114:	20000d30 	.word	0x20000d30
 800f118:	20000014 	.word	0x20000014

0800f11c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b084      	sub	sp, #16
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800f124:	2300      	movs	r3, #0
 800f126:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800f128:	4b2a      	ldr	r3, [pc, #168]	; (800f1d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800f12a:	2201      	movs	r2, #1
 800f12c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800f12e:	4b29      	ldr	r3, [pc, #164]	; (800f1d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800f130:	2210      	movs	r2, #16
 800f132:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800f134:	4b27      	ldr	r3, [pc, #156]	; (800f1d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800f136:	2201      	movs	r2, #1
 800f138:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800f13a:	4b26      	ldr	r3, [pc, #152]	; (800f1d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800f13c:	2200      	movs	r2, #0
 800f13e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800f140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f144:	4923      	ldr	r1, [pc, #140]	; (800f1d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800f146:	4824      	ldr	r0, [pc, #144]	; (800f1d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800f148:	f7fb fb5d 	bl	800a806 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800f14c:	2001      	movs	r0, #1
 800f14e:	f7f3 fea1 	bl	8002e94 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800f152:	4b20      	ldr	r3, [pc, #128]	; (800f1d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800f154:	2202      	movs	r2, #2
 800f156:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800f158:	4b1e      	ldr	r3, [pc, #120]	; (800f1d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800f15a:	2210      	movs	r2, #16
 800f15c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800f15e:	4b1d      	ldr	r3, [pc, #116]	; (800f1d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800f160:	2201      	movs	r2, #1
 800f162:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800f164:	4b1b      	ldr	r3, [pc, #108]	; (800f1d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800f166:	2200      	movs	r2, #0
 800f168:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800f16a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f16e:	4919      	ldr	r1, [pc, #100]	; (800f1d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800f170:	4819      	ldr	r0, [pc, #100]	; (800f1d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800f172:	f7fb fb48 	bl	800a806 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800f176:	4b17      	ldr	r3, [pc, #92]	; (800f1d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800f178:	2203      	movs	r2, #3
 800f17a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800f17c:	4b15      	ldr	r3, [pc, #84]	; (800f1d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800f17e:	2210      	movs	r2, #16
 800f180:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800f182:	4b14      	ldr	r3, [pc, #80]	; (800f1d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800f184:	2208      	movs	r2, #8
 800f186:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800f188:	4b12      	ldr	r3, [pc, #72]	; (800f1d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800f18a:	2200      	movs	r2, #0
 800f18c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800f18e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f192:	4910      	ldr	r1, [pc, #64]	; (800f1d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800f194:	4810      	ldr	r0, [pc, #64]	; (800f1d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800f196:	f7fb fb36 	bl	800a806 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800f19a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800f19e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800f1a0:	4b0c      	ldr	r3, [pc, #48]	; (800f1d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800f1a2:	2204      	movs	r2, #4
 800f1a4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800f1a6:	4b0b      	ldr	r3, [pc, #44]	; (800f1d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800f1a8:	2210      	movs	r2, #16
 800f1aa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800f1ac:	4b09      	ldr	r3, [pc, #36]	; (800f1d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	4a07      	ldr	r2, [pc, #28]	; (800f1d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800f1b6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800f1b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1bc:	4905      	ldr	r1, [pc, #20]	; (800f1d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800f1be:	4806      	ldr	r0, [pc, #24]	; (800f1d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800f1c0:	f7fb fb21 	bl	800a806 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800f1c4:	6879      	ldr	r1, [r7, #4]
 800f1c6:	4804      	ldr	r0, [pc, #16]	; (800f1d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800f1c8:	f7fb fb48 	bl	800a85c <HAL_SDRAM_ProgramRefreshRate>
}
 800f1cc:	bf00      	nop
 800f1ce:	3710      	adds	r7, #16
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}
 800f1d4:	20000d4c 	.word	0x20000d4c
 800f1d8:	20000cfc 	.word	0x20000cfc

0800f1dc <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b090      	sub	sp, #64	; 0x40
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
 800f1e4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800f1e6:	4b70      	ldr	r3, [pc, #448]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1ea:	4a6f      	ldr	r2, [pc, #444]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f1ec:	f043 0301 	orr.w	r3, r3, #1
 800f1f0:	6393      	str	r3, [r2, #56]	; 0x38
 800f1f2:	4b6d      	ldr	r3, [pc, #436]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1f6:	f003 0301 	and.w	r3, r3, #1
 800f1fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800f1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800f1fe:	4b6a      	ldr	r3, [pc, #424]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f202:	4a69      	ldr	r2, [pc, #420]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f204:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f208:	6313      	str	r3, [r2, #48]	; 0x30
 800f20a:	4b67      	ldr	r3, [pc, #412]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f20e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f212:	627b      	str	r3, [r7, #36]	; 0x24
 800f214:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f216:	4b64      	ldr	r3, [pc, #400]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f21a:	4a63      	ldr	r2, [pc, #396]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f21c:	f043 0304 	orr.w	r3, r3, #4
 800f220:	6313      	str	r3, [r2, #48]	; 0x30
 800f222:	4b61      	ldr	r3, [pc, #388]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f226:	f003 0304 	and.w	r3, r3, #4
 800f22a:	623b      	str	r3, [r7, #32]
 800f22c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800f22e:	4b5e      	ldr	r3, [pc, #376]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f232:	4a5d      	ldr	r2, [pc, #372]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f234:	f043 0308 	orr.w	r3, r3, #8
 800f238:	6313      	str	r3, [r2, #48]	; 0x30
 800f23a:	4b5b      	ldr	r3, [pc, #364]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f23e:	f003 0308 	and.w	r3, r3, #8
 800f242:	61fb      	str	r3, [r7, #28]
 800f244:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800f246:	4b58      	ldr	r3, [pc, #352]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f24a:	4a57      	ldr	r2, [pc, #348]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f24c:	f043 0310 	orr.w	r3, r3, #16
 800f250:	6313      	str	r3, [r2, #48]	; 0x30
 800f252:	4b55      	ldr	r3, [pc, #340]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f256:	f003 0310 	and.w	r3, r3, #16
 800f25a:	61bb      	str	r3, [r7, #24]
 800f25c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800f25e:	4b52      	ldr	r3, [pc, #328]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f262:	4a51      	ldr	r2, [pc, #324]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f264:	f043 0320 	orr.w	r3, r3, #32
 800f268:	6313      	str	r3, [r2, #48]	; 0x30
 800f26a:	4b4f      	ldr	r3, [pc, #316]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f26e:	f003 0320 	and.w	r3, r3, #32
 800f272:	617b      	str	r3, [r7, #20]
 800f274:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800f276:	4b4c      	ldr	r3, [pc, #304]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f27a:	4a4b      	ldr	r2, [pc, #300]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f27c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f280:	6313      	str	r3, [r2, #48]	; 0x30
 800f282:	4b49      	ldr	r3, [pc, #292]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f28a:	613b      	str	r3, [r7, #16]
 800f28c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f28e:	4b46      	ldr	r3, [pc, #280]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f292:	4a45      	ldr	r2, [pc, #276]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f298:	6313      	str	r3, [r2, #48]	; 0x30
 800f29a:	4b43      	ldr	r3, [pc, #268]	; (800f3a8 <BSP_SDRAM_MspInit+0x1cc>)
 800f29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f29e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2a2:	60fb      	str	r3, [r7, #12]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800f2a6:	2302      	movs	r3, #2
 800f2a8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800f2ae:	2302      	movs	r3, #2
 800f2b0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800f2b2:	230c      	movs	r3, #12
 800f2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800f2b6:	2308      	movs	r3, #8
 800f2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800f2ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f2be:	4619      	mov	r1, r3
 800f2c0:	483a      	ldr	r0, [pc, #232]	; (800f3ac <BSP_SDRAM_MspInit+0x1d0>)
 800f2c2:	f7f5 fd33 	bl	8004d2c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800f2c6:	f24c 7303 	movw	r3, #50947	; 0xc703
 800f2ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800f2cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f2d0:	4619      	mov	r1, r3
 800f2d2:	4837      	ldr	r0, [pc, #220]	; (800f3b0 <BSP_SDRAM_MspInit+0x1d4>)
 800f2d4:	f7f5 fd2a 	bl	8004d2c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800f2d8:	f64f 7383 	movw	r3, #65411	; 0xff83
 800f2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800f2de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	4833      	ldr	r0, [pc, #204]	; (800f3b4 <BSP_SDRAM_MspInit+0x1d8>)
 800f2e6:	f7f5 fd21 	bl	8004d2c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800f2ea:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800f2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800f2f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f2f4:	4619      	mov	r1, r3
 800f2f6:	4830      	ldr	r0, [pc, #192]	; (800f3b8 <BSP_SDRAM_MspInit+0x1dc>)
 800f2f8:	f7f5 fd18 	bl	8004d2c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800f2fc:	f248 1333 	movw	r3, #33075	; 0x8133
 800f300:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800f302:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f306:	4619      	mov	r1, r3
 800f308:	482c      	ldr	r0, [pc, #176]	; (800f3bc <BSP_SDRAM_MspInit+0x1e0>)
 800f30a:	f7f5 fd0f 	bl	8004d2c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800f30e:	2328      	movs	r3, #40	; 0x28
 800f310:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800f312:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f316:	4619      	mov	r1, r3
 800f318:	4829      	ldr	r0, [pc, #164]	; (800f3c0 <BSP_SDRAM_MspInit+0x1e4>)
 800f31a:	f7f5 fd07 	bl	8004d2c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800f31e:	4b29      	ldr	r3, [pc, #164]	; (800f3c4 <BSP_SDRAM_MspInit+0x1e8>)
 800f320:	2200      	movs	r2, #0
 800f322:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800f324:	4b27      	ldr	r3, [pc, #156]	; (800f3c4 <BSP_SDRAM_MspInit+0x1e8>)
 800f326:	2280      	movs	r2, #128	; 0x80
 800f328:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800f32a:	4b26      	ldr	r3, [pc, #152]	; (800f3c4 <BSP_SDRAM_MspInit+0x1e8>)
 800f32c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f330:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800f332:	4b24      	ldr	r3, [pc, #144]	; (800f3c4 <BSP_SDRAM_MspInit+0x1e8>)
 800f334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f338:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800f33a:	4b22      	ldr	r3, [pc, #136]	; (800f3c4 <BSP_SDRAM_MspInit+0x1e8>)
 800f33c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f340:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800f342:	4b20      	ldr	r3, [pc, #128]	; (800f3c4 <BSP_SDRAM_MspInit+0x1e8>)
 800f344:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f348:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800f34a:	4b1e      	ldr	r3, [pc, #120]	; (800f3c4 <BSP_SDRAM_MspInit+0x1e8>)
 800f34c:	2200      	movs	r2, #0
 800f34e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800f350:	4b1c      	ldr	r3, [pc, #112]	; (800f3c4 <BSP_SDRAM_MspInit+0x1e8>)
 800f352:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f356:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800f358:	4b1a      	ldr	r3, [pc, #104]	; (800f3c4 <BSP_SDRAM_MspInit+0x1e8>)
 800f35a:	2200      	movs	r2, #0
 800f35c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800f35e:	4b19      	ldr	r3, [pc, #100]	; (800f3c4 <BSP_SDRAM_MspInit+0x1e8>)
 800f360:	2203      	movs	r2, #3
 800f362:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800f364:	4b17      	ldr	r3, [pc, #92]	; (800f3c4 <BSP_SDRAM_MspInit+0x1e8>)
 800f366:	2200      	movs	r2, #0
 800f368:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800f36a:	4b16      	ldr	r3, [pc, #88]	; (800f3c4 <BSP_SDRAM_MspInit+0x1e8>)
 800f36c:	2200      	movs	r2, #0
 800f36e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800f370:	4b14      	ldr	r3, [pc, #80]	; (800f3c4 <BSP_SDRAM_MspInit+0x1e8>)
 800f372:	4a15      	ldr	r2, [pc, #84]	; (800f3c8 <BSP_SDRAM_MspInit+0x1ec>)
 800f374:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	4a12      	ldr	r2, [pc, #72]	; (800f3c4 <BSP_SDRAM_MspInit+0x1e8>)
 800f37a:	631a      	str	r2, [r3, #48]	; 0x30
 800f37c:	4a11      	ldr	r2, [pc, #68]	; (800f3c4 <BSP_SDRAM_MspInit+0x1e8>)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800f382:	4810      	ldr	r0, [pc, #64]	; (800f3c4 <BSP_SDRAM_MspInit+0x1e8>)
 800f384:	f7f4 fb26 	bl	80039d4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800f388:	480e      	ldr	r0, [pc, #56]	; (800f3c4 <BSP_SDRAM_MspInit+0x1e8>)
 800f38a:	f7f4 fa75 	bl	8003878 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800f38e:	2200      	movs	r2, #0
 800f390:	210f      	movs	r1, #15
 800f392:	2038      	movs	r0, #56	; 0x38
 800f394:	f7f4 f8e2 	bl	800355c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800f398:	2038      	movs	r0, #56	; 0x38
 800f39a:	f7f4 f8fb 	bl	8003594 <HAL_NVIC_EnableIRQ>
}
 800f39e:	bf00      	nop
 800f3a0:	3740      	adds	r7, #64	; 0x40
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}
 800f3a6:	bf00      	nop
 800f3a8:	40023800 	.word	0x40023800
 800f3ac:	40020800 	.word	0x40020800
 800f3b0:	40020c00 	.word	0x40020c00
 800f3b4:	40021000 	.word	0x40021000
 800f3b8:	40021400 	.word	0x40021400
 800f3bc:	40021800 	.word	0x40021800
 800f3c0:	40021c00 	.word	0x40021c00
 800f3c4:	20000d5c 	.word	0x20000d5c
 800f3c8:	40026410 	.word	0x40026410

0800f3cc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800f3cc:	b590      	push	{r4, r7, lr}
 800f3ce:	b089      	sub	sp, #36	; 0x24
 800f3d0:	af04      	add	r7, sp, #16
 800f3d2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	2202      	movs	r2, #2
 800f3d8:	2102      	movs	r1, #2
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f000 fcb8 	bl	800fd50 <USBH_FindInterface>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f3e4:	7bfb      	ldrb	r3, [r7, #15]
 800f3e6:	2bff      	cmp	r3, #255	; 0xff
 800f3e8:	d002      	beq.n	800f3f0 <USBH_CDC_InterfaceInit+0x24>
 800f3ea:	7bfb      	ldrb	r3, [r7, #15]
 800f3ec:	2b01      	cmp	r3, #1
 800f3ee:	d901      	bls.n	800f3f4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f3f0:	2302      	movs	r3, #2
 800f3f2:	e13d      	b.n	800f670 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800f3f4:	7bfb      	ldrb	r3, [r7, #15]
 800f3f6:	4619      	mov	r1, r3
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f000 fc8d 	bl	800fd18 <USBH_SelectInterface>
 800f3fe:	4603      	mov	r3, r0
 800f400:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800f402:	7bbb      	ldrb	r3, [r7, #14]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d001      	beq.n	800f40c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800f408:	2302      	movs	r3, #2
 800f40a:	e131      	b.n	800f670 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800f412:	2050      	movs	r0, #80	; 0x50
 800f414:	f004 ffb8 	bl	8014388 <malloc>
 800f418:	4603      	mov	r3, r0
 800f41a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f422:	69db      	ldr	r3, [r3, #28]
 800f424:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d101      	bne.n	800f430 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800f42c:	2302      	movs	r3, #2
 800f42e:	e11f      	b.n	800f670 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800f430:	2250      	movs	r2, #80	; 0x50
 800f432:	2100      	movs	r1, #0
 800f434:	68b8      	ldr	r0, [r7, #8]
 800f436:	f004 ffc5 	bl	80143c4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800f43a:	7bfb      	ldrb	r3, [r7, #15]
 800f43c:	687a      	ldr	r2, [r7, #4]
 800f43e:	211a      	movs	r1, #26
 800f440:	fb01 f303 	mul.w	r3, r1, r3
 800f444:	4413      	add	r3, r2
 800f446:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	b25b      	sxtb	r3, r3
 800f44e:	2b00      	cmp	r3, #0
 800f450:	da15      	bge.n	800f47e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f452:	7bfb      	ldrb	r3, [r7, #15]
 800f454:	687a      	ldr	r2, [r7, #4]
 800f456:	211a      	movs	r1, #26
 800f458:	fb01 f303 	mul.w	r3, r1, r3
 800f45c:	4413      	add	r3, r2
 800f45e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800f462:	781a      	ldrb	r2, [r3, #0]
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f468:	7bfb      	ldrb	r3, [r7, #15]
 800f46a:	687a      	ldr	r2, [r7, #4]
 800f46c:	211a      	movs	r1, #26
 800f46e:	fb01 f303 	mul.w	r3, r1, r3
 800f472:	4413      	add	r3, r2
 800f474:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800f478:	881a      	ldrh	r2, [r3, #0]
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	785b      	ldrb	r3, [r3, #1]
 800f482:	4619      	mov	r1, r3
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f002 f890 	bl	80115aa <USBH_AllocPipe>
 800f48a:	4603      	mov	r3, r0
 800f48c:	461a      	mov	r2, r3
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	7819      	ldrb	r1, [r3, #0]
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	7858      	ldrb	r0, [r3, #1]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f4a6:	68ba      	ldr	r2, [r7, #8]
 800f4a8:	8952      	ldrh	r2, [r2, #10]
 800f4aa:	9202      	str	r2, [sp, #8]
 800f4ac:	2203      	movs	r2, #3
 800f4ae:	9201      	str	r2, [sp, #4]
 800f4b0:	9300      	str	r3, [sp, #0]
 800f4b2:	4623      	mov	r3, r4
 800f4b4:	4602      	mov	r2, r0
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f002 f848 	bl	801154c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	4619      	mov	r1, r3
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f004 feb1 	bl	801422c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	210a      	movs	r1, #10
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f000 fc3d 	bl	800fd50 <USBH_FindInterface>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f4da:	7bfb      	ldrb	r3, [r7, #15]
 800f4dc:	2bff      	cmp	r3, #255	; 0xff
 800f4de:	d002      	beq.n	800f4e6 <USBH_CDC_InterfaceInit+0x11a>
 800f4e0:	7bfb      	ldrb	r3, [r7, #15]
 800f4e2:	2b01      	cmp	r3, #1
 800f4e4:	d901      	bls.n	800f4ea <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f4e6:	2302      	movs	r3, #2
 800f4e8:	e0c2      	b.n	800f670 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800f4ea:	7bfb      	ldrb	r3, [r7, #15]
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	211a      	movs	r1, #26
 800f4f0:	fb01 f303 	mul.w	r3, r1, r3
 800f4f4:	4413      	add	r3, r2
 800f4f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	b25b      	sxtb	r3, r3
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	da16      	bge.n	800f530 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f502:	7bfb      	ldrb	r3, [r7, #15]
 800f504:	687a      	ldr	r2, [r7, #4]
 800f506:	211a      	movs	r1, #26
 800f508:	fb01 f303 	mul.w	r3, r1, r3
 800f50c:	4413      	add	r3, r2
 800f50e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800f512:	781a      	ldrb	r2, [r3, #0]
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f518:	7bfb      	ldrb	r3, [r7, #15]
 800f51a:	687a      	ldr	r2, [r7, #4]
 800f51c:	211a      	movs	r1, #26
 800f51e:	fb01 f303 	mul.w	r3, r1, r3
 800f522:	4413      	add	r3, r2
 800f524:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800f528:	881a      	ldrh	r2, [r3, #0]
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	835a      	strh	r2, [r3, #26]
 800f52e:	e015      	b.n	800f55c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f530:	7bfb      	ldrb	r3, [r7, #15]
 800f532:	687a      	ldr	r2, [r7, #4]
 800f534:	211a      	movs	r1, #26
 800f536:	fb01 f303 	mul.w	r3, r1, r3
 800f53a:	4413      	add	r3, r2
 800f53c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800f540:	781a      	ldrb	r2, [r3, #0]
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f546:	7bfb      	ldrb	r3, [r7, #15]
 800f548:	687a      	ldr	r2, [r7, #4]
 800f54a:	211a      	movs	r1, #26
 800f54c:	fb01 f303 	mul.w	r3, r1, r3
 800f550:	4413      	add	r3, r2
 800f552:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800f556:	881a      	ldrh	r2, [r3, #0]
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800f55c:	7bfb      	ldrb	r3, [r7, #15]
 800f55e:	687a      	ldr	r2, [r7, #4]
 800f560:	211a      	movs	r1, #26
 800f562:	fb01 f303 	mul.w	r3, r1, r3
 800f566:	4413      	add	r3, r2
 800f568:	f203 3356 	addw	r3, r3, #854	; 0x356
 800f56c:	781b      	ldrb	r3, [r3, #0]
 800f56e:	b25b      	sxtb	r3, r3
 800f570:	2b00      	cmp	r3, #0
 800f572:	da16      	bge.n	800f5a2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f574:	7bfb      	ldrb	r3, [r7, #15]
 800f576:	687a      	ldr	r2, [r7, #4]
 800f578:	211a      	movs	r1, #26
 800f57a:	fb01 f303 	mul.w	r3, r1, r3
 800f57e:	4413      	add	r3, r2
 800f580:	f203 3356 	addw	r3, r3, #854	; 0x356
 800f584:	781a      	ldrb	r2, [r3, #0]
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f58a:	7bfb      	ldrb	r3, [r7, #15]
 800f58c:	687a      	ldr	r2, [r7, #4]
 800f58e:	211a      	movs	r1, #26
 800f590:	fb01 f303 	mul.w	r3, r1, r3
 800f594:	4413      	add	r3, r2
 800f596:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800f59a:	881a      	ldrh	r2, [r3, #0]
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	835a      	strh	r2, [r3, #26]
 800f5a0:	e015      	b.n	800f5ce <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f5a2:	7bfb      	ldrb	r3, [r7, #15]
 800f5a4:	687a      	ldr	r2, [r7, #4]
 800f5a6:	211a      	movs	r1, #26
 800f5a8:	fb01 f303 	mul.w	r3, r1, r3
 800f5ac:	4413      	add	r3, r2
 800f5ae:	f203 3356 	addw	r3, r3, #854	; 0x356
 800f5b2:	781a      	ldrb	r2, [r3, #0]
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f5b8:	7bfb      	ldrb	r3, [r7, #15]
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	211a      	movs	r1, #26
 800f5be:	fb01 f303 	mul.w	r3, r1, r3
 800f5c2:	4413      	add	r3, r2
 800f5c4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800f5c8:	881a      	ldrh	r2, [r3, #0]
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	7b9b      	ldrb	r3, [r3, #14]
 800f5d2:	4619      	mov	r1, r3
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f001 ffe8 	bl	80115aa <USBH_AllocPipe>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	461a      	mov	r2, r3
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	7bdb      	ldrb	r3, [r3, #15]
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f001 ffde 	bl	80115aa <USBH_AllocPipe>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	7b59      	ldrb	r1, [r3, #13]
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	7b98      	ldrb	r0, [r3, #14]
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f60a:	68ba      	ldr	r2, [r7, #8]
 800f60c:	8b12      	ldrh	r2, [r2, #24]
 800f60e:	9202      	str	r2, [sp, #8]
 800f610:	2202      	movs	r2, #2
 800f612:	9201      	str	r2, [sp, #4]
 800f614:	9300      	str	r3, [sp, #0]
 800f616:	4623      	mov	r3, r4
 800f618:	4602      	mov	r2, r0
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f001 ff96 	bl	801154c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	7b19      	ldrb	r1, [r3, #12]
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	7bd8      	ldrb	r0, [r3, #15]
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f634:	68ba      	ldr	r2, [r7, #8]
 800f636:	8b52      	ldrh	r2, [r2, #26]
 800f638:	9202      	str	r2, [sp, #8]
 800f63a:	2202      	movs	r2, #2
 800f63c:	9201      	str	r2, [sp, #4]
 800f63e:	9300      	str	r3, [sp, #0]
 800f640:	4623      	mov	r3, r4
 800f642:	4602      	mov	r2, r0
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f001 ff81 	bl	801154c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	2200      	movs	r2, #0
 800f64e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	7b5b      	ldrb	r3, [r3, #13]
 800f656:	2200      	movs	r2, #0
 800f658:	4619      	mov	r1, r3
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f004 fde6 	bl	801422c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	7b1b      	ldrb	r3, [r3, #12]
 800f664:	2200      	movs	r2, #0
 800f666:	4619      	mov	r1, r3
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f004 fddf 	bl	801422c <USBH_LL_SetToggle>

  return USBH_OK;
 800f66e:	2300      	movs	r3, #0
}
 800f670:	4618      	mov	r0, r3
 800f672:	3714      	adds	r7, #20
 800f674:	46bd      	mov	sp, r7
 800f676:	bd90      	pop	{r4, r7, pc}

0800f678 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b084      	sub	sp, #16
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f686:	69db      	ldr	r3, [r3, #28]
 800f688:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	781b      	ldrb	r3, [r3, #0]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d00e      	beq.n	800f6b0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	4619      	mov	r1, r3
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f001 ff76 	bl	801158a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	4619      	mov	r1, r3
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f001 ffa1 	bl	80115ec <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	7b1b      	ldrb	r3, [r3, #12]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d00e      	beq.n	800f6d6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	7b1b      	ldrb	r3, [r3, #12]
 800f6bc:	4619      	mov	r1, r3
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f001 ff63 	bl	801158a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	7b1b      	ldrb	r3, [r3, #12]
 800f6c8:	4619      	mov	r1, r3
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f001 ff8e 	bl	80115ec <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	7b5b      	ldrb	r3, [r3, #13]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d00e      	beq.n	800f6fc <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	7b5b      	ldrb	r3, [r3, #13]
 800f6e2:	4619      	mov	r1, r3
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f001 ff50 	bl	801158a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	7b5b      	ldrb	r3, [r3, #13]
 800f6ee:	4619      	mov	r1, r3
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f001 ff7b 	bl	80115ec <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f702:	69db      	ldr	r3, [r3, #28]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d00b      	beq.n	800f720 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f70e:	69db      	ldr	r3, [r3, #28]
 800f710:	4618      	mov	r0, r3
 800f712:	f004 fe41 	bl	8014398 <free>
    phost->pActiveClass->pData = 0U;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f71c:	2200      	movs	r2, #0
 800f71e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800f720:	2300      	movs	r3, #0
}
 800f722:	4618      	mov	r0, r3
 800f724:	3710      	adds	r7, #16
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}

0800f72a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800f72a:	b580      	push	{r7, lr}
 800f72c:	b084      	sub	sp, #16
 800f72e:	af00      	add	r7, sp, #0
 800f730:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f738:	69db      	ldr	r3, [r3, #28]
 800f73a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	3340      	adds	r3, #64	; 0x40
 800f740:	4619      	mov	r1, r3
 800f742:	6878      	ldr	r0, [r7, #4]
 800f744:	f000 f8b1 	bl	800f8aa <GetLineCoding>
 800f748:	4603      	mov	r3, r0
 800f74a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800f74c:	7afb      	ldrb	r3, [r7, #11]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d105      	bne.n	800f75e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f758:	2102      	movs	r1, #2
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800f75e:	7afb      	ldrb	r3, [r7, #11]
}
 800f760:	4618      	mov	r0, r3
 800f762:	3710      	adds	r7, #16
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b084      	sub	sp, #16
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800f770:	2301      	movs	r3, #1
 800f772:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800f774:	2300      	movs	r3, #0
 800f776:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f77e:	69db      	ldr	r3, [r3, #28]
 800f780:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f788:	2b04      	cmp	r3, #4
 800f78a:	d877      	bhi.n	800f87c <USBH_CDC_Process+0x114>
 800f78c:	a201      	add	r2, pc, #4	; (adr r2, 800f794 <USBH_CDC_Process+0x2c>)
 800f78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f792:	bf00      	nop
 800f794:	0800f7a9 	.word	0x0800f7a9
 800f798:	0800f7af 	.word	0x0800f7af
 800f79c:	0800f7df 	.word	0x0800f7df
 800f7a0:	0800f853 	.word	0x0800f853
 800f7a4:	0800f861 	.word	0x0800f861
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	73fb      	strb	r3, [r7, #15]
      break;
 800f7ac:	e06d      	b.n	800f88a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f7b2:	4619      	mov	r1, r3
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f000 f897 	bl	800f8e8 <SetLineCoding>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f7be:	7bbb      	ldrb	r3, [r7, #14]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d104      	bne.n	800f7ce <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	2202      	movs	r2, #2
 800f7c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f7cc:	e058      	b.n	800f880 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800f7ce:	7bbb      	ldrb	r3, [r7, #14]
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	d055      	beq.n	800f880 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	2204      	movs	r2, #4
 800f7d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800f7dc:	e050      	b.n	800f880 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	3340      	adds	r3, #64	; 0x40
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f000 f860 	bl	800f8aa <GetLineCoding>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f7ee:	7bbb      	ldrb	r3, [r7, #14]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d126      	bne.n	800f842 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f806:	791b      	ldrb	r3, [r3, #4]
 800f808:	429a      	cmp	r2, r3
 800f80a:	d13b      	bne.n	800f884 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f816:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f818:	429a      	cmp	r2, r3
 800f81a:	d133      	bne.n	800f884 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f826:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f828:	429a      	cmp	r2, r3
 800f82a:	d12b      	bne.n	800f884 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f834:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f836:	429a      	cmp	r2, r3
 800f838:	d124      	bne.n	800f884 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800f83a:	6878      	ldr	r0, [r7, #4]
 800f83c:	f000 f982 	bl	800fb44 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f840:	e020      	b.n	800f884 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800f842:	7bbb      	ldrb	r3, [r7, #14]
 800f844:	2b01      	cmp	r3, #1
 800f846:	d01d      	beq.n	800f884 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	2204      	movs	r2, #4
 800f84c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800f850:	e018      	b.n	800f884 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f000 f867 	bl	800f926 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f000 f8f6 	bl	800fa4a <CDC_ProcessReception>
      break;
 800f85e:	e014      	b.n	800f88a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800f860:	2100      	movs	r1, #0
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f001 f951 	bl	8010b0a <USBH_ClrFeature>
 800f868:	4603      	mov	r3, r0
 800f86a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f86c:	7bbb      	ldrb	r3, [r7, #14]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d10a      	bne.n	800f888 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	2200      	movs	r2, #0
 800f876:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800f87a:	e005      	b.n	800f888 <USBH_CDC_Process+0x120>

    default:
      break;
 800f87c:	bf00      	nop
 800f87e:	e004      	b.n	800f88a <USBH_CDC_Process+0x122>
      break;
 800f880:	bf00      	nop
 800f882:	e002      	b.n	800f88a <USBH_CDC_Process+0x122>
      break;
 800f884:	bf00      	nop
 800f886:	e000      	b.n	800f88a <USBH_CDC_Process+0x122>
      break;
 800f888:	bf00      	nop

  }

  return status;
 800f88a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	3710      	adds	r7, #16
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}

0800f894 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800f894:	b480      	push	{r7}
 800f896:	b083      	sub	sp, #12
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800f89c:	2300      	movs	r3, #0
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	370c      	adds	r7, #12
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a8:	4770      	bx	lr

0800f8aa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800f8aa:	b580      	push	{r7, lr}
 800f8ac:	b082      	sub	sp, #8
 800f8ae:	af00      	add	r7, sp, #0
 800f8b0:	6078      	str	r0, [r7, #4]
 800f8b2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	22a1      	movs	r2, #161	; 0xa1
 800f8b8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2221      	movs	r2, #33	; 0x21
 800f8be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2207      	movs	r2, #7
 800f8d0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	2207      	movs	r2, #7
 800f8d6:	4619      	mov	r1, r3
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f001 faf6 	bl	8010eca <USBH_CtlReq>
 800f8de:	4603      	mov	r3, r0
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3708      	adds	r7, #8
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2221      	movs	r2, #33	; 0x21
 800f8f6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2220      	movs	r2, #32
 800f8fc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2200      	movs	r2, #0
 800f902:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2200      	movs	r2, #0
 800f908:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2207      	movs	r2, #7
 800f90e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	2207      	movs	r2, #7
 800f914:	4619      	mov	r1, r3
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f001 fad7 	bl	8010eca <USBH_CtlReq>
 800f91c:	4603      	mov	r3, r0
}
 800f91e:	4618      	mov	r0, r3
 800f920:	3708      	adds	r7, #8
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}

0800f926 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800f926:	b580      	push	{r7, lr}
 800f928:	b086      	sub	sp, #24
 800f92a:	af02      	add	r7, sp, #8
 800f92c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f934:	69db      	ldr	r3, [r3, #28]
 800f936:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f938:	2300      	movs	r3, #0
 800f93a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f942:	2b01      	cmp	r3, #1
 800f944:	d002      	beq.n	800f94c <CDC_ProcessTransmission+0x26>
 800f946:	2b02      	cmp	r3, #2
 800f948:	d023      	beq.n	800f992 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800f94a:	e07a      	b.n	800fa42 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f950:	68fa      	ldr	r2, [r7, #12]
 800f952:	8b12      	ldrh	r2, [r2, #24]
 800f954:	4293      	cmp	r3, r2
 800f956:	d90b      	bls.n	800f970 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	69d9      	ldr	r1, [r3, #28]
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	8b1a      	ldrh	r2, [r3, #24]
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	7b5b      	ldrb	r3, [r3, #13]
 800f964:	2001      	movs	r0, #1
 800f966:	9000      	str	r0, [sp, #0]
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f001 fdac 	bl	80114c6 <USBH_BulkSendData>
 800f96e:	e00b      	b.n	800f988 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800f978:	b29a      	uxth	r2, r3
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	7b5b      	ldrb	r3, [r3, #13]
 800f97e:	2001      	movs	r0, #1
 800f980:	9000      	str	r0, [sp, #0]
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f001 fd9f 	bl	80114c6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	2202      	movs	r2, #2
 800f98c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800f990:	e057      	b.n	800fa42 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	7b5b      	ldrb	r3, [r3, #13]
 800f996:	4619      	mov	r1, r3
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f004 fc1d 	bl	80141d8 <USBH_LL_GetURBState>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800f9a2:	7afb      	ldrb	r3, [r7, #11]
 800f9a4:	2b01      	cmp	r3, #1
 800f9a6:	d136      	bne.n	800fa16 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ac:	68fa      	ldr	r2, [r7, #12]
 800f9ae:	8b12      	ldrh	r2, [r2, #24]
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	d90e      	bls.n	800f9d2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9b8:	68fa      	ldr	r2, [r7, #12]
 800f9ba:	8b12      	ldrh	r2, [r2, #24]
 800f9bc:	1a9a      	subs	r2, r3, r2
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	69db      	ldr	r3, [r3, #28]
 800f9c6:	68fa      	ldr	r2, [r7, #12]
 800f9c8:	8b12      	ldrh	r2, [r2, #24]
 800f9ca:	441a      	add	r2, r3
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	61da      	str	r2, [r3, #28]
 800f9d0:	e002      	b.n	800f9d8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d004      	beq.n	800f9ea <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800f9e8:	e006      	b.n	800f9f8 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f000 f892 	bl	800fb1c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	2204      	movs	r2, #4
 800f9fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	4619      	mov	r1, r3
 800fa10:	f001 ff5e 	bl	80118d0 <osMessagePut>
      break;
 800fa14:	e014      	b.n	800fa40 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800fa16:	7afb      	ldrb	r3, [r7, #11]
 800fa18:	2b02      	cmp	r3, #2
 800fa1a:	d111      	bne.n	800fa40 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	2201      	movs	r2, #1
 800fa20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2204      	movs	r2, #4
 800fa28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fa38:	2200      	movs	r2, #0
 800fa3a:	4619      	mov	r1, r3
 800fa3c:	f001 ff48 	bl	80118d0 <osMessagePut>
      break;
 800fa40:	bf00      	nop
  }
}
 800fa42:	bf00      	nop
 800fa44:	3710      	adds	r7, #16
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}

0800fa4a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800fa4a:	b580      	push	{r7, lr}
 800fa4c:	b086      	sub	sp, #24
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fa58:	69db      	ldr	r3, [r3, #28]
 800fa5a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800fa66:	2b03      	cmp	r3, #3
 800fa68:	d002      	beq.n	800fa70 <CDC_ProcessReception+0x26>
 800fa6a:	2b04      	cmp	r3, #4
 800fa6c:	d00e      	beq.n	800fa8c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800fa6e:	e051      	b.n	800fb14 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	6a19      	ldr	r1, [r3, #32]
 800fa74:	697b      	ldr	r3, [r7, #20]
 800fa76:	8b5a      	ldrh	r2, [r3, #26]
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	7b1b      	ldrb	r3, [r3, #12]
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f001 fd47 	bl	8011510 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	2204      	movs	r2, #4
 800fa86:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800fa8a:	e043      	b.n	800fb14 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	7b1b      	ldrb	r3, [r3, #12]
 800fa90:	4619      	mov	r1, r3
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f004 fba0 	bl	80141d8 <USBH_LL_GetURBState>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800fa9c:	7cfb      	ldrb	r3, [r7, #19]
 800fa9e:	2b01      	cmp	r3, #1
 800faa0:	d137      	bne.n	800fb12 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	7b1b      	ldrb	r3, [r3, #12]
 800faa6:	4619      	mov	r1, r3
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f004 fb03 	bl	80140b4 <USBH_LL_GetLastXferSize>
 800faae:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fab4:	68fa      	ldr	r2, [r7, #12]
 800fab6:	429a      	cmp	r2, r3
 800fab8:	d016      	beq.n	800fae8 <CDC_ProcessReception+0x9e>
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	8b5b      	ldrh	r3, [r3, #26]
 800fabe:	461a      	mov	r2, r3
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	4293      	cmp	r3, r2
 800fac4:	d910      	bls.n	800fae8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	1ad2      	subs	r2, r2, r3
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800fad2:	697b      	ldr	r3, [r7, #20]
 800fad4:	6a1a      	ldr	r2, [r3, #32]
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	441a      	add	r2, r3
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	2203      	movs	r2, #3
 800fae2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800fae6:	e006      	b.n	800faf6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	2200      	movs	r2, #0
 800faec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f000 f81d 	bl	800fb30 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2204      	movs	r2, #4
 800fafa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	4619      	mov	r1, r3
 800fb0e:	f001 fedf 	bl	80118d0 <osMessagePut>
      break;
 800fb12:	bf00      	nop
  }
}
 800fb14:	bf00      	nop
 800fb16:	3718      	adds	r7, #24
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}

0800fb1c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800fb1c:	b480      	push	{r7}
 800fb1e:	b083      	sub	sp, #12
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800fb24:	bf00      	nop
 800fb26:	370c      	adds	r7, #12
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr

0800fb30 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800fb30:	b480      	push	{r7}
 800fb32:	b083      	sub	sp, #12
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800fb38:	bf00      	nop
 800fb3a:	370c      	adds	r7, #12
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb42:	4770      	bx	lr

0800fb44 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800fb44:	b480      	push	{r7}
 800fb46:	b083      	sub	sp, #12
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800fb4c:	bf00      	nop
 800fb4e:	370c      	adds	r7, #12
 800fb50:	46bd      	mov	sp, r7
 800fb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb56:	4770      	bx	lr

0800fb58 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800fb58:	b5b0      	push	{r4, r5, r7, lr}
 800fb5a:	b090      	sub	sp, #64	; 0x40
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	60f8      	str	r0, [r7, #12]
 800fb60:	60b9      	str	r1, [r7, #8]
 800fb62:	4613      	mov	r3, r2
 800fb64:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d101      	bne.n	800fb70 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800fb6c:	2302      	movs	r3, #2
 800fb6e:	e04d      	b.n	800fc0c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	79fa      	ldrb	r2, [r7, #7]
 800fb74:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	2200      	movs	r2, #0
 800fb84:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800fb88:	68f8      	ldr	r0, [r7, #12]
 800fb8a:	f000 f847 	bl	800fc1c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	2200      	movs	r2, #0
 800fb92:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	2200      	movs	r2, #0
 800fba2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d003      	beq.n	800fbbc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	68ba      	ldr	r2, [r7, #8]
 800fbb8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800fbbc:	4b15      	ldr	r3, [pc, #84]	; (800fc14 <USBH_Init+0xbc>)
 800fbbe:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800fbc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fbc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800fbc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fbcc:	2100      	movs	r1, #0
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f001 fe56 	bl	8011880 <osMessageCreate>
 800fbd4:	4602      	mov	r2, r0
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800fbdc:	4b0e      	ldr	r3, [pc, #56]	; (800fc18 <USBH_Init+0xc0>)
 800fbde:	f107 0414 	add.w	r4, r7, #20
 800fbe2:	461d      	mov	r5, r3
 800fbe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbe8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fbec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800fbf0:	f107 0314 	add.w	r3, r7, #20
 800fbf4:	68f9      	ldr	r1, [r7, #12]
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f001 fde2 	bl	80117c0 <osThreadCreate>
 800fbfc:	4602      	mov	r2, r0
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800fc04:	68f8      	ldr	r0, [r7, #12]
 800fc06:	f004 f9a1 	bl	8013f4c <USBH_LL_Init>

  return USBH_OK;
 800fc0a:	2300      	movs	r3, #0
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3740      	adds	r7, #64	; 0x40
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bdb0      	pop	{r4, r5, r7, pc}
 800fc14:	08014d14 	.word	0x08014d14
 800fc18:	08014d24 	.word	0x08014d24

0800fc1c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b085      	sub	sp, #20
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800fc24:	2300      	movs	r3, #0
 800fc26:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800fc28:	2300      	movs	r3, #0
 800fc2a:	60fb      	str	r3, [r7, #12]
 800fc2c:	e009      	b.n	800fc42 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800fc2e:	687a      	ldr	r2, [r7, #4]
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	33e0      	adds	r3, #224	; 0xe0
 800fc34:	009b      	lsls	r3, r3, #2
 800fc36:	4413      	add	r3, r2
 800fc38:	2200      	movs	r2, #0
 800fc3a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	3301      	adds	r3, #1
 800fc40:	60fb      	str	r3, [r7, #12]
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2b0e      	cmp	r3, #14
 800fc46:	d9f2      	bls.n	800fc2e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800fc48:	2300      	movs	r3, #0
 800fc4a:	60fb      	str	r3, [r7, #12]
 800fc4c:	e009      	b.n	800fc62 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800fc4e:	687a      	ldr	r2, [r7, #4]
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	4413      	add	r3, r2
 800fc54:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800fc58:	2200      	movs	r2, #0
 800fc5a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	3301      	adds	r3, #1
 800fc60:	60fb      	str	r3, [r7, #12]
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc68:	d3f1      	bcc.n	800fc4e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2200      	movs	r2, #0
 800fc74:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2201      	movs	r2, #1
 800fc7a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2201      	movs	r2, #1
 800fc88:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2240      	movs	r2, #64	; 0x40
 800fc8e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2200      	movs	r2, #0
 800fc94:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2200      	movs	r2, #0
 800fc9a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	2201      	movs	r2, #1
 800fca2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800fcb6:	2300      	movs	r3, #0
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3714      	adds	r7, #20
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc2:	4770      	bx	lr

0800fcc4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b085      	sub	sp, #20
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d016      	beq.n	800fd06 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d10e      	bne.n	800fd00 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800fce8:	1c59      	adds	r1, r3, #1
 800fcea:	687a      	ldr	r2, [r7, #4]
 800fcec:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800fcf0:	687a      	ldr	r2, [r7, #4]
 800fcf2:	33de      	adds	r3, #222	; 0xde
 800fcf4:	6839      	ldr	r1, [r7, #0]
 800fcf6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	73fb      	strb	r3, [r7, #15]
 800fcfe:	e004      	b.n	800fd0a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800fd00:	2302      	movs	r3, #2
 800fd02:	73fb      	strb	r3, [r7, #15]
 800fd04:	e001      	b.n	800fd0a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800fd06:	2302      	movs	r3, #2
 800fd08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fd0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3714      	adds	r7, #20
 800fd10:	46bd      	mov	sp, r7
 800fd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd16:	4770      	bx	lr

0800fd18 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b085      	sub	sp, #20
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	460b      	mov	r3, r1
 800fd22:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800fd24:	2300      	movs	r3, #0
 800fd26:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800fd2e:	78fa      	ldrb	r2, [r7, #3]
 800fd30:	429a      	cmp	r2, r3
 800fd32:	d204      	bcs.n	800fd3e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	78fa      	ldrb	r2, [r7, #3]
 800fd38:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800fd3c:	e001      	b.n	800fd42 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800fd3e:	2302      	movs	r3, #2
 800fd40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fd42:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3714      	adds	r7, #20
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4e:	4770      	bx	lr

0800fd50 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b087      	sub	sp, #28
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	4608      	mov	r0, r1
 800fd5a:	4611      	mov	r1, r2
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	4603      	mov	r3, r0
 800fd60:	70fb      	strb	r3, [r7, #3]
 800fd62:	460b      	mov	r3, r1
 800fd64:	70bb      	strb	r3, [r7, #2]
 800fd66:	4613      	mov	r3, r2
 800fd68:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800fd78:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800fd7a:	e025      	b.n	800fdc8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800fd7c:	7dfb      	ldrb	r3, [r7, #23]
 800fd7e:	221a      	movs	r2, #26
 800fd80:	fb02 f303 	mul.w	r3, r2, r3
 800fd84:	3308      	adds	r3, #8
 800fd86:	68fa      	ldr	r2, [r7, #12]
 800fd88:	4413      	add	r3, r2
 800fd8a:	3302      	adds	r3, #2
 800fd8c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	795b      	ldrb	r3, [r3, #5]
 800fd92:	78fa      	ldrb	r2, [r7, #3]
 800fd94:	429a      	cmp	r2, r3
 800fd96:	d002      	beq.n	800fd9e <USBH_FindInterface+0x4e>
 800fd98:	78fb      	ldrb	r3, [r7, #3]
 800fd9a:	2bff      	cmp	r3, #255	; 0xff
 800fd9c:	d111      	bne.n	800fdc2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800fd9e:	693b      	ldr	r3, [r7, #16]
 800fda0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800fda2:	78ba      	ldrb	r2, [r7, #2]
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d002      	beq.n	800fdae <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800fda8:	78bb      	ldrb	r3, [r7, #2]
 800fdaa:	2bff      	cmp	r3, #255	; 0xff
 800fdac:	d109      	bne.n	800fdc2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800fdae:	693b      	ldr	r3, [r7, #16]
 800fdb0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800fdb2:	787a      	ldrb	r2, [r7, #1]
 800fdb4:	429a      	cmp	r2, r3
 800fdb6:	d002      	beq.n	800fdbe <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800fdb8:	787b      	ldrb	r3, [r7, #1]
 800fdba:	2bff      	cmp	r3, #255	; 0xff
 800fdbc:	d101      	bne.n	800fdc2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800fdbe:	7dfb      	ldrb	r3, [r7, #23]
 800fdc0:	e006      	b.n	800fdd0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800fdc2:	7dfb      	ldrb	r3, [r7, #23]
 800fdc4:	3301      	adds	r3, #1
 800fdc6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800fdc8:	7dfb      	ldrb	r3, [r7, #23]
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	d9d6      	bls.n	800fd7c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800fdce:	23ff      	movs	r3, #255	; 0xff
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	371c      	adds	r7, #28
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdda:	4770      	bx	lr

0800fddc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b082      	sub	sp, #8
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f004 f8ed 	bl	8013fc4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800fdea:	2101      	movs	r1, #1
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f004 fa06 	bl	80141fe <USBH_LL_DriverVBUS>

  return USBH_OK;
 800fdf2:	2300      	movs	r3, #0
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3708      	adds	r7, #8
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b088      	sub	sp, #32
 800fe00:	af04      	add	r7, sp, #16
 800fe02:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800fe04:	2302      	movs	r3, #2
 800fe06:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800fe12:	b2db      	uxtb	r3, r3
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d102      	bne.n	800fe1e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2203      	movs	r2, #3
 800fe1c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	b2db      	uxtb	r3, r3
 800fe24:	2b0b      	cmp	r3, #11
 800fe26:	f200 823c 	bhi.w	80102a2 <USBH_Process+0x4a6>
 800fe2a:	a201      	add	r2, pc, #4	; (adr r2, 800fe30 <USBH_Process+0x34>)
 800fe2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe30:	0800fe61 	.word	0x0800fe61
 800fe34:	0800feaf 	.word	0x0800feaf
 800fe38:	0800ff33 	.word	0x0800ff33
 800fe3c:	08010221 	.word	0x08010221
 800fe40:	080102a3 	.word	0x080102a3
 800fe44:	0800fff3 	.word	0x0800fff3
 800fe48:	080101ab 	.word	0x080101ab
 800fe4c:	08010045 	.word	0x08010045
 800fe50:	08010081 	.word	0x08010081
 800fe54:	080100bb 	.word	0x080100bb
 800fe58:	08010103 	.word	0x08010103
 800fe5c:	08010209 	.word	0x08010209
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800fe66:	b2db      	uxtb	r3, r3
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	f000 821c 	beq.w	80102a6 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2201      	movs	r2, #1
 800fe72:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800fe74:	20c8      	movs	r0, #200	; 0xc8
 800fe76:	f004 fa09 	bl	801428c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f004 f8ff 	bl	801407e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2200      	movs	r2, #0
 800fe84:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2201      	movs	r2, #1
 800fe94:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fea4:	2200      	movs	r2, #0
 800fea6:	4619      	mov	r1, r3
 800fea8:	f001 fd12 	bl	80118d0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800feac:	e1fb      	b.n	80102a6 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800feb4:	2b01      	cmp	r3, #1
 800feb6:	d107      	bne.n	800fec8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2200      	movs	r2, #0
 800febc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2202      	movs	r2, #2
 800fec4:	701a      	strb	r2, [r3, #0]
 800fec6:	e025      	b.n	800ff14 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800fece:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fed2:	d914      	bls.n	800fefe <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800feda:	3301      	adds	r3, #1
 800fedc:	b2da      	uxtb	r2, r3
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800feea:	2b03      	cmp	r3, #3
 800feec:	d903      	bls.n	800fef6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	220d      	movs	r2, #13
 800fef2:	701a      	strb	r2, [r3, #0]
 800fef4:	e00e      	b.n	800ff14 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2200      	movs	r2, #0
 800fefa:	701a      	strb	r2, [r3, #0]
 800fefc:	e00a      	b.n	800ff14 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ff04:	f103 020a 	add.w	r2, r3, #10
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ff0e:	200a      	movs	r0, #10
 800ff10:	f004 f9bc 	bl	801428c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2201      	movs	r2, #1
 800ff18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ff28:	2200      	movs	r2, #0
 800ff2a:	4619      	mov	r1, r3
 800ff2c:	f001 fcd0 	bl	80118d0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ff30:	e1c0      	b.n	80102b4 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d005      	beq.n	800ff48 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ff42:	2104      	movs	r1, #4
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ff48:	2064      	movs	r0, #100	; 0x64
 800ff4a:	f004 f99f 	bl	801428c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f004 f86e 	bl	8014030 <USBH_LL_GetSpeed>
 800ff54:	4603      	mov	r3, r0
 800ff56:	461a      	mov	r2, r3
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2205      	movs	r2, #5
 800ff62:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ff64:	2100      	movs	r1, #0
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f001 fb1f 	bl	80115aa <USBH_AllocPipe>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	461a      	mov	r2, r3
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ff74:	2180      	movs	r1, #128	; 0x80
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f001 fb17 	bl	80115aa <USBH_AllocPipe>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	461a      	mov	r2, r3
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	7919      	ldrb	r1, [r3, #4]
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ff94:	687a      	ldr	r2, [r7, #4]
 800ff96:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ff98:	b292      	uxth	r2, r2
 800ff9a:	9202      	str	r2, [sp, #8]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	9201      	str	r2, [sp, #4]
 800ffa0:	9300      	str	r3, [sp, #0]
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	2280      	movs	r2, #128	; 0x80
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f001 fad0 	bl	801154c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	7959      	ldrb	r1, [r3, #5]
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ffbc:	687a      	ldr	r2, [r7, #4]
 800ffbe:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ffc0:	b292      	uxth	r2, r2
 800ffc2:	9202      	str	r2, [sp, #8]
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	9201      	str	r2, [sp, #4]
 800ffc8:	9300      	str	r3, [sp, #0]
 800ffca:	4603      	mov	r3, r0
 800ffcc:	2200      	movs	r2, #0
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f001 fabc 	bl	801154c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ffe8:	2200      	movs	r2, #0
 800ffea:	4619      	mov	r1, r3
 800ffec:	f001 fc70 	bl	80118d0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800fff0:	e160      	b.n	80102b4 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f000 f964 	bl	80102c0 <USBH_HandleEnum>
 800fff8:	4603      	mov	r3, r0
 800fffa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800fffc:	7bbb      	ldrb	r3, [r7, #14]
 800fffe:	b2db      	uxtb	r3, r3
 8010000:	2b00      	cmp	r3, #0
 8010002:	f040 8152 	bne.w	80102aa <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2200      	movs	r2, #0
 801000a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8010014:	2b01      	cmp	r3, #1
 8010016:	d103      	bne.n	8010020 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2208      	movs	r2, #8
 801001c:	701a      	strb	r2, [r3, #0]
 801001e:	e002      	b.n	8010026 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	2207      	movs	r2, #7
 8010024:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2205      	movs	r2, #5
 801002a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801003a:	2200      	movs	r2, #0
 801003c:	4619      	mov	r1, r3
 801003e:	f001 fc47 	bl	80118d0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8010042:	e132      	b.n	80102aa <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801004a:	2b00      	cmp	r3, #0
 801004c:	f000 812f 	beq.w	80102ae <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010056:	2101      	movs	r1, #1
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2208      	movs	r2, #8
 8010060:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2205      	movs	r2, #5
 8010066:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010076:	2200      	movs	r2, #0
 8010078:	4619      	mov	r1, r3
 801007a:	f001 fc29 	bl	80118d0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 801007e:	e116      	b.n	80102ae <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8010086:	b29b      	uxth	r3, r3
 8010088:	4619      	mov	r1, r3
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	f000 fcf6 	bl	8010a7c <USBH_SetCfg>
 8010090:	4603      	mov	r3, r0
 8010092:	2b00      	cmp	r3, #0
 8010094:	d102      	bne.n	801009c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2209      	movs	r2, #9
 801009a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2201      	movs	r2, #1
 80100a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80100b0:	2200      	movs	r2, #0
 80100b2:	4619      	mov	r1, r3
 80100b4:	f001 fc0c 	bl	80118d0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80100b8:	e0fc      	b.n	80102b4 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80100c0:	f003 0320 	and.w	r3, r3, #32
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d00a      	beq.n	80100de <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80100c8:	2101      	movs	r1, #1
 80100ca:	6878      	ldr	r0, [r7, #4]
 80100cc:	f000 fcf9 	bl	8010ac2 <USBH_SetFeature>
 80100d0:	4603      	mov	r3, r0
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d106      	bne.n	80100e4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	220a      	movs	r2, #10
 80100da:	701a      	strb	r2, [r3, #0]
 80100dc:	e002      	b.n	80100e4 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	220a      	movs	r2, #10
 80100e2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2201      	movs	r2, #1
 80100e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80100f8:	2200      	movs	r2, #0
 80100fa:	4619      	mov	r1, r3
 80100fc:	f001 fbe8 	bl	80118d0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8010100:	e0d8      	b.n	80102b4 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8010108:	2b00      	cmp	r3, #0
 801010a:	d03f      	beq.n	801018c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2200      	movs	r2, #0
 8010110:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010114:	2300      	movs	r3, #0
 8010116:	73fb      	strb	r3, [r7, #15]
 8010118:	e016      	b.n	8010148 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 801011a:	7bfa      	ldrb	r2, [r7, #15]
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	32de      	adds	r2, #222	; 0xde
 8010120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010124:	791a      	ldrb	r2, [r3, #4]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 801012c:	429a      	cmp	r2, r3
 801012e:	d108      	bne.n	8010142 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8010130:	7bfa      	ldrb	r2, [r7, #15]
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	32de      	adds	r2, #222	; 0xde
 8010136:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8010140:	e005      	b.n	801014e <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010142:	7bfb      	ldrb	r3, [r7, #15]
 8010144:	3301      	adds	r3, #1
 8010146:	73fb      	strb	r3, [r7, #15]
 8010148:	7bfb      	ldrb	r3, [r7, #15]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d0e5      	beq.n	801011a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010154:	2b00      	cmp	r3, #0
 8010156:	d016      	beq.n	8010186 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801015e:	689b      	ldr	r3, [r3, #8]
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	4798      	blx	r3
 8010164:	4603      	mov	r3, r0
 8010166:	2b00      	cmp	r3, #0
 8010168:	d109      	bne.n	801017e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2206      	movs	r2, #6
 801016e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010176:	2103      	movs	r1, #3
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	4798      	blx	r3
 801017c:	e006      	b.n	801018c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	220d      	movs	r2, #13
 8010182:	701a      	strb	r2, [r3, #0]
 8010184:	e002      	b.n	801018c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	220d      	movs	r2, #13
 801018a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2205      	movs	r2, #5
 8010190:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80101a0:	2200      	movs	r2, #0
 80101a2:	4619      	mov	r1, r3
 80101a4:	f001 fb94 	bl	80118d0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80101a8:	e084      	b.n	80102b4 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d017      	beq.n	80101e4 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80101ba:	691b      	ldr	r3, [r3, #16]
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	4798      	blx	r3
 80101c0:	4603      	mov	r3, r0
 80101c2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80101c4:	7bbb      	ldrb	r3, [r7, #14]
 80101c6:	b2db      	uxtb	r3, r3
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d103      	bne.n	80101d4 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	220b      	movs	r2, #11
 80101d0:	701a      	strb	r2, [r3, #0]
 80101d2:	e00a      	b.n	80101ea <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 80101d4:	7bbb      	ldrb	r3, [r7, #14]
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	2b02      	cmp	r3, #2
 80101da:	d106      	bne.n	80101ea <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	220d      	movs	r2, #13
 80101e0:	701a      	strb	r2, [r3, #0]
 80101e2:	e002      	b.n	80101ea <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	220d      	movs	r2, #13
 80101e8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2205      	movs	r2, #5
 80101ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80101fe:	2200      	movs	r2, #0
 8010200:	4619      	mov	r1, r3
 8010202:	f001 fb65 	bl	80118d0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8010206:	e055      	b.n	80102b4 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801020e:	2b00      	cmp	r3, #0
 8010210:	d04f      	beq.n	80102b2 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010218:	695b      	ldr	r3, [r3, #20]
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	4798      	blx	r3
      }
      break;
 801021e:	e048      	b.n	80102b2 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2200      	movs	r2, #0
 8010224:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f7ff fcf7 	bl	800fc1c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010234:	2b00      	cmp	r3, #0
 8010236:	d009      	beq.n	801024c <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801023e:	68db      	ldr	r3, [r3, #12]
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2200      	movs	r2, #0
 8010248:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010252:	2b00      	cmp	r3, #0
 8010254:	d005      	beq.n	8010262 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801025c:	2105      	movs	r1, #5
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8010268:	b2db      	uxtb	r3, r3
 801026a:	2b01      	cmp	r3, #1
 801026c:	d107      	bne.n	801027e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2200      	movs	r2, #0
 8010272:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f7ff fdb0 	bl	800fddc <USBH_Start>
 801027c:	e002      	b.n	8010284 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	f003 fea0 	bl	8013fc4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2201      	movs	r2, #1
 8010288:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010298:	2200      	movs	r2, #0
 801029a:	4619      	mov	r1, r3
 801029c:	f001 fb18 	bl	80118d0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80102a0:	e008      	b.n	80102b4 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 80102a2:	bf00      	nop
 80102a4:	e006      	b.n	80102b4 <USBH_Process+0x4b8>
      break;
 80102a6:	bf00      	nop
 80102a8:	e004      	b.n	80102b4 <USBH_Process+0x4b8>
      break;
 80102aa:	bf00      	nop
 80102ac:	e002      	b.n	80102b4 <USBH_Process+0x4b8>
    break;
 80102ae:	bf00      	nop
 80102b0:	e000      	b.n	80102b4 <USBH_Process+0x4b8>
      break;
 80102b2:	bf00      	nop
  }
  return USBH_OK;
 80102b4:	2300      	movs	r3, #0
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	3710      	adds	r7, #16
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}
 80102be:	bf00      	nop

080102c0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b088      	sub	sp, #32
 80102c4:	af04      	add	r7, sp, #16
 80102c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80102c8:	2301      	movs	r3, #1
 80102ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80102cc:	2301      	movs	r3, #1
 80102ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	785b      	ldrb	r3, [r3, #1]
 80102d4:	2b07      	cmp	r3, #7
 80102d6:	f200 8208 	bhi.w	80106ea <USBH_HandleEnum+0x42a>
 80102da:	a201      	add	r2, pc, #4	; (adr r2, 80102e0 <USBH_HandleEnum+0x20>)
 80102dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102e0:	08010301 	.word	0x08010301
 80102e4:	080103bf 	.word	0x080103bf
 80102e8:	08010429 	.word	0x08010429
 80102ec:	080104b7 	.word	0x080104b7
 80102f0:	08010521 	.word	0x08010521
 80102f4:	08010591 	.word	0x08010591
 80102f8:	0801062d 	.word	0x0801062d
 80102fc:	080106ab 	.word	0x080106ab
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8010300:	2108      	movs	r1, #8
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f000 faea 	bl	80108dc <USBH_Get_DevDesc>
 8010308:	4603      	mov	r3, r0
 801030a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801030c:	7bbb      	ldrb	r3, [r7, #14]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d130      	bne.n	8010374 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2201      	movs	r2, #1
 8010320:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	7919      	ldrb	r1, [r3, #4]
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8010332:	687a      	ldr	r2, [r7, #4]
 8010334:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8010336:	b292      	uxth	r2, r2
 8010338:	9202      	str	r2, [sp, #8]
 801033a:	2200      	movs	r2, #0
 801033c:	9201      	str	r2, [sp, #4]
 801033e:	9300      	str	r3, [sp, #0]
 8010340:	4603      	mov	r3, r0
 8010342:	2280      	movs	r2, #128	; 0x80
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f001 f901 	bl	801154c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	7959      	ldrb	r1, [r3, #5]
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 801035a:	687a      	ldr	r2, [r7, #4]
 801035c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801035e:	b292      	uxth	r2, r2
 8010360:	9202      	str	r2, [sp, #8]
 8010362:	2200      	movs	r2, #0
 8010364:	9201      	str	r2, [sp, #4]
 8010366:	9300      	str	r3, [sp, #0]
 8010368:	4603      	mov	r3, r0
 801036a:	2200      	movs	r2, #0
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f001 f8ed 	bl	801154c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8010372:	e1bc      	b.n	80106ee <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010374:	7bbb      	ldrb	r3, [r7, #14]
 8010376:	2b03      	cmp	r3, #3
 8010378:	f040 81b9 	bne.w	80106ee <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010382:	3301      	adds	r3, #1
 8010384:	b2da      	uxtb	r2, r3
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010392:	2b03      	cmp	r3, #3
 8010394:	d903      	bls.n	801039e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	220d      	movs	r2, #13
 801039a:	701a      	strb	r2, [r3, #0]
      break;
 801039c:	e1a7      	b.n	80106ee <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	795b      	ldrb	r3, [r3, #5]
 80103a2:	4619      	mov	r1, r3
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f001 f921 	bl	80115ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	791b      	ldrb	r3, [r3, #4]
 80103ae:	4619      	mov	r1, r3
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	f001 f91b 	bl	80115ec <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2200      	movs	r2, #0
 80103ba:	701a      	strb	r2, [r3, #0]
      break;
 80103bc:	e197      	b.n	80106ee <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80103be:	2112      	movs	r1, #18
 80103c0:	6878      	ldr	r0, [r7, #4]
 80103c2:	f000 fa8b 	bl	80108dc <USBH_Get_DevDesc>
 80103c6:	4603      	mov	r3, r0
 80103c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80103ca:	7bbb      	ldrb	r3, [r7, #14]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d103      	bne.n	80103d8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	2202      	movs	r2, #2
 80103d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80103d6:	e18c      	b.n	80106f2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80103d8:	7bbb      	ldrb	r3, [r7, #14]
 80103da:	2b03      	cmp	r3, #3
 80103dc:	f040 8189 	bne.w	80106f2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80103e6:	3301      	adds	r3, #1
 80103e8:	b2da      	uxtb	r2, r3
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80103f6:	2b03      	cmp	r3, #3
 80103f8:	d903      	bls.n	8010402 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	220d      	movs	r2, #13
 80103fe:	701a      	strb	r2, [r3, #0]
      break;
 8010400:	e177      	b.n	80106f2 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	795b      	ldrb	r3, [r3, #5]
 8010406:	4619      	mov	r1, r3
 8010408:	6878      	ldr	r0, [r7, #4]
 801040a:	f001 f8ef 	bl	80115ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	791b      	ldrb	r3, [r3, #4]
 8010412:	4619      	mov	r1, r3
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f001 f8e9 	bl	80115ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2200      	movs	r2, #0
 801041e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2200      	movs	r2, #0
 8010424:	701a      	strb	r2, [r3, #0]
      break;
 8010426:	e164      	b.n	80106f2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8010428:	2101      	movs	r1, #1
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f000 fb02 	bl	8010a34 <USBH_SetAddress>
 8010430:	4603      	mov	r3, r0
 8010432:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010434:	7bbb      	ldrb	r3, [r7, #14]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d132      	bne.n	80104a0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 801043a:	2002      	movs	r0, #2
 801043c:	f003 ff26 	bl	801428c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2201      	movs	r2, #1
 8010444:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2203      	movs	r2, #3
 801044c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	7919      	ldrb	r1, [r3, #4]
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 801045e:	687a      	ldr	r2, [r7, #4]
 8010460:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8010462:	b292      	uxth	r2, r2
 8010464:	9202      	str	r2, [sp, #8]
 8010466:	2200      	movs	r2, #0
 8010468:	9201      	str	r2, [sp, #4]
 801046a:	9300      	str	r3, [sp, #0]
 801046c:	4603      	mov	r3, r0
 801046e:	2280      	movs	r2, #128	; 0x80
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f001 f86b 	bl	801154c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	7959      	ldrb	r1, [r3, #5]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8010486:	687a      	ldr	r2, [r7, #4]
 8010488:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801048a:	b292      	uxth	r2, r2
 801048c:	9202      	str	r2, [sp, #8]
 801048e:	2200      	movs	r2, #0
 8010490:	9201      	str	r2, [sp, #4]
 8010492:	9300      	str	r3, [sp, #0]
 8010494:	4603      	mov	r3, r0
 8010496:	2200      	movs	r2, #0
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f001 f857 	bl	801154c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801049e:	e12a      	b.n	80106f6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80104a0:	7bbb      	ldrb	r3, [r7, #14]
 80104a2:	2b03      	cmp	r3, #3
 80104a4:	f040 8127 	bne.w	80106f6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	220d      	movs	r2, #13
 80104ac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2200      	movs	r2, #0
 80104b2:	705a      	strb	r2, [r3, #1]
      break;
 80104b4:	e11f      	b.n	80106f6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80104b6:	2109      	movs	r1, #9
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f000 fa37 	bl	801092c <USBH_Get_CfgDesc>
 80104be:	4603      	mov	r3, r0
 80104c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80104c2:	7bbb      	ldrb	r3, [r7, #14]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d103      	bne.n	80104d0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2204      	movs	r2, #4
 80104cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80104ce:	e114      	b.n	80106fa <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80104d0:	7bbb      	ldrb	r3, [r7, #14]
 80104d2:	2b03      	cmp	r3, #3
 80104d4:	f040 8111 	bne.w	80106fa <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80104de:	3301      	adds	r3, #1
 80104e0:	b2da      	uxtb	r2, r3
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80104ee:	2b03      	cmp	r3, #3
 80104f0:	d903      	bls.n	80104fa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	220d      	movs	r2, #13
 80104f6:	701a      	strb	r2, [r3, #0]
      break;
 80104f8:	e0ff      	b.n	80106fa <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	795b      	ldrb	r3, [r3, #5]
 80104fe:	4619      	mov	r1, r3
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f001 f873 	bl	80115ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	791b      	ldrb	r3, [r3, #4]
 801050a:	4619      	mov	r1, r3
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f001 f86d 	bl	80115ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2200      	movs	r2, #0
 8010516:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2200      	movs	r2, #0
 801051c:	701a      	strb	r2, [r3, #0]
      break;
 801051e:	e0ec      	b.n	80106fa <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8010526:	4619      	mov	r1, r3
 8010528:	6878      	ldr	r0, [r7, #4]
 801052a:	f000 f9ff 	bl	801092c <USBH_Get_CfgDesc>
 801052e:	4603      	mov	r3, r0
 8010530:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010532:	7bbb      	ldrb	r3, [r7, #14]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d103      	bne.n	8010540 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2205      	movs	r2, #5
 801053c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801053e:	e0de      	b.n	80106fe <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010540:	7bbb      	ldrb	r3, [r7, #14]
 8010542:	2b03      	cmp	r3, #3
 8010544:	f040 80db 	bne.w	80106fe <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801054e:	3301      	adds	r3, #1
 8010550:	b2da      	uxtb	r2, r3
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801055e:	2b03      	cmp	r3, #3
 8010560:	d903      	bls.n	801056a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	220d      	movs	r2, #13
 8010566:	701a      	strb	r2, [r3, #0]
      break;
 8010568:	e0c9      	b.n	80106fe <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	795b      	ldrb	r3, [r3, #5]
 801056e:	4619      	mov	r1, r3
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f001 f83b 	bl	80115ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	791b      	ldrb	r3, [r3, #4]
 801057a:	4619      	mov	r1, r3
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f001 f835 	bl	80115ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2200      	movs	r2, #0
 8010586:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2200      	movs	r2, #0
 801058c:	701a      	strb	r2, [r3, #0]
      break;
 801058e:	e0b6      	b.n	80106fe <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8010596:	2b00      	cmp	r3, #0
 8010598:	d036      	beq.n	8010608 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80105a6:	23ff      	movs	r3, #255	; 0xff
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f000 f9e3 	bl	8010974 <USBH_Get_StringDesc>
 80105ae:	4603      	mov	r3, r0
 80105b0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80105b2:	7bbb      	ldrb	r3, [r7, #14]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d111      	bne.n	80105dc <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2206      	movs	r2, #6
 80105bc:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2205      	movs	r2, #5
 80105c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80105d2:	2200      	movs	r2, #0
 80105d4:	4619      	mov	r1, r3
 80105d6:	f001 f97b 	bl	80118d0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80105da:	e092      	b.n	8010702 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80105dc:	7bbb      	ldrb	r3, [r7, #14]
 80105de:	2b03      	cmp	r3, #3
 80105e0:	f040 808f 	bne.w	8010702 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2206      	movs	r2, #6
 80105e8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2205      	movs	r2, #5
 80105ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80105fe:	2200      	movs	r2, #0
 8010600:	4619      	mov	r1, r3
 8010602:	f001 f965 	bl	80118d0 <osMessagePut>
      break;
 8010606:	e07c      	b.n	8010702 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2206      	movs	r2, #6
 801060c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	2205      	movs	r2, #5
 8010612:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010622:	2200      	movs	r2, #0
 8010624:	4619      	mov	r1, r3
 8010626:	f001 f953 	bl	80118d0 <osMessagePut>
      break;
 801062a:	e06a      	b.n	8010702 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8010632:	2b00      	cmp	r3, #0
 8010634:	d027      	beq.n	8010686 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8010642:	23ff      	movs	r3, #255	; 0xff
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f000 f995 	bl	8010974 <USBH_Get_StringDesc>
 801064a:	4603      	mov	r3, r0
 801064c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801064e:	7bbb      	ldrb	r3, [r7, #14]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d103      	bne.n	801065c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2207      	movs	r2, #7
 8010658:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 801065a:	e054      	b.n	8010706 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801065c:	7bbb      	ldrb	r3, [r7, #14]
 801065e:	2b03      	cmp	r3, #3
 8010660:	d151      	bne.n	8010706 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	2207      	movs	r2, #7
 8010666:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2205      	movs	r2, #5
 801066c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801067c:	2200      	movs	r2, #0
 801067e:	4619      	mov	r1, r3
 8010680:	f001 f926 	bl	80118d0 <osMessagePut>
      break;
 8010684:	e03f      	b.n	8010706 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	2207      	movs	r2, #7
 801068a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2205      	movs	r2, #5
 8010690:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80106a0:	2200      	movs	r2, #0
 80106a2:	4619      	mov	r1, r3
 80106a4:	f001 f914 	bl	80118d0 <osMessagePut>
      break;
 80106a8:	e02d      	b.n	8010706 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d017      	beq.n	80106e4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80106c0:	23ff      	movs	r3, #255	; 0xff
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f000 f956 	bl	8010974 <USBH_Get_StringDesc>
 80106c8:	4603      	mov	r3, r0
 80106ca:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80106cc:	7bbb      	ldrb	r3, [r7, #14]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d102      	bne.n	80106d8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80106d2:	2300      	movs	r3, #0
 80106d4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80106d6:	e018      	b.n	801070a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80106d8:	7bbb      	ldrb	r3, [r7, #14]
 80106da:	2b03      	cmp	r3, #3
 80106dc:	d115      	bne.n	801070a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80106de:	2300      	movs	r3, #0
 80106e0:	73fb      	strb	r3, [r7, #15]
      break;
 80106e2:	e012      	b.n	801070a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80106e4:	2300      	movs	r3, #0
 80106e6:	73fb      	strb	r3, [r7, #15]
      break;
 80106e8:	e00f      	b.n	801070a <USBH_HandleEnum+0x44a>

    default:
      break;
 80106ea:	bf00      	nop
 80106ec:	e00e      	b.n	801070c <USBH_HandleEnum+0x44c>
      break;
 80106ee:	bf00      	nop
 80106f0:	e00c      	b.n	801070c <USBH_HandleEnum+0x44c>
      break;
 80106f2:	bf00      	nop
 80106f4:	e00a      	b.n	801070c <USBH_HandleEnum+0x44c>
      break;
 80106f6:	bf00      	nop
 80106f8:	e008      	b.n	801070c <USBH_HandleEnum+0x44c>
      break;
 80106fa:	bf00      	nop
 80106fc:	e006      	b.n	801070c <USBH_HandleEnum+0x44c>
      break;
 80106fe:	bf00      	nop
 8010700:	e004      	b.n	801070c <USBH_HandleEnum+0x44c>
      break;
 8010702:	bf00      	nop
 8010704:	e002      	b.n	801070c <USBH_HandleEnum+0x44c>
      break;
 8010706:	bf00      	nop
 8010708:	e000      	b.n	801070c <USBH_HandleEnum+0x44c>
      break;
 801070a:	bf00      	nop
  }
  return Status;
 801070c:	7bfb      	ldrb	r3, [r7, #15]
}
 801070e:	4618      	mov	r0, r3
 8010710:	3710      	adds	r7, #16
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}
 8010716:	bf00      	nop

08010718 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8010718:	b480      	push	{r7}
 801071a:	b083      	sub	sp, #12
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	683a      	ldr	r2, [r7, #0]
 8010726:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 801072a:	bf00      	nop
 801072c:	370c      	adds	r7, #12
 801072e:	46bd      	mov	sp, r7
 8010730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010734:	4770      	bx	lr

08010736 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8010736:	b580      	push	{r7, lr}
 8010738:	b082      	sub	sp, #8
 801073a:	af00      	add	r7, sp, #0
 801073c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010744:	1c5a      	adds	r2, r3, #1
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f000 f804 	bl	801075a <USBH_HandleSof>
}
 8010752:	bf00      	nop
 8010754:	3708      	adds	r7, #8
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}

0801075a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 801075a:	b580      	push	{r7, lr}
 801075c:	b082      	sub	sp, #8
 801075e:	af00      	add	r7, sp, #0
 8010760:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	781b      	ldrb	r3, [r3, #0]
 8010766:	b2db      	uxtb	r3, r3
 8010768:	2b0b      	cmp	r3, #11
 801076a:	d10a      	bne.n	8010782 <USBH_HandleSof+0x28>
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010772:	2b00      	cmp	r3, #0
 8010774:	d005      	beq.n	8010782 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801077c:	699b      	ldr	r3, [r3, #24]
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	4798      	blx	r3
  }
}
 8010782:	bf00      	nop
 8010784:	3708      	adds	r7, #8
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}

0801078a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 801078a:	b580      	push	{r7, lr}
 801078c:	b082      	sub	sp, #8
 801078e:	af00      	add	r7, sp, #0
 8010790:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2201      	movs	r2, #1
 8010796:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	2201      	movs	r2, #1
 801079e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80107ae:	2200      	movs	r2, #0
 80107b0:	4619      	mov	r1, r3
 80107b2:	f001 f88d 	bl	80118d0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80107b6:	bf00      	nop
}
 80107b8:	3708      	adds	r7, #8
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}

080107be <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80107be:	b480      	push	{r7}
 80107c0:	b083      	sub	sp, #12
 80107c2:	af00      	add	r7, sp, #0
 80107c4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2200      	movs	r2, #0
 80107ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80107ce:	bf00      	nop
}
 80107d0:	370c      	adds	r7, #12
 80107d2:	46bd      	mov	sp, r7
 80107d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d8:	4770      	bx	lr

080107da <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80107da:	b580      	push	{r7, lr}
 80107dc:	b082      	sub	sp, #8
 80107de:	af00      	add	r7, sp, #0
 80107e0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2201      	movs	r2, #1
 80107e6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2200      	movs	r2, #0
 80107ee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2200      	movs	r2, #0
 80107f6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2201      	movs	r2, #1
 80107fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801080e:	2200      	movs	r2, #0
 8010810:	4619      	mov	r1, r3
 8010812:	f001 f85d 	bl	80118d0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8010816:	2300      	movs	r3, #0
}
 8010818:	4618      	mov	r0, r3
 801081a:	3708      	adds	r7, #8
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}

08010820 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b082      	sub	sp, #8
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2201      	movs	r2, #1
 801082c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2200      	movs	r2, #0
 8010834:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2200      	movs	r2, #0
 801083c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f003 fbda 	bl	8013ffa <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	791b      	ldrb	r3, [r3, #4]
 801084a:	4619      	mov	r1, r3
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f000 fecd 	bl	80115ec <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	795b      	ldrb	r3, [r3, #5]
 8010856:	4619      	mov	r1, r3
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f000 fec7 	bl	80115ec <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2201      	movs	r2, #1
 8010862:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010872:	2200      	movs	r2, #0
 8010874:	4619      	mov	r1, r3
 8010876:	f001 f82b 	bl	80118d0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 801087a:	2300      	movs	r3, #0
}
 801087c:	4618      	mov	r0, r3
 801087e:	3708      	adds	r7, #8
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}

08010884 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b086      	sub	sp, #24
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8010892:	f107 030c 	add.w	r3, r7, #12
 8010896:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801089a:	4618      	mov	r0, r3
 801089c:	f001 f858 	bl	8011950 <osMessageGet>
    if (event.status == osEventMessage)
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	2b10      	cmp	r3, #16
 80108a4:	d1f2      	bne.n	801088c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f7ff faa8 	bl	800fdfc <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80108ac:	e7ee      	b.n	801088c <USBH_Process_OS+0x8>

080108ae <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80108ae:	b580      	push	{r7, lr}
 80108b0:	b082      	sub	sp, #8
 80108b2:	af00      	add	r7, sp, #0
 80108b4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2201      	movs	r2, #1
 80108ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80108ca:	2200      	movs	r2, #0
 80108cc:	4619      	mov	r1, r3
 80108ce:	f000 ffff 	bl	80118d0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 80108d2:	2300      	movs	r3, #0
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	3708      	adds	r7, #8
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}

080108dc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b086      	sub	sp, #24
 80108e0:	af02      	add	r7, sp, #8
 80108e2:	6078      	str	r0, [r7, #4]
 80108e4:	460b      	mov	r3, r1
 80108e6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80108ee:	78fb      	ldrb	r3, [r7, #3]
 80108f0:	b29b      	uxth	r3, r3
 80108f2:	9300      	str	r3, [sp, #0]
 80108f4:	4613      	mov	r3, r2
 80108f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80108fa:	2100      	movs	r1, #0
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	f000 f864 	bl	80109ca <USBH_GetDescriptor>
 8010902:	4603      	mov	r3, r0
 8010904:	73fb      	strb	r3, [r7, #15]
 8010906:	7bfb      	ldrb	r3, [r7, #15]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d10a      	bne.n	8010922 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010918:	78fa      	ldrb	r2, [r7, #3]
 801091a:	b292      	uxth	r2, r2
 801091c:	4619      	mov	r1, r3
 801091e:	f000 f918 	bl	8010b52 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8010922:	7bfb      	ldrb	r3, [r7, #15]
}
 8010924:	4618      	mov	r0, r3
 8010926:	3710      	adds	r7, #16
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}

0801092c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 801092c:	b580      	push	{r7, lr}
 801092e:	b086      	sub	sp, #24
 8010930:	af02      	add	r7, sp, #8
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	460b      	mov	r3, r1
 8010936:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	331c      	adds	r3, #28
 801093c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 801093e:	887b      	ldrh	r3, [r7, #2]
 8010940:	9300      	str	r3, [sp, #0]
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010948:	2100      	movs	r1, #0
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f000 f83d 	bl	80109ca <USBH_GetDescriptor>
 8010950:	4603      	mov	r3, r0
 8010952:	72fb      	strb	r3, [r7, #11]
 8010954:	7afb      	ldrb	r3, [r7, #11]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d107      	bne.n	801096a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8010960:	887a      	ldrh	r2, [r7, #2]
 8010962:	68f9      	ldr	r1, [r7, #12]
 8010964:	4618      	mov	r0, r3
 8010966:	f000 f964 	bl	8010c32 <USBH_ParseCfgDesc>
  }

  return status;
 801096a:	7afb      	ldrb	r3, [r7, #11]
}
 801096c:	4618      	mov	r0, r3
 801096e:	3710      	adds	r7, #16
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}

08010974 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b088      	sub	sp, #32
 8010978:	af02      	add	r7, sp, #8
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	607a      	str	r2, [r7, #4]
 801097e:	461a      	mov	r2, r3
 8010980:	460b      	mov	r3, r1
 8010982:	72fb      	strb	r3, [r7, #11]
 8010984:	4613      	mov	r3, r2
 8010986:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8010988:	7afb      	ldrb	r3, [r7, #11]
 801098a:	b29b      	uxth	r3, r3
 801098c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8010990:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8010998:	893b      	ldrh	r3, [r7, #8]
 801099a:	9300      	str	r3, [sp, #0]
 801099c:	460b      	mov	r3, r1
 801099e:	2100      	movs	r1, #0
 80109a0:	68f8      	ldr	r0, [r7, #12]
 80109a2:	f000 f812 	bl	80109ca <USBH_GetDescriptor>
 80109a6:	4603      	mov	r3, r0
 80109a8:	75fb      	strb	r3, [r7, #23]
 80109aa:	7dfb      	ldrb	r3, [r7, #23]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d107      	bne.n	80109c0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80109b6:	893a      	ldrh	r2, [r7, #8]
 80109b8:	6879      	ldr	r1, [r7, #4]
 80109ba:	4618      	mov	r0, r3
 80109bc:	f000 fa37 	bl	8010e2e <USBH_ParseStringDesc>
  }

  return status;
 80109c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3718      	adds	r7, #24
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}

080109ca <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80109ca:	b580      	push	{r7, lr}
 80109cc:	b084      	sub	sp, #16
 80109ce:	af00      	add	r7, sp, #0
 80109d0:	60f8      	str	r0, [r7, #12]
 80109d2:	607b      	str	r3, [r7, #4]
 80109d4:	460b      	mov	r3, r1
 80109d6:	72fb      	strb	r3, [r7, #11]
 80109d8:	4613      	mov	r3, r2
 80109da:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	789b      	ldrb	r3, [r3, #2]
 80109e0:	2b01      	cmp	r3, #1
 80109e2:	d11c      	bne.n	8010a1e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80109e4:	7afb      	ldrb	r3, [r7, #11]
 80109e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80109ea:	b2da      	uxtb	r2, r3
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	2206      	movs	r2, #6
 80109f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	893a      	ldrh	r2, [r7, #8]
 80109fa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80109fc:	893b      	ldrh	r3, [r7, #8]
 80109fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010a06:	d104      	bne.n	8010a12 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	f240 4209 	movw	r2, #1033	; 0x409
 8010a0e:	829a      	strh	r2, [r3, #20]
 8010a10:	e002      	b.n	8010a18 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	2200      	movs	r2, #0
 8010a16:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	8b3a      	ldrh	r2, [r7, #24]
 8010a1c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8010a1e:	8b3b      	ldrh	r3, [r7, #24]
 8010a20:	461a      	mov	r2, r3
 8010a22:	6879      	ldr	r1, [r7, #4]
 8010a24:	68f8      	ldr	r0, [r7, #12]
 8010a26:	f000 fa50 	bl	8010eca <USBH_CtlReq>
 8010a2a:	4603      	mov	r3, r0
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3710      	adds	r7, #16
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b082      	sub	sp, #8
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	460b      	mov	r3, r1
 8010a3e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	789b      	ldrb	r3, [r3, #2]
 8010a44:	2b01      	cmp	r3, #1
 8010a46:	d10f      	bne.n	8010a68 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2205      	movs	r2, #5
 8010a52:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8010a54:	78fb      	ldrb	r3, [r7, #3]
 8010a56:	b29a      	uxth	r2, r3
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2200      	movs	r2, #0
 8010a60:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	2200      	movs	r2, #0
 8010a66:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8010a68:	2200      	movs	r2, #0
 8010a6a:	2100      	movs	r1, #0
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	f000 fa2c 	bl	8010eca <USBH_CtlReq>
 8010a72:	4603      	mov	r3, r0
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	3708      	adds	r7, #8
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}

08010a7c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
 8010a84:	460b      	mov	r3, r1
 8010a86:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	789b      	ldrb	r3, [r3, #2]
 8010a8c:	2b01      	cmp	r3, #1
 8010a8e:	d10e      	bne.n	8010aae <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2200      	movs	r2, #0
 8010a94:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2209      	movs	r2, #9
 8010a9a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	887a      	ldrh	r2, [r7, #2]
 8010aa0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2200      	movs	r2, #0
 8010aac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8010aae:	2200      	movs	r2, #0
 8010ab0:	2100      	movs	r1, #0
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	f000 fa09 	bl	8010eca <USBH_CtlReq>
 8010ab8:	4603      	mov	r3, r0
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3708      	adds	r7, #8
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}

08010ac2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8010ac2:	b580      	push	{r7, lr}
 8010ac4:	b082      	sub	sp, #8
 8010ac6:	af00      	add	r7, sp, #0
 8010ac8:	6078      	str	r0, [r7, #4]
 8010aca:	460b      	mov	r3, r1
 8010acc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	789b      	ldrb	r3, [r3, #2]
 8010ad2:	2b01      	cmp	r3, #1
 8010ad4:	d10f      	bne.n	8010af6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2203      	movs	r2, #3
 8010ae0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8010ae2:	78fb      	ldrb	r3, [r7, #3]
 8010ae4:	b29a      	uxth	r2, r3
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	2200      	movs	r2, #0
 8010aee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2200      	movs	r2, #0
 8010af4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8010af6:	2200      	movs	r2, #0
 8010af8:	2100      	movs	r1, #0
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f000 f9e5 	bl	8010eca <USBH_CtlReq>
 8010b00:	4603      	mov	r3, r0
}
 8010b02:	4618      	mov	r0, r3
 8010b04:	3708      	adds	r7, #8
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}

08010b0a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8010b0a:	b580      	push	{r7, lr}
 8010b0c:	b082      	sub	sp, #8
 8010b0e:	af00      	add	r7, sp, #0
 8010b10:	6078      	str	r0, [r7, #4]
 8010b12:	460b      	mov	r3, r1
 8010b14:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	789b      	ldrb	r3, [r3, #2]
 8010b1a:	2b01      	cmp	r3, #1
 8010b1c:	d10f      	bne.n	8010b3e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2202      	movs	r2, #2
 8010b22:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2201      	movs	r2, #1
 8010b28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8010b30:	78fb      	ldrb	r3, [r7, #3]
 8010b32:	b29a      	uxth	r2, r3
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8010b3e:	2200      	movs	r2, #0
 8010b40:	2100      	movs	r1, #0
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f000 f9c1 	bl	8010eca <USBH_CtlReq>
 8010b48:	4603      	mov	r3, r0
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	3708      	adds	r7, #8
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd80      	pop	{r7, pc}

08010b52 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8010b52:	b480      	push	{r7}
 8010b54:	b085      	sub	sp, #20
 8010b56:	af00      	add	r7, sp, #0
 8010b58:	60f8      	str	r0, [r7, #12]
 8010b5a:	60b9      	str	r1, [r7, #8]
 8010b5c:	4613      	mov	r3, r2
 8010b5e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	781a      	ldrb	r2, [r3, #0]
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	785a      	ldrb	r2, [r3, #1]
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	3302      	adds	r3, #2
 8010b74:	781b      	ldrb	r3, [r3, #0]
 8010b76:	b29a      	uxth	r2, r3
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	3303      	adds	r3, #3
 8010b7c:	781b      	ldrb	r3, [r3, #0]
 8010b7e:	b29b      	uxth	r3, r3
 8010b80:	021b      	lsls	r3, r3, #8
 8010b82:	b29b      	uxth	r3, r3
 8010b84:	4313      	orrs	r3, r2
 8010b86:	b29a      	uxth	r2, r3
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	791a      	ldrb	r2, [r3, #4]
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	795a      	ldrb	r2, [r3, #5]
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	799a      	ldrb	r2, [r3, #6]
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	79da      	ldrb	r2, [r3, #7]
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8010bac:	88fb      	ldrh	r3, [r7, #6]
 8010bae:	2b08      	cmp	r3, #8
 8010bb0:	d939      	bls.n	8010c26 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	3308      	adds	r3, #8
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	b29a      	uxth	r2, r3
 8010bba:	68bb      	ldr	r3, [r7, #8]
 8010bbc:	3309      	adds	r3, #9
 8010bbe:	781b      	ldrb	r3, [r3, #0]
 8010bc0:	b29b      	uxth	r3, r3
 8010bc2:	021b      	lsls	r3, r3, #8
 8010bc4:	b29b      	uxth	r3, r3
 8010bc6:	4313      	orrs	r3, r2
 8010bc8:	b29a      	uxth	r2, r3
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	330a      	adds	r3, #10
 8010bd2:	781b      	ldrb	r3, [r3, #0]
 8010bd4:	b29a      	uxth	r2, r3
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	330b      	adds	r3, #11
 8010bda:	781b      	ldrb	r3, [r3, #0]
 8010bdc:	b29b      	uxth	r3, r3
 8010bde:	021b      	lsls	r3, r3, #8
 8010be0:	b29b      	uxth	r3, r3
 8010be2:	4313      	orrs	r3, r2
 8010be4:	b29a      	uxth	r2, r3
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8010bea:	68bb      	ldr	r3, [r7, #8]
 8010bec:	330c      	adds	r3, #12
 8010bee:	781b      	ldrb	r3, [r3, #0]
 8010bf0:	b29a      	uxth	r2, r3
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	330d      	adds	r3, #13
 8010bf6:	781b      	ldrb	r3, [r3, #0]
 8010bf8:	b29b      	uxth	r3, r3
 8010bfa:	021b      	lsls	r3, r3, #8
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	4313      	orrs	r3, r2
 8010c00:	b29a      	uxth	r2, r3
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	7b9a      	ldrb	r2, [r3, #14]
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	7bda      	ldrb	r2, [r3, #15]
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8010c16:	68bb      	ldr	r3, [r7, #8]
 8010c18:	7c1a      	ldrb	r2, [r3, #16]
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	7c5a      	ldrb	r2, [r3, #17]
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	745a      	strb	r2, [r3, #17]
  }
}
 8010c26:	bf00      	nop
 8010c28:	3714      	adds	r7, #20
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c30:	4770      	bx	lr

08010c32 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8010c32:	b580      	push	{r7, lr}
 8010c34:	b08a      	sub	sp, #40	; 0x28
 8010c36:	af00      	add	r7, sp, #0
 8010c38:	60f8      	str	r0, [r7, #12]
 8010c3a:	60b9      	str	r1, [r7, #8]
 8010c3c:	4613      	mov	r3, r2
 8010c3e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8010c44:	2300      	movs	r3, #0
 8010c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	781a      	ldrb	r2, [r3, #0]
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	785a      	ldrb	r2, [r3, #1]
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	3302      	adds	r3, #2
 8010c68:	781b      	ldrb	r3, [r3, #0]
 8010c6a:	b29a      	uxth	r2, r3
 8010c6c:	68bb      	ldr	r3, [r7, #8]
 8010c6e:	3303      	adds	r3, #3
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	b29b      	uxth	r3, r3
 8010c74:	021b      	lsls	r3, r3, #8
 8010c76:	b29b      	uxth	r3, r3
 8010c78:	4313      	orrs	r3, r2
 8010c7a:	b29a      	uxth	r2, r3
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	791a      	ldrb	r2, [r3, #4]
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	795a      	ldrb	r2, [r3, #5]
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	799a      	ldrb	r2, [r3, #6]
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	79da      	ldrb	r2, [r3, #7]
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	7a1a      	ldrb	r2, [r3, #8]
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8010ca8:	88fb      	ldrh	r3, [r7, #6]
 8010caa:	2b09      	cmp	r3, #9
 8010cac:	d95f      	bls.n	8010d6e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8010cae:	2309      	movs	r3, #9
 8010cb0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010cb6:	e051      	b.n	8010d5c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010cb8:	f107 0316 	add.w	r3, r7, #22
 8010cbc:	4619      	mov	r1, r3
 8010cbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010cc0:	f000 f8e8 	bl	8010e94 <USBH_GetNextDesc>
 8010cc4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8010cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc8:	785b      	ldrb	r3, [r3, #1]
 8010cca:	2b04      	cmp	r3, #4
 8010ccc:	d146      	bne.n	8010d5c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8010cce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010cd2:	221a      	movs	r2, #26
 8010cd4:	fb02 f303 	mul.w	r3, r2, r3
 8010cd8:	3308      	adds	r3, #8
 8010cda:	68fa      	ldr	r2, [r7, #12]
 8010cdc:	4413      	add	r3, r2
 8010cde:	3302      	adds	r3, #2
 8010ce0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8010ce2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ce4:	69f8      	ldr	r0, [r7, #28]
 8010ce6:	f000 f846 	bl	8010d76 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8010cea:	2300      	movs	r3, #0
 8010cec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010cf4:	e022      	b.n	8010d3c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010cf6:	f107 0316 	add.w	r3, r7, #22
 8010cfa:	4619      	mov	r1, r3
 8010cfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010cfe:	f000 f8c9 	bl	8010e94 <USBH_GetNextDesc>
 8010d02:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8010d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d06:	785b      	ldrb	r3, [r3, #1]
 8010d08:	2b05      	cmp	r3, #5
 8010d0a:	d117      	bne.n	8010d3c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8010d0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010d10:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010d14:	3201      	adds	r2, #1
 8010d16:	00d2      	lsls	r2, r2, #3
 8010d18:	211a      	movs	r1, #26
 8010d1a:	fb01 f303 	mul.w	r3, r1, r3
 8010d1e:	4413      	add	r3, r2
 8010d20:	3308      	adds	r3, #8
 8010d22:	68fa      	ldr	r2, [r7, #12]
 8010d24:	4413      	add	r3, r2
 8010d26:	3304      	adds	r3, #4
 8010d28:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8010d2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d2c:	69b8      	ldr	r0, [r7, #24]
 8010d2e:	f000 f851 	bl	8010dd4 <USBH_ParseEPDesc>
            ep_ix++;
 8010d32:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010d36:	3301      	adds	r3, #1
 8010d38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010d3c:	69fb      	ldr	r3, [r7, #28]
 8010d3e:	791b      	ldrb	r3, [r3, #4]
 8010d40:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010d44:	429a      	cmp	r2, r3
 8010d46:	d204      	bcs.n	8010d52 <USBH_ParseCfgDesc+0x120>
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	885a      	ldrh	r2, [r3, #2]
 8010d4c:	8afb      	ldrh	r3, [r7, #22]
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	d8d1      	bhi.n	8010cf6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8010d52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010d56:	3301      	adds	r3, #1
 8010d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010d60:	2b01      	cmp	r3, #1
 8010d62:	d804      	bhi.n	8010d6e <USBH_ParseCfgDesc+0x13c>
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	885a      	ldrh	r2, [r3, #2]
 8010d68:	8afb      	ldrh	r3, [r7, #22]
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d8a4      	bhi.n	8010cb8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8010d6e:	bf00      	nop
 8010d70:	3728      	adds	r7, #40	; 0x28
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}

08010d76 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8010d76:	b480      	push	{r7}
 8010d78:	b083      	sub	sp, #12
 8010d7a:	af00      	add	r7, sp, #0
 8010d7c:	6078      	str	r0, [r7, #4]
 8010d7e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	781a      	ldrb	r2, [r3, #0]
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	785a      	ldrb	r2, [r3, #1]
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	789a      	ldrb	r2, [r3, #2]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	78da      	ldrb	r2, [r3, #3]
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	791a      	ldrb	r2, [r3, #4]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	795a      	ldrb	r2, [r3, #5]
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	799a      	ldrb	r2, [r3, #6]
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8010db8:	683b      	ldr	r3, [r7, #0]
 8010dba:	79da      	ldrb	r2, [r3, #7]
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	7a1a      	ldrb	r2, [r3, #8]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	721a      	strb	r2, [r3, #8]
}
 8010dc8:	bf00      	nop
 8010dca:	370c      	adds	r7, #12
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd2:	4770      	bx	lr

08010dd4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8010dd4:	b480      	push	{r7}
 8010dd6:	b083      	sub	sp, #12
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	781a      	ldrb	r2, [r3, #0]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	785a      	ldrb	r2, [r3, #1]
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	789a      	ldrb	r2, [r3, #2]
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8010df6:	683b      	ldr	r3, [r7, #0]
 8010df8:	78da      	ldrb	r2, [r3, #3]
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	3304      	adds	r3, #4
 8010e02:	781b      	ldrb	r3, [r3, #0]
 8010e04:	b29a      	uxth	r2, r3
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	3305      	adds	r3, #5
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	021b      	lsls	r3, r3, #8
 8010e10:	b29b      	uxth	r3, r3
 8010e12:	4313      	orrs	r3, r2
 8010e14:	b29a      	uxth	r2, r3
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	799a      	ldrb	r2, [r3, #6]
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	719a      	strb	r2, [r3, #6]
}
 8010e22:	bf00      	nop
 8010e24:	370c      	adds	r7, #12
 8010e26:	46bd      	mov	sp, r7
 8010e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2c:	4770      	bx	lr

08010e2e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8010e2e:	b480      	push	{r7}
 8010e30:	b087      	sub	sp, #28
 8010e32:	af00      	add	r7, sp, #0
 8010e34:	60f8      	str	r0, [r7, #12]
 8010e36:	60b9      	str	r1, [r7, #8]
 8010e38:	4613      	mov	r3, r2
 8010e3a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	3301      	adds	r3, #1
 8010e40:	781b      	ldrb	r3, [r3, #0]
 8010e42:	2b03      	cmp	r3, #3
 8010e44:	d120      	bne.n	8010e88 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	781b      	ldrb	r3, [r3, #0]
 8010e4a:	1e9a      	subs	r2, r3, #2
 8010e4c:	88fb      	ldrh	r3, [r7, #6]
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	bf28      	it	cs
 8010e52:	4613      	movcs	r3, r2
 8010e54:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	3302      	adds	r3, #2
 8010e5a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	82fb      	strh	r3, [r7, #22]
 8010e60:	e00b      	b.n	8010e7a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8010e62:	8afb      	ldrh	r3, [r7, #22]
 8010e64:	68fa      	ldr	r2, [r7, #12]
 8010e66:	4413      	add	r3, r2
 8010e68:	781a      	ldrb	r2, [r3, #0]
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8010e6e:	68bb      	ldr	r3, [r7, #8]
 8010e70:	3301      	adds	r3, #1
 8010e72:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8010e74:	8afb      	ldrh	r3, [r7, #22]
 8010e76:	3302      	adds	r3, #2
 8010e78:	82fb      	strh	r3, [r7, #22]
 8010e7a:	8afa      	ldrh	r2, [r7, #22]
 8010e7c:	8abb      	ldrh	r3, [r7, #20]
 8010e7e:	429a      	cmp	r2, r3
 8010e80:	d3ef      	bcc.n	8010e62 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	2200      	movs	r2, #0
 8010e86:	701a      	strb	r2, [r3, #0]
  }
}
 8010e88:	bf00      	nop
 8010e8a:	371c      	adds	r7, #28
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e92:	4770      	bx	lr

08010e94 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8010e94:	b480      	push	{r7}
 8010e96:	b085      	sub	sp, #20
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	881a      	ldrh	r2, [r3, #0]
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	781b      	ldrb	r3, [r3, #0]
 8010ea6:	b29b      	uxth	r3, r3
 8010ea8:	4413      	add	r3, r2
 8010eaa:	b29a      	uxth	r2, r3
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	781b      	ldrb	r3, [r3, #0]
 8010eb4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	4413      	add	r3, r2
 8010eba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010ebc:	68fb      	ldr	r3, [r7, #12]
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	3714      	adds	r7, #20
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec8:	4770      	bx	lr

08010eca <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8010eca:	b580      	push	{r7, lr}
 8010ecc:	b086      	sub	sp, #24
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	60f8      	str	r0, [r7, #12]
 8010ed2:	60b9      	str	r1, [r7, #8]
 8010ed4:	4613      	mov	r3, r2
 8010ed6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8010ed8:	2301      	movs	r3, #1
 8010eda:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	789b      	ldrb	r3, [r3, #2]
 8010ee0:	2b01      	cmp	r3, #1
 8010ee2:	d002      	beq.n	8010eea <USBH_CtlReq+0x20>
 8010ee4:	2b02      	cmp	r3, #2
 8010ee6:	d01d      	beq.n	8010f24 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8010ee8:	e043      	b.n	8010f72 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	68ba      	ldr	r2, [r7, #8]
 8010eee:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	88fa      	ldrh	r2, [r7, #6]
 8010ef4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	2201      	movs	r2, #1
 8010efa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	2202      	movs	r2, #2
 8010f00:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8010f02:	2301      	movs	r3, #1
 8010f04:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	2203      	movs	r2, #3
 8010f0a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	f000 fcd7 	bl	80118d0 <osMessagePut>
      break;
 8010f22:	e026      	b.n	8010f72 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8010f24:	68f8      	ldr	r0, [r7, #12]
 8010f26:	f000 f829 	bl	8010f7c <USBH_HandleControl>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8010f2e:	7dfb      	ldrb	r3, [r7, #23]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d002      	beq.n	8010f3a <USBH_CtlReq+0x70>
 8010f34:	7dfb      	ldrb	r3, [r7, #23]
 8010f36:	2b03      	cmp	r3, #3
 8010f38:	d106      	bne.n	8010f48 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	2201      	movs	r2, #1
 8010f3e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	2200      	movs	r2, #0
 8010f44:	761a      	strb	r2, [r3, #24]
 8010f46:	e005      	b.n	8010f54 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8010f48:	7dfb      	ldrb	r3, [r7, #23]
 8010f4a:	2b02      	cmp	r3, #2
 8010f4c:	d102      	bne.n	8010f54 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	2201      	movs	r2, #1
 8010f52:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	2203      	movs	r2, #3
 8010f58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010f68:	2200      	movs	r2, #0
 8010f6a:	4619      	mov	r1, r3
 8010f6c:	f000 fcb0 	bl	80118d0 <osMessagePut>
      break;
 8010f70:	bf00      	nop
  }
  return status;
 8010f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f74:	4618      	mov	r0, r3
 8010f76:	3718      	adds	r7, #24
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}

08010f7c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b086      	sub	sp, #24
 8010f80:	af02      	add	r7, sp, #8
 8010f82:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010f84:	2301      	movs	r3, #1
 8010f86:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010f88:	2300      	movs	r3, #0
 8010f8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	7e1b      	ldrb	r3, [r3, #24]
 8010f90:	3b01      	subs	r3, #1
 8010f92:	2b0a      	cmp	r3, #10
 8010f94:	f200 8229 	bhi.w	80113ea <USBH_HandleControl+0x46e>
 8010f98:	a201      	add	r2, pc, #4	; (adr r2, 8010fa0 <USBH_HandleControl+0x24>)
 8010f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f9e:	bf00      	nop
 8010fa0:	08010fcd 	.word	0x08010fcd
 8010fa4:	08010fe7 	.word	0x08010fe7
 8010fa8:	08011089 	.word	0x08011089
 8010fac:	080110af 	.word	0x080110af
 8010fb0:	0801113b 	.word	0x0801113b
 8010fb4:	08011165 	.word	0x08011165
 8010fb8:	08011227 	.word	0x08011227
 8010fbc:	08011249 	.word	0x08011249
 8010fc0:	080112db 	.word	0x080112db
 8010fc4:	08011301 	.word	0x08011301
 8010fc8:	08011393 	.word	0x08011393
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f103 0110 	add.w	r1, r3, #16
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	795b      	ldrb	r3, [r3, #5]
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f000 fa17 	bl	801140c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	2202      	movs	r2, #2
 8010fe2:	761a      	strb	r2, [r3, #24]
      break;
 8010fe4:	e20c      	b.n	8011400 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	795b      	ldrb	r3, [r3, #5]
 8010fea:	4619      	mov	r1, r3
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f003 f8f3 	bl	80141d8 <USBH_LL_GetURBState>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8010ff6:	7bbb      	ldrb	r3, [r7, #14]
 8010ff8:	2b01      	cmp	r3, #1
 8010ffa:	d12c      	bne.n	8011056 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	7c1b      	ldrb	r3, [r3, #16]
 8011000:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011004:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	8adb      	ldrh	r3, [r3, #22]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d00a      	beq.n	8011024 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801100e:	7b7b      	ldrb	r3, [r7, #13]
 8011010:	2b80      	cmp	r3, #128	; 0x80
 8011012:	d103      	bne.n	801101c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2203      	movs	r2, #3
 8011018:	761a      	strb	r2, [r3, #24]
 801101a:	e00d      	b.n	8011038 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2205      	movs	r2, #5
 8011020:	761a      	strb	r2, [r3, #24]
 8011022:	e009      	b.n	8011038 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8011024:	7b7b      	ldrb	r3, [r7, #13]
 8011026:	2b80      	cmp	r3, #128	; 0x80
 8011028:	d103      	bne.n	8011032 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2209      	movs	r2, #9
 801102e:	761a      	strb	r2, [r3, #24]
 8011030:	e002      	b.n	8011038 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	2207      	movs	r2, #7
 8011036:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	2203      	movs	r2, #3
 801103c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801104c:	2200      	movs	r2, #0
 801104e:	4619      	mov	r1, r3
 8011050:	f000 fc3e 	bl	80118d0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8011054:	e1cb      	b.n	80113ee <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8011056:	7bbb      	ldrb	r3, [r7, #14]
 8011058:	2b04      	cmp	r3, #4
 801105a:	d003      	beq.n	8011064 <USBH_HandleControl+0xe8>
 801105c:	7bbb      	ldrb	r3, [r7, #14]
 801105e:	2b02      	cmp	r3, #2
 8011060:	f040 81c5 	bne.w	80113ee <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	220b      	movs	r2, #11
 8011068:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2203      	movs	r2, #3
 801106e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801107e:	2200      	movs	r2, #0
 8011080:	4619      	mov	r1, r3
 8011082:	f000 fc25 	bl	80118d0 <osMessagePut>
      break;
 8011086:	e1b2      	b.n	80113ee <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801108e:	b29a      	uxth	r2, r3
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	6899      	ldr	r1, [r3, #8]
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	899a      	ldrh	r2, [r3, #12]
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	791b      	ldrb	r3, [r3, #4]
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f000 f9f2 	bl	801148a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	2204      	movs	r2, #4
 80110aa:	761a      	strb	r2, [r3, #24]
      break;
 80110ac:	e1a8      	b.n	8011400 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	791b      	ldrb	r3, [r3, #4]
 80110b2:	4619      	mov	r1, r3
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f003 f88f 	bl	80141d8 <USBH_LL_GetURBState>
 80110ba:	4603      	mov	r3, r0
 80110bc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80110be:	7bbb      	ldrb	r3, [r7, #14]
 80110c0:	2b01      	cmp	r3, #1
 80110c2:	d110      	bne.n	80110e6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2209      	movs	r2, #9
 80110c8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2203      	movs	r2, #3
 80110ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80110de:	2200      	movs	r2, #0
 80110e0:	4619      	mov	r1, r3
 80110e2:	f000 fbf5 	bl	80118d0 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80110e6:	7bbb      	ldrb	r3, [r7, #14]
 80110e8:	2b05      	cmp	r3, #5
 80110ea:	d110      	bne.n	801110e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80110ec:	2303      	movs	r3, #3
 80110ee:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2203      	movs	r2, #3
 80110f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011104:	2200      	movs	r2, #0
 8011106:	4619      	mov	r1, r3
 8011108:	f000 fbe2 	bl	80118d0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801110c:	e171      	b.n	80113f2 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 801110e:	7bbb      	ldrb	r3, [r7, #14]
 8011110:	2b04      	cmp	r3, #4
 8011112:	f040 816e 	bne.w	80113f2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	220b      	movs	r2, #11
 801111a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2203      	movs	r2, #3
 8011120:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011130:	2200      	movs	r2, #0
 8011132:	4619      	mov	r1, r3
 8011134:	f000 fbcc 	bl	80118d0 <osMessagePut>
      break;
 8011138:	e15b      	b.n	80113f2 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6899      	ldr	r1, [r3, #8]
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	899a      	ldrh	r2, [r3, #12]
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	795b      	ldrb	r3, [r3, #5]
 8011146:	2001      	movs	r0, #1
 8011148:	9000      	str	r0, [sp, #0]
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f000 f978 	bl	8011440 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011156:	b29a      	uxth	r2, r3
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2206      	movs	r2, #6
 8011160:	761a      	strb	r2, [r3, #24]
      break;
 8011162:	e14d      	b.n	8011400 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	795b      	ldrb	r3, [r3, #5]
 8011168:	4619      	mov	r1, r3
 801116a:	6878      	ldr	r0, [r7, #4]
 801116c:	f003 f834 	bl	80141d8 <USBH_LL_GetURBState>
 8011170:	4603      	mov	r3, r0
 8011172:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8011174:	7bbb      	ldrb	r3, [r7, #14]
 8011176:	2b01      	cmp	r3, #1
 8011178:	d111      	bne.n	801119e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2207      	movs	r2, #7
 801117e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2203      	movs	r2, #3
 8011184:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011194:	2200      	movs	r2, #0
 8011196:	4619      	mov	r1, r3
 8011198:	f000 fb9a 	bl	80118d0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801119c:	e12b      	b.n	80113f6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 801119e:	7bbb      	ldrb	r3, [r7, #14]
 80111a0:	2b05      	cmp	r3, #5
 80111a2:	d113      	bne.n	80111cc <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	220c      	movs	r2, #12
 80111a8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80111aa:	2303      	movs	r3, #3
 80111ac:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	2203      	movs	r2, #3
 80111b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80111c2:	2200      	movs	r2, #0
 80111c4:	4619      	mov	r1, r3
 80111c6:	f000 fb83 	bl	80118d0 <osMessagePut>
      break;
 80111ca:	e114      	b.n	80113f6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80111cc:	7bbb      	ldrb	r3, [r7, #14]
 80111ce:	2b02      	cmp	r3, #2
 80111d0:	d111      	bne.n	80111f6 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2205      	movs	r2, #5
 80111d6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	2203      	movs	r2, #3
 80111dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80111ec:	2200      	movs	r2, #0
 80111ee:	4619      	mov	r1, r3
 80111f0:	f000 fb6e 	bl	80118d0 <osMessagePut>
      break;
 80111f4:	e0ff      	b.n	80113f6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80111f6:	7bbb      	ldrb	r3, [r7, #14]
 80111f8:	2b04      	cmp	r3, #4
 80111fa:	f040 80fc 	bne.w	80113f6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	220b      	movs	r2, #11
 8011202:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8011204:	2302      	movs	r3, #2
 8011206:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2203      	movs	r2, #3
 801120c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801121c:	2200      	movs	r2, #0
 801121e:	4619      	mov	r1, r3
 8011220:	f000 fb56 	bl	80118d0 <osMessagePut>
      break;
 8011224:	e0e7      	b.n	80113f6 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	791b      	ldrb	r3, [r3, #4]
 801122a:	2200      	movs	r2, #0
 801122c:	2100      	movs	r1, #0
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	f000 f92b 	bl	801148a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801123a:	b29a      	uxth	r2, r3
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2208      	movs	r2, #8
 8011244:	761a      	strb	r2, [r3, #24]

      break;
 8011246:	e0db      	b.n	8011400 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	791b      	ldrb	r3, [r3, #4]
 801124c:	4619      	mov	r1, r3
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f002 ffc2 	bl	80141d8 <USBH_LL_GetURBState>
 8011254:	4603      	mov	r3, r0
 8011256:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8011258:	7bbb      	ldrb	r3, [r7, #14]
 801125a:	2b01      	cmp	r3, #1
 801125c:	d113      	bne.n	8011286 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	220d      	movs	r2, #13
 8011262:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8011264:	2300      	movs	r3, #0
 8011266:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2203      	movs	r2, #3
 801126c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801127c:	2200      	movs	r2, #0
 801127e:	4619      	mov	r1, r3
 8011280:	f000 fb26 	bl	80118d0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8011284:	e0b9      	b.n	80113fa <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8011286:	7bbb      	ldrb	r3, [r7, #14]
 8011288:	2b04      	cmp	r3, #4
 801128a:	d111      	bne.n	80112b0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	220b      	movs	r2, #11
 8011290:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	2203      	movs	r2, #3
 8011296:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80112a6:	2200      	movs	r2, #0
 80112a8:	4619      	mov	r1, r3
 80112aa:	f000 fb11 	bl	80118d0 <osMessagePut>
      break;
 80112ae:	e0a4      	b.n	80113fa <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80112b0:	7bbb      	ldrb	r3, [r7, #14]
 80112b2:	2b05      	cmp	r3, #5
 80112b4:	f040 80a1 	bne.w	80113fa <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80112b8:	2303      	movs	r3, #3
 80112ba:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	2203      	movs	r2, #3
 80112c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80112d0:	2200      	movs	r2, #0
 80112d2:	4619      	mov	r1, r3
 80112d4:	f000 fafc 	bl	80118d0 <osMessagePut>
      break;
 80112d8:	e08f      	b.n	80113fa <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	795b      	ldrb	r3, [r3, #5]
 80112de:	2201      	movs	r2, #1
 80112e0:	9200      	str	r2, [sp, #0]
 80112e2:	2200      	movs	r2, #0
 80112e4:	2100      	movs	r1, #0
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	f000 f8aa 	bl	8011440 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80112f2:	b29a      	uxth	r2, r3
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	220a      	movs	r2, #10
 80112fc:	761a      	strb	r2, [r3, #24]
      break;
 80112fe:	e07f      	b.n	8011400 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	795b      	ldrb	r3, [r3, #5]
 8011304:	4619      	mov	r1, r3
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f002 ff66 	bl	80141d8 <USBH_LL_GetURBState>
 801130c:	4603      	mov	r3, r0
 801130e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8011310:	7bbb      	ldrb	r3, [r7, #14]
 8011312:	2b01      	cmp	r3, #1
 8011314:	d113      	bne.n	801133e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8011316:	2300      	movs	r3, #0
 8011318:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	220d      	movs	r2, #13
 801131e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2203      	movs	r2, #3
 8011324:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011334:	2200      	movs	r2, #0
 8011336:	4619      	mov	r1, r3
 8011338:	f000 faca 	bl	80118d0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801133c:	e05f      	b.n	80113fe <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 801133e:	7bbb      	ldrb	r3, [r7, #14]
 8011340:	2b02      	cmp	r3, #2
 8011342:	d111      	bne.n	8011368 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2209      	movs	r2, #9
 8011348:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	2203      	movs	r2, #3
 801134e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801135e:	2200      	movs	r2, #0
 8011360:	4619      	mov	r1, r3
 8011362:	f000 fab5 	bl	80118d0 <osMessagePut>
      break;
 8011366:	e04a      	b.n	80113fe <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8011368:	7bbb      	ldrb	r3, [r7, #14]
 801136a:	2b04      	cmp	r3, #4
 801136c:	d147      	bne.n	80113fe <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	220b      	movs	r2, #11
 8011372:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2203      	movs	r2, #3
 8011378:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011388:	2200      	movs	r2, #0
 801138a:	4619      	mov	r1, r3
 801138c:	f000 faa0 	bl	80118d0 <osMessagePut>
      break;
 8011390:	e035      	b.n	80113fe <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	7e5b      	ldrb	r3, [r3, #25]
 8011396:	3301      	adds	r3, #1
 8011398:	b2da      	uxtb	r2, r3
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	765a      	strb	r2, [r3, #25]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	7e5b      	ldrb	r3, [r3, #25]
 80113a2:	2b02      	cmp	r3, #2
 80113a4:	d806      	bhi.n	80113b4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	2201      	movs	r2, #1
 80113aa:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	2201      	movs	r2, #1
 80113b0:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80113b2:	e025      	b.n	8011400 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80113ba:	2106      	movs	r1, #6
 80113bc:	6878      	ldr	r0, [r7, #4]
 80113be:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2200      	movs	r2, #0
 80113c4:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	795b      	ldrb	r3, [r3, #5]
 80113ca:	4619      	mov	r1, r3
 80113cc:	6878      	ldr	r0, [r7, #4]
 80113ce:	f000 f90d 	bl	80115ec <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	791b      	ldrb	r3, [r3, #4]
 80113d6:	4619      	mov	r1, r3
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f000 f907 	bl	80115ec <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	2200      	movs	r2, #0
 80113e2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80113e4:	2302      	movs	r3, #2
 80113e6:	73fb      	strb	r3, [r7, #15]
      break;
 80113e8:	e00a      	b.n	8011400 <USBH_HandleControl+0x484>

    default:
      break;
 80113ea:	bf00      	nop
 80113ec:	e008      	b.n	8011400 <USBH_HandleControl+0x484>
      break;
 80113ee:	bf00      	nop
 80113f0:	e006      	b.n	8011400 <USBH_HandleControl+0x484>
      break;
 80113f2:	bf00      	nop
 80113f4:	e004      	b.n	8011400 <USBH_HandleControl+0x484>
      break;
 80113f6:	bf00      	nop
 80113f8:	e002      	b.n	8011400 <USBH_HandleControl+0x484>
      break;
 80113fa:	bf00      	nop
 80113fc:	e000      	b.n	8011400 <USBH_HandleControl+0x484>
      break;
 80113fe:	bf00      	nop
  }

  return status;
 8011400:	7bfb      	ldrb	r3, [r7, #15]
}
 8011402:	4618      	mov	r0, r3
 8011404:	3710      	adds	r7, #16
 8011406:	46bd      	mov	sp, r7
 8011408:	bd80      	pop	{r7, pc}
 801140a:	bf00      	nop

0801140c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b088      	sub	sp, #32
 8011410:	af04      	add	r7, sp, #16
 8011412:	60f8      	str	r0, [r7, #12]
 8011414:	60b9      	str	r1, [r7, #8]
 8011416:	4613      	mov	r3, r2
 8011418:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801141a:	79f9      	ldrb	r1, [r7, #7]
 801141c:	2300      	movs	r3, #0
 801141e:	9303      	str	r3, [sp, #12]
 8011420:	2308      	movs	r3, #8
 8011422:	9302      	str	r3, [sp, #8]
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	9301      	str	r3, [sp, #4]
 8011428:	2300      	movs	r3, #0
 801142a:	9300      	str	r3, [sp, #0]
 801142c:	2300      	movs	r3, #0
 801142e:	2200      	movs	r2, #0
 8011430:	68f8      	ldr	r0, [r7, #12]
 8011432:	f002 fea0 	bl	8014176 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8011436:	2300      	movs	r3, #0
}
 8011438:	4618      	mov	r0, r3
 801143a:	3710      	adds	r7, #16
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}

08011440 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b088      	sub	sp, #32
 8011444:	af04      	add	r7, sp, #16
 8011446:	60f8      	str	r0, [r7, #12]
 8011448:	60b9      	str	r1, [r7, #8]
 801144a:	4611      	mov	r1, r2
 801144c:	461a      	mov	r2, r3
 801144e:	460b      	mov	r3, r1
 8011450:	80fb      	strh	r3, [r7, #6]
 8011452:	4613      	mov	r3, r2
 8011454:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801145c:	2b00      	cmp	r3, #0
 801145e:	d001      	beq.n	8011464 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8011460:	2300      	movs	r3, #0
 8011462:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8011464:	7979      	ldrb	r1, [r7, #5]
 8011466:	7e3b      	ldrb	r3, [r7, #24]
 8011468:	9303      	str	r3, [sp, #12]
 801146a:	88fb      	ldrh	r3, [r7, #6]
 801146c:	9302      	str	r3, [sp, #8]
 801146e:	68bb      	ldr	r3, [r7, #8]
 8011470:	9301      	str	r3, [sp, #4]
 8011472:	2301      	movs	r3, #1
 8011474:	9300      	str	r3, [sp, #0]
 8011476:	2300      	movs	r3, #0
 8011478:	2200      	movs	r2, #0
 801147a:	68f8      	ldr	r0, [r7, #12]
 801147c:	f002 fe7b 	bl	8014176 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8011480:	2300      	movs	r3, #0
}
 8011482:	4618      	mov	r0, r3
 8011484:	3710      	adds	r7, #16
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}

0801148a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801148a:	b580      	push	{r7, lr}
 801148c:	b088      	sub	sp, #32
 801148e:	af04      	add	r7, sp, #16
 8011490:	60f8      	str	r0, [r7, #12]
 8011492:	60b9      	str	r1, [r7, #8]
 8011494:	4611      	mov	r1, r2
 8011496:	461a      	mov	r2, r3
 8011498:	460b      	mov	r3, r1
 801149a:	80fb      	strh	r3, [r7, #6]
 801149c:	4613      	mov	r3, r2
 801149e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80114a0:	7979      	ldrb	r1, [r7, #5]
 80114a2:	2300      	movs	r3, #0
 80114a4:	9303      	str	r3, [sp, #12]
 80114a6:	88fb      	ldrh	r3, [r7, #6]
 80114a8:	9302      	str	r3, [sp, #8]
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	9301      	str	r3, [sp, #4]
 80114ae:	2301      	movs	r3, #1
 80114b0:	9300      	str	r3, [sp, #0]
 80114b2:	2300      	movs	r3, #0
 80114b4:	2201      	movs	r2, #1
 80114b6:	68f8      	ldr	r0, [r7, #12]
 80114b8:	f002 fe5d 	bl	8014176 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80114bc:	2300      	movs	r3, #0

}
 80114be:	4618      	mov	r0, r3
 80114c0:	3710      	adds	r7, #16
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}

080114c6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80114c6:	b580      	push	{r7, lr}
 80114c8:	b088      	sub	sp, #32
 80114ca:	af04      	add	r7, sp, #16
 80114cc:	60f8      	str	r0, [r7, #12]
 80114ce:	60b9      	str	r1, [r7, #8]
 80114d0:	4611      	mov	r1, r2
 80114d2:	461a      	mov	r2, r3
 80114d4:	460b      	mov	r3, r1
 80114d6:	80fb      	strh	r3, [r7, #6]
 80114d8:	4613      	mov	r3, r2
 80114da:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d001      	beq.n	80114ea <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80114e6:	2300      	movs	r3, #0
 80114e8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80114ea:	7979      	ldrb	r1, [r7, #5]
 80114ec:	7e3b      	ldrb	r3, [r7, #24]
 80114ee:	9303      	str	r3, [sp, #12]
 80114f0:	88fb      	ldrh	r3, [r7, #6]
 80114f2:	9302      	str	r3, [sp, #8]
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	9301      	str	r3, [sp, #4]
 80114f8:	2301      	movs	r3, #1
 80114fa:	9300      	str	r3, [sp, #0]
 80114fc:	2302      	movs	r3, #2
 80114fe:	2200      	movs	r2, #0
 8011500:	68f8      	ldr	r0, [r7, #12]
 8011502:	f002 fe38 	bl	8014176 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8011506:	2300      	movs	r3, #0
}
 8011508:	4618      	mov	r0, r3
 801150a:	3710      	adds	r7, #16
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}

08011510 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b088      	sub	sp, #32
 8011514:	af04      	add	r7, sp, #16
 8011516:	60f8      	str	r0, [r7, #12]
 8011518:	60b9      	str	r1, [r7, #8]
 801151a:	4611      	mov	r1, r2
 801151c:	461a      	mov	r2, r3
 801151e:	460b      	mov	r3, r1
 8011520:	80fb      	strh	r3, [r7, #6]
 8011522:	4613      	mov	r3, r2
 8011524:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8011526:	7979      	ldrb	r1, [r7, #5]
 8011528:	2300      	movs	r3, #0
 801152a:	9303      	str	r3, [sp, #12]
 801152c:	88fb      	ldrh	r3, [r7, #6]
 801152e:	9302      	str	r3, [sp, #8]
 8011530:	68bb      	ldr	r3, [r7, #8]
 8011532:	9301      	str	r3, [sp, #4]
 8011534:	2301      	movs	r3, #1
 8011536:	9300      	str	r3, [sp, #0]
 8011538:	2302      	movs	r3, #2
 801153a:	2201      	movs	r2, #1
 801153c:	68f8      	ldr	r0, [r7, #12]
 801153e:	f002 fe1a 	bl	8014176 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8011542:	2300      	movs	r3, #0
}
 8011544:	4618      	mov	r0, r3
 8011546:	3710      	adds	r7, #16
 8011548:	46bd      	mov	sp, r7
 801154a:	bd80      	pop	{r7, pc}

0801154c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b086      	sub	sp, #24
 8011550:	af04      	add	r7, sp, #16
 8011552:	6078      	str	r0, [r7, #4]
 8011554:	4608      	mov	r0, r1
 8011556:	4611      	mov	r1, r2
 8011558:	461a      	mov	r2, r3
 801155a:	4603      	mov	r3, r0
 801155c:	70fb      	strb	r3, [r7, #3]
 801155e:	460b      	mov	r3, r1
 8011560:	70bb      	strb	r3, [r7, #2]
 8011562:	4613      	mov	r3, r2
 8011564:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8011566:	7878      	ldrb	r0, [r7, #1]
 8011568:	78ba      	ldrb	r2, [r7, #2]
 801156a:	78f9      	ldrb	r1, [r7, #3]
 801156c:	8b3b      	ldrh	r3, [r7, #24]
 801156e:	9302      	str	r3, [sp, #8]
 8011570:	7d3b      	ldrb	r3, [r7, #20]
 8011572:	9301      	str	r3, [sp, #4]
 8011574:	7c3b      	ldrb	r3, [r7, #16]
 8011576:	9300      	str	r3, [sp, #0]
 8011578:	4603      	mov	r3, r0
 801157a:	6878      	ldr	r0, [r7, #4]
 801157c:	f002 fdad 	bl	80140da <USBH_LL_OpenPipe>

  return USBH_OK;
 8011580:	2300      	movs	r3, #0
}
 8011582:	4618      	mov	r0, r3
 8011584:	3708      	adds	r7, #8
 8011586:	46bd      	mov	sp, r7
 8011588:	bd80      	pop	{r7, pc}

0801158a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801158a:	b580      	push	{r7, lr}
 801158c:	b082      	sub	sp, #8
 801158e:	af00      	add	r7, sp, #0
 8011590:	6078      	str	r0, [r7, #4]
 8011592:	460b      	mov	r3, r1
 8011594:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8011596:	78fb      	ldrb	r3, [r7, #3]
 8011598:	4619      	mov	r1, r3
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f002 fdcc 	bl	8014138 <USBH_LL_ClosePipe>

  return USBH_OK;
 80115a0:	2300      	movs	r3, #0
}
 80115a2:	4618      	mov	r0, r3
 80115a4:	3708      	adds	r7, #8
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}

080115aa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80115aa:	b580      	push	{r7, lr}
 80115ac:	b084      	sub	sp, #16
 80115ae:	af00      	add	r7, sp, #0
 80115b0:	6078      	str	r0, [r7, #4]
 80115b2:	460b      	mov	r3, r1
 80115b4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80115b6:	6878      	ldr	r0, [r7, #4]
 80115b8:	f000 f836 	bl	8011628 <USBH_GetFreePipe>
 80115bc:	4603      	mov	r3, r0
 80115be:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80115c0:	89fb      	ldrh	r3, [r7, #14]
 80115c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80115c6:	4293      	cmp	r3, r2
 80115c8:	d00a      	beq.n	80115e0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80115ca:	78fa      	ldrb	r2, [r7, #3]
 80115cc:	89fb      	ldrh	r3, [r7, #14]
 80115ce:	f003 030f 	and.w	r3, r3, #15
 80115d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80115d6:	6879      	ldr	r1, [r7, #4]
 80115d8:	33e0      	adds	r3, #224	; 0xe0
 80115da:	009b      	lsls	r3, r3, #2
 80115dc:	440b      	add	r3, r1
 80115de:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80115e0:	89fb      	ldrh	r3, [r7, #14]
 80115e2:	b2db      	uxtb	r3, r3
}
 80115e4:	4618      	mov	r0, r3
 80115e6:	3710      	adds	r7, #16
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bd80      	pop	{r7, pc}

080115ec <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80115ec:	b480      	push	{r7}
 80115ee:	b083      	sub	sp, #12
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	460b      	mov	r3, r1
 80115f6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80115f8:	78fb      	ldrb	r3, [r7, #3]
 80115fa:	2b0a      	cmp	r3, #10
 80115fc:	d80d      	bhi.n	801161a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80115fe:	78fb      	ldrb	r3, [r7, #3]
 8011600:	687a      	ldr	r2, [r7, #4]
 8011602:	33e0      	adds	r3, #224	; 0xe0
 8011604:	009b      	lsls	r3, r3, #2
 8011606:	4413      	add	r3, r2
 8011608:	685a      	ldr	r2, [r3, #4]
 801160a:	78fb      	ldrb	r3, [r7, #3]
 801160c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8011610:	6879      	ldr	r1, [r7, #4]
 8011612:	33e0      	adds	r3, #224	; 0xe0
 8011614:	009b      	lsls	r3, r3, #2
 8011616:	440b      	add	r3, r1
 8011618:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801161a:	2300      	movs	r3, #0
}
 801161c:	4618      	mov	r0, r3
 801161e:	370c      	adds	r7, #12
 8011620:	46bd      	mov	sp, r7
 8011622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011626:	4770      	bx	lr

08011628 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8011628:	b480      	push	{r7}
 801162a:	b085      	sub	sp, #20
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8011630:	2300      	movs	r3, #0
 8011632:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8011634:	2300      	movs	r3, #0
 8011636:	73fb      	strb	r3, [r7, #15]
 8011638:	e00f      	b.n	801165a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801163a:	7bfb      	ldrb	r3, [r7, #15]
 801163c:	687a      	ldr	r2, [r7, #4]
 801163e:	33e0      	adds	r3, #224	; 0xe0
 8011640:	009b      	lsls	r3, r3, #2
 8011642:	4413      	add	r3, r2
 8011644:	685b      	ldr	r3, [r3, #4]
 8011646:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801164a:	2b00      	cmp	r3, #0
 801164c:	d102      	bne.n	8011654 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 801164e:	7bfb      	ldrb	r3, [r7, #15]
 8011650:	b29b      	uxth	r3, r3
 8011652:	e007      	b.n	8011664 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8011654:	7bfb      	ldrb	r3, [r7, #15]
 8011656:	3301      	adds	r3, #1
 8011658:	73fb      	strb	r3, [r7, #15]
 801165a:	7bfb      	ldrb	r3, [r7, #15]
 801165c:	2b0a      	cmp	r3, #10
 801165e:	d9ec      	bls.n	801163a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8011660:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8011664:	4618      	mov	r0, r3
 8011666:	3714      	adds	r7, #20
 8011668:	46bd      	mov	sp, r7
 801166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166e:	4770      	bx	lr

08011670 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011670:	b480      	push	{r7}
 8011672:	b087      	sub	sp, #28
 8011674:	af00      	add	r7, sp, #0
 8011676:	60f8      	str	r0, [r7, #12]
 8011678:	60b9      	str	r1, [r7, #8]
 801167a:	4613      	mov	r3, r2
 801167c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801167e:	2301      	movs	r3, #1
 8011680:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011682:	2300      	movs	r3, #0
 8011684:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011686:	4b1f      	ldr	r3, [pc, #124]	; (8011704 <FATFS_LinkDriverEx+0x94>)
 8011688:	7a5b      	ldrb	r3, [r3, #9]
 801168a:	b2db      	uxtb	r3, r3
 801168c:	2b00      	cmp	r3, #0
 801168e:	d131      	bne.n	80116f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011690:	4b1c      	ldr	r3, [pc, #112]	; (8011704 <FATFS_LinkDriverEx+0x94>)
 8011692:	7a5b      	ldrb	r3, [r3, #9]
 8011694:	b2db      	uxtb	r3, r3
 8011696:	461a      	mov	r2, r3
 8011698:	4b1a      	ldr	r3, [pc, #104]	; (8011704 <FATFS_LinkDriverEx+0x94>)
 801169a:	2100      	movs	r1, #0
 801169c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801169e:	4b19      	ldr	r3, [pc, #100]	; (8011704 <FATFS_LinkDriverEx+0x94>)
 80116a0:	7a5b      	ldrb	r3, [r3, #9]
 80116a2:	b2db      	uxtb	r3, r3
 80116a4:	4a17      	ldr	r2, [pc, #92]	; (8011704 <FATFS_LinkDriverEx+0x94>)
 80116a6:	009b      	lsls	r3, r3, #2
 80116a8:	4413      	add	r3, r2
 80116aa:	68fa      	ldr	r2, [r7, #12]
 80116ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80116ae:	4b15      	ldr	r3, [pc, #84]	; (8011704 <FATFS_LinkDriverEx+0x94>)
 80116b0:	7a5b      	ldrb	r3, [r3, #9]
 80116b2:	b2db      	uxtb	r3, r3
 80116b4:	461a      	mov	r2, r3
 80116b6:	4b13      	ldr	r3, [pc, #76]	; (8011704 <FATFS_LinkDriverEx+0x94>)
 80116b8:	4413      	add	r3, r2
 80116ba:	79fa      	ldrb	r2, [r7, #7]
 80116bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80116be:	4b11      	ldr	r3, [pc, #68]	; (8011704 <FATFS_LinkDriverEx+0x94>)
 80116c0:	7a5b      	ldrb	r3, [r3, #9]
 80116c2:	b2db      	uxtb	r3, r3
 80116c4:	1c5a      	adds	r2, r3, #1
 80116c6:	b2d1      	uxtb	r1, r2
 80116c8:	4a0e      	ldr	r2, [pc, #56]	; (8011704 <FATFS_LinkDriverEx+0x94>)
 80116ca:	7251      	strb	r1, [r2, #9]
 80116cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80116ce:	7dbb      	ldrb	r3, [r7, #22]
 80116d0:	3330      	adds	r3, #48	; 0x30
 80116d2:	b2da      	uxtb	r2, r3
 80116d4:	68bb      	ldr	r3, [r7, #8]
 80116d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	3301      	adds	r3, #1
 80116dc:	223a      	movs	r2, #58	; 0x3a
 80116de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	3302      	adds	r3, #2
 80116e4:	222f      	movs	r2, #47	; 0x2f
 80116e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80116e8:	68bb      	ldr	r3, [r7, #8]
 80116ea:	3303      	adds	r3, #3
 80116ec:	2200      	movs	r2, #0
 80116ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80116f0:	2300      	movs	r3, #0
 80116f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80116f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	371c      	adds	r7, #28
 80116fa:	46bd      	mov	sp, r7
 80116fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011700:	4770      	bx	lr
 8011702:	bf00      	nop
 8011704:	20000dbc 	.word	0x20000dbc

08011708 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
 8011710:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011712:	2200      	movs	r2, #0
 8011714:	6839      	ldr	r1, [r7, #0]
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f7ff ffaa 	bl	8011670 <FATFS_LinkDriverEx>
 801171c:	4603      	mov	r3, r0
}
 801171e:	4618      	mov	r0, r3
 8011720:	3708      	adds	r7, #8
 8011722:	46bd      	mov	sp, r7
 8011724:	bd80      	pop	{r7, pc}

08011726 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011726:	b480      	push	{r7}
 8011728:	b085      	sub	sp, #20
 801172a:	af00      	add	r7, sp, #0
 801172c:	4603      	mov	r3, r0
 801172e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011730:	2300      	movs	r3, #0
 8011732:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011734:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011738:	2b84      	cmp	r3, #132	; 0x84
 801173a:	d005      	beq.n	8011748 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801173c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	4413      	add	r3, r2
 8011744:	3303      	adds	r3, #3
 8011746:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011748:	68fb      	ldr	r3, [r7, #12]
}
 801174a:	4618      	mov	r0, r3
 801174c:	3714      	adds	r7, #20
 801174e:	46bd      	mov	sp, r7
 8011750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011754:	4770      	bx	lr

08011756 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011756:	b480      	push	{r7}
 8011758:	b083      	sub	sp, #12
 801175a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801175c:	f3ef 8305 	mrs	r3, IPSR
 8011760:	607b      	str	r3, [r7, #4]
  return(result);
 8011762:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011764:	2b00      	cmp	r3, #0
 8011766:	bf14      	ite	ne
 8011768:	2301      	movne	r3, #1
 801176a:	2300      	moveq	r3, #0
 801176c:	b2db      	uxtb	r3, r3
}
 801176e:	4618      	mov	r0, r3
 8011770:	370c      	adds	r7, #12
 8011772:	46bd      	mov	sp, r7
 8011774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011778:	4770      	bx	lr

0801177a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801177a:	b580      	push	{r7, lr}
 801177c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801177e:	f001 f95b 	bl	8012a38 <vTaskStartScheduler>
  
  return osOK;
 8011782:	2300      	movs	r3, #0
}
 8011784:	4618      	mov	r0, r3
 8011786:	bd80      	pop	{r7, pc}

08011788 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 801178c:	f001 fdae 	bl	80132ec <xTaskGetSchedulerState>
 8011790:	4603      	mov	r3, r0
 8011792:	2b01      	cmp	r3, #1
 8011794:	d101      	bne.n	801179a <osKernelRunning+0x12>
    return 0;
 8011796:	2300      	movs	r3, #0
 8011798:	e000      	b.n	801179c <osKernelRunning+0x14>
  else
    return 1;
 801179a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 801179c:	4618      	mov	r0, r3
 801179e:	bd80      	pop	{r7, pc}

080117a0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80117a4:	f7ff ffd7 	bl	8011756 <inHandlerMode>
 80117a8:	4603      	mov	r3, r0
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d003      	beq.n	80117b6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80117ae:	f001 fa63 	bl	8012c78 <xTaskGetTickCountFromISR>
 80117b2:	4603      	mov	r3, r0
 80117b4:	e002      	b.n	80117bc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80117b6:	f001 fa4f 	bl	8012c58 <xTaskGetTickCount>
 80117ba:	4603      	mov	r3, r0
  }
}
 80117bc:	4618      	mov	r0, r3
 80117be:	bd80      	pop	{r7, pc}

080117c0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80117c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117c2:	b089      	sub	sp, #36	; 0x24
 80117c4:	af04      	add	r7, sp, #16
 80117c6:	6078      	str	r0, [r7, #4]
 80117c8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	695b      	ldr	r3, [r3, #20]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d020      	beq.n	8011814 <osThreadCreate+0x54>
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	699b      	ldr	r3, [r3, #24]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d01c      	beq.n	8011814 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	685c      	ldr	r4, [r3, #4]
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681d      	ldr	r5, [r3, #0]
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	691e      	ldr	r6, [r3, #16]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80117ec:	4618      	mov	r0, r3
 80117ee:	f7ff ff9a 	bl	8011726 <makeFreeRtosPriority>
 80117f2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	695b      	ldr	r3, [r3, #20]
 80117f8:	687a      	ldr	r2, [r7, #4]
 80117fa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80117fc:	9202      	str	r2, [sp, #8]
 80117fe:	9301      	str	r3, [sp, #4]
 8011800:	9100      	str	r1, [sp, #0]
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	4632      	mov	r2, r6
 8011806:	4629      	mov	r1, r5
 8011808:	4620      	mov	r0, r4
 801180a:	f000 ff39 	bl	8012680 <xTaskCreateStatic>
 801180e:	4603      	mov	r3, r0
 8011810:	60fb      	str	r3, [r7, #12]
 8011812:	e01c      	b.n	801184e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	685c      	ldr	r4, [r3, #4]
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011820:	b29e      	uxth	r6, r3
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011828:	4618      	mov	r0, r3
 801182a:	f7ff ff7c 	bl	8011726 <makeFreeRtosPriority>
 801182e:	4602      	mov	r2, r0
 8011830:	f107 030c 	add.w	r3, r7, #12
 8011834:	9301      	str	r3, [sp, #4]
 8011836:	9200      	str	r2, [sp, #0]
 8011838:	683b      	ldr	r3, [r7, #0]
 801183a:	4632      	mov	r2, r6
 801183c:	4629      	mov	r1, r5
 801183e:	4620      	mov	r0, r4
 8011840:	f000 ff81 	bl	8012746 <xTaskCreate>
 8011844:	4603      	mov	r3, r0
 8011846:	2b01      	cmp	r3, #1
 8011848:	d001      	beq.n	801184e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801184a:	2300      	movs	r3, #0
 801184c:	e000      	b.n	8011850 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801184e:	68fb      	ldr	r3, [r7, #12]
}
 8011850:	4618      	mov	r0, r3
 8011852:	3714      	adds	r7, #20
 8011854:	46bd      	mov	sp, r7
 8011856:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011858 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b084      	sub	sp, #16
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d001      	beq.n	801186e <osDelay+0x16>
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	e000      	b.n	8011870 <osDelay+0x18>
 801186e:	2301      	movs	r3, #1
 8011870:	4618      	mov	r0, r3
 8011872:	f001 f8ab 	bl	80129cc <vTaskDelay>
  
  return osOK;
 8011876:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011878:	4618      	mov	r0, r3
 801187a:	3710      	adds	r7, #16
 801187c:	46bd      	mov	sp, r7
 801187e:	bd80      	pop	{r7, pc}

08011880 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011880:	b590      	push	{r4, r7, lr}
 8011882:	b085      	sub	sp, #20
 8011884:	af02      	add	r7, sp, #8
 8011886:	6078      	str	r0, [r7, #4]
 8011888:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	689b      	ldr	r3, [r3, #8]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d011      	beq.n	80118b6 <osMessageCreate+0x36>
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	68db      	ldr	r3, [r3, #12]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d00d      	beq.n	80118b6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6818      	ldr	r0, [r3, #0]
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	6859      	ldr	r1, [r3, #4]
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	689a      	ldr	r2, [r3, #8]
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	68db      	ldr	r3, [r3, #12]
 80118aa:	2400      	movs	r4, #0
 80118ac:	9400      	str	r4, [sp, #0]
 80118ae:	f000 f9e1 	bl	8011c74 <xQueueGenericCreateStatic>
 80118b2:	4603      	mov	r3, r0
 80118b4:	e008      	b.n	80118c8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6818      	ldr	r0, [r3, #0]
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	685b      	ldr	r3, [r3, #4]
 80118be:	2200      	movs	r2, #0
 80118c0:	4619      	mov	r1, r3
 80118c2:	f000 fa59 	bl	8011d78 <xQueueGenericCreate>
 80118c6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80118c8:	4618      	mov	r0, r3
 80118ca:	370c      	adds	r7, #12
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd90      	pop	{r4, r7, pc}

080118d0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b086      	sub	sp, #24
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	60f8      	str	r0, [r7, #12]
 80118d8:	60b9      	str	r1, [r7, #8]
 80118da:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80118dc:	2300      	movs	r3, #0
 80118de:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80118e4:	697b      	ldr	r3, [r7, #20]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d101      	bne.n	80118ee <osMessagePut+0x1e>
    ticks = 1;
 80118ea:	2301      	movs	r3, #1
 80118ec:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80118ee:	f7ff ff32 	bl	8011756 <inHandlerMode>
 80118f2:	4603      	mov	r3, r0
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d018      	beq.n	801192a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80118f8:	f107 0210 	add.w	r2, r7, #16
 80118fc:	f107 0108 	add.w	r1, r7, #8
 8011900:	2300      	movs	r3, #0
 8011902:	68f8      	ldr	r0, [r7, #12]
 8011904:	f000 fba0 	bl	8012048 <xQueueGenericSendFromISR>
 8011908:	4603      	mov	r3, r0
 801190a:	2b01      	cmp	r3, #1
 801190c:	d001      	beq.n	8011912 <osMessagePut+0x42>
      return osErrorOS;
 801190e:	23ff      	movs	r3, #255	; 0xff
 8011910:	e018      	b.n	8011944 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011912:	693b      	ldr	r3, [r7, #16]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d014      	beq.n	8011942 <osMessagePut+0x72>
 8011918:	4b0c      	ldr	r3, [pc, #48]	; (801194c <osMessagePut+0x7c>)
 801191a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801191e:	601a      	str	r2, [r3, #0]
 8011920:	f3bf 8f4f 	dsb	sy
 8011924:	f3bf 8f6f 	isb	sy
 8011928:	e00b      	b.n	8011942 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801192a:	f107 0108 	add.w	r1, r7, #8
 801192e:	2300      	movs	r3, #0
 8011930:	697a      	ldr	r2, [r7, #20]
 8011932:	68f8      	ldr	r0, [r7, #12]
 8011934:	f000 fa82 	bl	8011e3c <xQueueGenericSend>
 8011938:	4603      	mov	r3, r0
 801193a:	2b01      	cmp	r3, #1
 801193c:	d001      	beq.n	8011942 <osMessagePut+0x72>
      return osErrorOS;
 801193e:	23ff      	movs	r3, #255	; 0xff
 8011940:	e000      	b.n	8011944 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8011942:	2300      	movs	r3, #0
}
 8011944:	4618      	mov	r0, r3
 8011946:	3718      	adds	r7, #24
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}
 801194c:	e000ed04 	.word	0xe000ed04

08011950 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011950:	b590      	push	{r4, r7, lr}
 8011952:	b08b      	sub	sp, #44	; 0x2c
 8011954:	af00      	add	r7, sp, #0
 8011956:	60f8      	str	r0, [r7, #12]
 8011958:	60b9      	str	r1, [r7, #8]
 801195a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8011960:	2300      	movs	r3, #0
 8011962:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8011964:	68bb      	ldr	r3, [r7, #8]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d10a      	bne.n	8011980 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801196a:	2380      	movs	r3, #128	; 0x80
 801196c:	617b      	str	r3, [r7, #20]
    return event;
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	461c      	mov	r4, r3
 8011972:	f107 0314 	add.w	r3, r7, #20
 8011976:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801197a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801197e:	e054      	b.n	8011a2a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011980:	2300      	movs	r3, #0
 8011982:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011984:	2300      	movs	r3, #0
 8011986:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801198e:	d103      	bne.n	8011998 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8011990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011994:	627b      	str	r3, [r7, #36]	; 0x24
 8011996:	e009      	b.n	80119ac <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d006      	beq.n	80119ac <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80119a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d101      	bne.n	80119ac <osMessageGet+0x5c>
      ticks = 1;
 80119a8:	2301      	movs	r3, #1
 80119aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80119ac:	f7ff fed3 	bl	8011756 <inHandlerMode>
 80119b0:	4603      	mov	r3, r0
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d01c      	beq.n	80119f0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80119b6:	f107 0220 	add.w	r2, r7, #32
 80119ba:	f107 0314 	add.w	r3, r7, #20
 80119be:	3304      	adds	r3, #4
 80119c0:	4619      	mov	r1, r3
 80119c2:	68b8      	ldr	r0, [r7, #8]
 80119c4:	f000 fcc6 	bl	8012354 <xQueueReceiveFromISR>
 80119c8:	4603      	mov	r3, r0
 80119ca:	2b01      	cmp	r3, #1
 80119cc:	d102      	bne.n	80119d4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80119ce:	2310      	movs	r3, #16
 80119d0:	617b      	str	r3, [r7, #20]
 80119d2:	e001      	b.n	80119d8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80119d4:	2300      	movs	r3, #0
 80119d6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80119d8:	6a3b      	ldr	r3, [r7, #32]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d01d      	beq.n	8011a1a <osMessageGet+0xca>
 80119de:	4b15      	ldr	r3, [pc, #84]	; (8011a34 <osMessageGet+0xe4>)
 80119e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119e4:	601a      	str	r2, [r3, #0]
 80119e6:	f3bf 8f4f 	dsb	sy
 80119ea:	f3bf 8f6f 	isb	sy
 80119ee:	e014      	b.n	8011a1a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80119f0:	f107 0314 	add.w	r3, r7, #20
 80119f4:	3304      	adds	r3, #4
 80119f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80119f8:	4619      	mov	r1, r3
 80119fa:	68b8      	ldr	r0, [r7, #8]
 80119fc:	f000 fbc4 	bl	8012188 <xQueueReceive>
 8011a00:	4603      	mov	r3, r0
 8011a02:	2b01      	cmp	r3, #1
 8011a04:	d102      	bne.n	8011a0c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8011a06:	2310      	movs	r3, #16
 8011a08:	617b      	str	r3, [r7, #20]
 8011a0a:	e006      	b.n	8011a1a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d101      	bne.n	8011a16 <osMessageGet+0xc6>
 8011a12:	2300      	movs	r3, #0
 8011a14:	e000      	b.n	8011a18 <osMessageGet+0xc8>
 8011a16:	2340      	movs	r3, #64	; 0x40
 8011a18:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	461c      	mov	r4, r3
 8011a1e:	f107 0314 	add.w	r3, r7, #20
 8011a22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011a26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011a2a:	68f8      	ldr	r0, [r7, #12]
 8011a2c:	372c      	adds	r7, #44	; 0x2c
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd90      	pop	{r4, r7, pc}
 8011a32:	bf00      	nop
 8011a34:	e000ed04 	.word	0xe000ed04

08011a38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011a38:	b480      	push	{r7}
 8011a3a:	b083      	sub	sp, #12
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f103 0208 	add.w	r2, r3, #8
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	f103 0208 	add.w	r2, r3, #8
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	f103 0208 	add.w	r2, r3, #8
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2200      	movs	r2, #0
 8011a6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011a6c:	bf00      	nop
 8011a6e:	370c      	adds	r7, #12
 8011a70:	46bd      	mov	sp, r7
 8011a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a76:	4770      	bx	lr

08011a78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011a78:	b480      	push	{r7}
 8011a7a:	b083      	sub	sp, #12
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2200      	movs	r2, #0
 8011a84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011a86:	bf00      	nop
 8011a88:	370c      	adds	r7, #12
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a90:	4770      	bx	lr

08011a92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011a92:	b480      	push	{r7}
 8011a94:	b085      	sub	sp, #20
 8011a96:	af00      	add	r7, sp, #0
 8011a98:	6078      	str	r0, [r7, #4]
 8011a9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	685b      	ldr	r3, [r3, #4]
 8011aa0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	68fa      	ldr	r2, [r7, #12]
 8011aa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	689a      	ldr	r2, [r3, #8]
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	689b      	ldr	r3, [r3, #8]
 8011ab4:	683a      	ldr	r2, [r7, #0]
 8011ab6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	683a      	ldr	r2, [r7, #0]
 8011abc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	687a      	ldr	r2, [r7, #4]
 8011ac2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	1c5a      	adds	r2, r3, #1
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	601a      	str	r2, [r3, #0]
}
 8011ace:	bf00      	nop
 8011ad0:	3714      	adds	r7, #20
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad8:	4770      	bx	lr

08011ada <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011ada:	b480      	push	{r7}
 8011adc:	b085      	sub	sp, #20
 8011ade:	af00      	add	r7, sp, #0
 8011ae0:	6078      	str	r0, [r7, #4]
 8011ae2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011ae4:	683b      	ldr	r3, [r7, #0]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011af0:	d103      	bne.n	8011afa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	691b      	ldr	r3, [r3, #16]
 8011af6:	60fb      	str	r3, [r7, #12]
 8011af8:	e00c      	b.n	8011b14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	3308      	adds	r3, #8
 8011afe:	60fb      	str	r3, [r7, #12]
 8011b00:	e002      	b.n	8011b08 <vListInsert+0x2e>
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	685b      	ldr	r3, [r3, #4]
 8011b06:	60fb      	str	r3, [r7, #12]
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	685b      	ldr	r3, [r3, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	68ba      	ldr	r2, [r7, #8]
 8011b10:	429a      	cmp	r2, r3
 8011b12:	d2f6      	bcs.n	8011b02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	685a      	ldr	r2, [r3, #4]
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	685b      	ldr	r3, [r3, #4]
 8011b20:	683a      	ldr	r2, [r7, #0]
 8011b22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	68fa      	ldr	r2, [r7, #12]
 8011b28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	683a      	ldr	r2, [r7, #0]
 8011b2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011b30:	683b      	ldr	r3, [r7, #0]
 8011b32:	687a      	ldr	r2, [r7, #4]
 8011b34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	1c5a      	adds	r2, r3, #1
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	601a      	str	r2, [r3, #0]
}
 8011b40:	bf00      	nop
 8011b42:	3714      	adds	r7, #20
 8011b44:	46bd      	mov	sp, r7
 8011b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4a:	4770      	bx	lr

08011b4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011b4c:	b480      	push	{r7}
 8011b4e:	b085      	sub	sp, #20
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	691b      	ldr	r3, [r3, #16]
 8011b58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	685b      	ldr	r3, [r3, #4]
 8011b5e:	687a      	ldr	r2, [r7, #4]
 8011b60:	6892      	ldr	r2, [r2, #8]
 8011b62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	689b      	ldr	r3, [r3, #8]
 8011b68:	687a      	ldr	r2, [r7, #4]
 8011b6a:	6852      	ldr	r2, [r2, #4]
 8011b6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	685b      	ldr	r3, [r3, #4]
 8011b72:	687a      	ldr	r2, [r7, #4]
 8011b74:	429a      	cmp	r2, r3
 8011b76:	d103      	bne.n	8011b80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	689a      	ldr	r2, [r3, #8]
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2200      	movs	r2, #0
 8011b84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	1e5a      	subs	r2, r3, #1
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	681b      	ldr	r3, [r3, #0]
}
 8011b94:	4618      	mov	r0, r3
 8011b96:	3714      	adds	r7, #20
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9e:	4770      	bx	lr

08011ba0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b084      	sub	sp, #16
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
 8011ba8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d10c      	bne.n	8011bce <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bb8:	b672      	cpsid	i
 8011bba:	f383 8811 	msr	BASEPRI, r3
 8011bbe:	f3bf 8f6f 	isb	sy
 8011bc2:	f3bf 8f4f 	dsb	sy
 8011bc6:	b662      	cpsie	i
 8011bc8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011bca:	bf00      	nop
 8011bcc:	e7fe      	b.n	8011bcc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8011bce:	f001 fda5 	bl	801371c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	681a      	ldr	r2, [r3, #0]
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bda:	68f9      	ldr	r1, [r7, #12]
 8011bdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011bde:	fb01 f303 	mul.w	r3, r1, r3
 8011be2:	441a      	add	r2, r3
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	2200      	movs	r2, #0
 8011bec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	681a      	ldr	r2, [r3, #0]
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	681a      	ldr	r2, [r3, #0]
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bfe:	3b01      	subs	r3, #1
 8011c00:	68f9      	ldr	r1, [r7, #12]
 8011c02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011c04:	fb01 f303 	mul.w	r3, r1, r3
 8011c08:	441a      	add	r2, r3
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	22ff      	movs	r2, #255	; 0xff
 8011c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	22ff      	movs	r2, #255	; 0xff
 8011c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d114      	bne.n	8011c4e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	691b      	ldr	r3, [r3, #16]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d01a      	beq.n	8011c62 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	3310      	adds	r3, #16
 8011c30:	4618      	mov	r0, r3
 8011c32:	f001 f995 	bl	8012f60 <xTaskRemoveFromEventList>
 8011c36:	4603      	mov	r3, r0
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d012      	beq.n	8011c62 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011c3c:	4b0c      	ldr	r3, [pc, #48]	; (8011c70 <xQueueGenericReset+0xd0>)
 8011c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c42:	601a      	str	r2, [r3, #0]
 8011c44:	f3bf 8f4f 	dsb	sy
 8011c48:	f3bf 8f6f 	isb	sy
 8011c4c:	e009      	b.n	8011c62 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	3310      	adds	r3, #16
 8011c52:	4618      	mov	r0, r3
 8011c54:	f7ff fef0 	bl	8011a38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	3324      	adds	r3, #36	; 0x24
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f7ff feeb 	bl	8011a38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011c62:	f001 fd8f 	bl	8013784 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011c66:	2301      	movs	r3, #1
}
 8011c68:	4618      	mov	r0, r3
 8011c6a:	3710      	adds	r7, #16
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}
 8011c70:	e000ed04 	.word	0xe000ed04

08011c74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b08e      	sub	sp, #56	; 0x38
 8011c78:	af02      	add	r7, sp, #8
 8011c7a:	60f8      	str	r0, [r7, #12]
 8011c7c:	60b9      	str	r1, [r7, #8]
 8011c7e:	607a      	str	r2, [r7, #4]
 8011c80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d10c      	bne.n	8011ca2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8011c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c8c:	b672      	cpsid	i
 8011c8e:	f383 8811 	msr	BASEPRI, r3
 8011c92:	f3bf 8f6f 	isb	sy
 8011c96:	f3bf 8f4f 	dsb	sy
 8011c9a:	b662      	cpsie	i
 8011c9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011c9e:	bf00      	nop
 8011ca0:	e7fe      	b.n	8011ca0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d10c      	bne.n	8011cc2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8011ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cac:	b672      	cpsid	i
 8011cae:	f383 8811 	msr	BASEPRI, r3
 8011cb2:	f3bf 8f6f 	isb	sy
 8011cb6:	f3bf 8f4f 	dsb	sy
 8011cba:	b662      	cpsie	i
 8011cbc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011cbe:	bf00      	nop
 8011cc0:	e7fe      	b.n	8011cc0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d002      	beq.n	8011cce <xQueueGenericCreateStatic+0x5a>
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d001      	beq.n	8011cd2 <xQueueGenericCreateStatic+0x5e>
 8011cce:	2301      	movs	r3, #1
 8011cd0:	e000      	b.n	8011cd4 <xQueueGenericCreateStatic+0x60>
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d10c      	bne.n	8011cf2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8011cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cdc:	b672      	cpsid	i
 8011cde:	f383 8811 	msr	BASEPRI, r3
 8011ce2:	f3bf 8f6f 	isb	sy
 8011ce6:	f3bf 8f4f 	dsb	sy
 8011cea:	b662      	cpsie	i
 8011cec:	623b      	str	r3, [r7, #32]
}
 8011cee:	bf00      	nop
 8011cf0:	e7fe      	b.n	8011cf0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d102      	bne.n	8011cfe <xQueueGenericCreateStatic+0x8a>
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d101      	bne.n	8011d02 <xQueueGenericCreateStatic+0x8e>
 8011cfe:	2301      	movs	r3, #1
 8011d00:	e000      	b.n	8011d04 <xQueueGenericCreateStatic+0x90>
 8011d02:	2300      	movs	r3, #0
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d10c      	bne.n	8011d22 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8011d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d0c:	b672      	cpsid	i
 8011d0e:	f383 8811 	msr	BASEPRI, r3
 8011d12:	f3bf 8f6f 	isb	sy
 8011d16:	f3bf 8f4f 	dsb	sy
 8011d1a:	b662      	cpsie	i
 8011d1c:	61fb      	str	r3, [r7, #28]
}
 8011d1e:	bf00      	nop
 8011d20:	e7fe      	b.n	8011d20 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011d22:	2348      	movs	r3, #72	; 0x48
 8011d24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011d26:	697b      	ldr	r3, [r7, #20]
 8011d28:	2b48      	cmp	r3, #72	; 0x48
 8011d2a:	d00c      	beq.n	8011d46 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8011d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d30:	b672      	cpsid	i
 8011d32:	f383 8811 	msr	BASEPRI, r3
 8011d36:	f3bf 8f6f 	isb	sy
 8011d3a:	f3bf 8f4f 	dsb	sy
 8011d3e:	b662      	cpsie	i
 8011d40:	61bb      	str	r3, [r7, #24]
}
 8011d42:	bf00      	nop
 8011d44:	e7fe      	b.n	8011d44 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011d46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d00d      	beq.n	8011d6e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d54:	2201      	movs	r2, #1
 8011d56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011d5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d60:	9300      	str	r3, [sp, #0]
 8011d62:	4613      	mov	r3, r2
 8011d64:	687a      	ldr	r2, [r7, #4]
 8011d66:	68b9      	ldr	r1, [r7, #8]
 8011d68:	68f8      	ldr	r0, [r7, #12]
 8011d6a:	f000 f847 	bl	8011dfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011d70:	4618      	mov	r0, r3
 8011d72:	3730      	adds	r7, #48	; 0x30
 8011d74:	46bd      	mov	sp, r7
 8011d76:	bd80      	pop	{r7, pc}

08011d78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b08a      	sub	sp, #40	; 0x28
 8011d7c:	af02      	add	r7, sp, #8
 8011d7e:	60f8      	str	r0, [r7, #12]
 8011d80:	60b9      	str	r1, [r7, #8]
 8011d82:	4613      	mov	r3, r2
 8011d84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d10c      	bne.n	8011da6 <xQueueGenericCreate+0x2e>
	__asm volatile
 8011d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d90:	b672      	cpsid	i
 8011d92:	f383 8811 	msr	BASEPRI, r3
 8011d96:	f3bf 8f6f 	isb	sy
 8011d9a:	f3bf 8f4f 	dsb	sy
 8011d9e:	b662      	cpsie	i
 8011da0:	613b      	str	r3, [r7, #16]
}
 8011da2:	bf00      	nop
 8011da4:	e7fe      	b.n	8011da4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d102      	bne.n	8011db2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011dac:	2300      	movs	r3, #0
 8011dae:	61fb      	str	r3, [r7, #28]
 8011db0:	e004      	b.n	8011dbc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	68ba      	ldr	r2, [r7, #8]
 8011db6:	fb02 f303 	mul.w	r3, r2, r3
 8011dba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011dbc:	69fb      	ldr	r3, [r7, #28]
 8011dbe:	3348      	adds	r3, #72	; 0x48
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f001 fdd7 	bl	8013974 <pvPortMalloc>
 8011dc6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011dc8:	69bb      	ldr	r3, [r7, #24]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d011      	beq.n	8011df2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011dce:	69bb      	ldr	r3, [r7, #24]
 8011dd0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011dd2:	697b      	ldr	r3, [r7, #20]
 8011dd4:	3348      	adds	r3, #72	; 0x48
 8011dd6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011dd8:	69bb      	ldr	r3, [r7, #24]
 8011dda:	2200      	movs	r2, #0
 8011ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011de0:	79fa      	ldrb	r2, [r7, #7]
 8011de2:	69bb      	ldr	r3, [r7, #24]
 8011de4:	9300      	str	r3, [sp, #0]
 8011de6:	4613      	mov	r3, r2
 8011de8:	697a      	ldr	r2, [r7, #20]
 8011dea:	68b9      	ldr	r1, [r7, #8]
 8011dec:	68f8      	ldr	r0, [r7, #12]
 8011dee:	f000 f805 	bl	8011dfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011df2:	69bb      	ldr	r3, [r7, #24]
	}
 8011df4:	4618      	mov	r0, r3
 8011df6:	3720      	adds	r7, #32
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}

08011dfc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b084      	sub	sp, #16
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	60f8      	str	r0, [r7, #12]
 8011e04:	60b9      	str	r1, [r7, #8]
 8011e06:	607a      	str	r2, [r7, #4]
 8011e08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011e0a:	68bb      	ldr	r3, [r7, #8]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d103      	bne.n	8011e18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011e10:	69bb      	ldr	r3, [r7, #24]
 8011e12:	69ba      	ldr	r2, [r7, #24]
 8011e14:	601a      	str	r2, [r3, #0]
 8011e16:	e002      	b.n	8011e1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011e18:	69bb      	ldr	r3, [r7, #24]
 8011e1a:	687a      	ldr	r2, [r7, #4]
 8011e1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011e1e:	69bb      	ldr	r3, [r7, #24]
 8011e20:	68fa      	ldr	r2, [r7, #12]
 8011e22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011e24:	69bb      	ldr	r3, [r7, #24]
 8011e26:	68ba      	ldr	r2, [r7, #8]
 8011e28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011e2a:	2101      	movs	r1, #1
 8011e2c:	69b8      	ldr	r0, [r7, #24]
 8011e2e:	f7ff feb7 	bl	8011ba0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011e32:	bf00      	nop
 8011e34:	3710      	adds	r7, #16
 8011e36:	46bd      	mov	sp, r7
 8011e38:	bd80      	pop	{r7, pc}
	...

08011e3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b08e      	sub	sp, #56	; 0x38
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	60f8      	str	r0, [r7, #12]
 8011e44:	60b9      	str	r1, [r7, #8]
 8011e46:	607a      	str	r2, [r7, #4]
 8011e48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d10c      	bne.n	8011e72 <xQueueGenericSend+0x36>
	__asm volatile
 8011e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e5c:	b672      	cpsid	i
 8011e5e:	f383 8811 	msr	BASEPRI, r3
 8011e62:	f3bf 8f6f 	isb	sy
 8011e66:	f3bf 8f4f 	dsb	sy
 8011e6a:	b662      	cpsie	i
 8011e6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011e6e:	bf00      	nop
 8011e70:	e7fe      	b.n	8011e70 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e72:	68bb      	ldr	r3, [r7, #8]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d103      	bne.n	8011e80 <xQueueGenericSend+0x44>
 8011e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d101      	bne.n	8011e84 <xQueueGenericSend+0x48>
 8011e80:	2301      	movs	r3, #1
 8011e82:	e000      	b.n	8011e86 <xQueueGenericSend+0x4a>
 8011e84:	2300      	movs	r3, #0
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d10c      	bne.n	8011ea4 <xQueueGenericSend+0x68>
	__asm volatile
 8011e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e8e:	b672      	cpsid	i
 8011e90:	f383 8811 	msr	BASEPRI, r3
 8011e94:	f3bf 8f6f 	isb	sy
 8011e98:	f3bf 8f4f 	dsb	sy
 8011e9c:	b662      	cpsie	i
 8011e9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011ea0:	bf00      	nop
 8011ea2:	e7fe      	b.n	8011ea2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	2b02      	cmp	r3, #2
 8011ea8:	d103      	bne.n	8011eb2 <xQueueGenericSend+0x76>
 8011eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011eae:	2b01      	cmp	r3, #1
 8011eb0:	d101      	bne.n	8011eb6 <xQueueGenericSend+0x7a>
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	e000      	b.n	8011eb8 <xQueueGenericSend+0x7c>
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d10c      	bne.n	8011ed6 <xQueueGenericSend+0x9a>
	__asm volatile
 8011ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ec0:	b672      	cpsid	i
 8011ec2:	f383 8811 	msr	BASEPRI, r3
 8011ec6:	f3bf 8f6f 	isb	sy
 8011eca:	f3bf 8f4f 	dsb	sy
 8011ece:	b662      	cpsie	i
 8011ed0:	623b      	str	r3, [r7, #32]
}
 8011ed2:	bf00      	nop
 8011ed4:	e7fe      	b.n	8011ed4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011ed6:	f001 fa09 	bl	80132ec <xTaskGetSchedulerState>
 8011eda:	4603      	mov	r3, r0
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d102      	bne.n	8011ee6 <xQueueGenericSend+0xaa>
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d101      	bne.n	8011eea <xQueueGenericSend+0xae>
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	e000      	b.n	8011eec <xQueueGenericSend+0xb0>
 8011eea:	2300      	movs	r3, #0
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d10c      	bne.n	8011f0a <xQueueGenericSend+0xce>
	__asm volatile
 8011ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ef4:	b672      	cpsid	i
 8011ef6:	f383 8811 	msr	BASEPRI, r3
 8011efa:	f3bf 8f6f 	isb	sy
 8011efe:	f3bf 8f4f 	dsb	sy
 8011f02:	b662      	cpsie	i
 8011f04:	61fb      	str	r3, [r7, #28]
}
 8011f06:	bf00      	nop
 8011f08:	e7fe      	b.n	8011f08 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011f0a:	f001 fc07 	bl	801371c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f16:	429a      	cmp	r2, r3
 8011f18:	d302      	bcc.n	8011f20 <xQueueGenericSend+0xe4>
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	2b02      	cmp	r3, #2
 8011f1e:	d129      	bne.n	8011f74 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011f20:	683a      	ldr	r2, [r7, #0]
 8011f22:	68b9      	ldr	r1, [r7, #8]
 8011f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f26:	f000 fa9b 	bl	8012460 <prvCopyDataToQueue>
 8011f2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d010      	beq.n	8011f56 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f36:	3324      	adds	r3, #36	; 0x24
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f001 f811 	bl	8012f60 <xTaskRemoveFromEventList>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d013      	beq.n	8011f6c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011f44:	4b3f      	ldr	r3, [pc, #252]	; (8012044 <xQueueGenericSend+0x208>)
 8011f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f4a:	601a      	str	r2, [r3, #0]
 8011f4c:	f3bf 8f4f 	dsb	sy
 8011f50:	f3bf 8f6f 	isb	sy
 8011f54:	e00a      	b.n	8011f6c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d007      	beq.n	8011f6c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011f5c:	4b39      	ldr	r3, [pc, #228]	; (8012044 <xQueueGenericSend+0x208>)
 8011f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f62:	601a      	str	r2, [r3, #0]
 8011f64:	f3bf 8f4f 	dsb	sy
 8011f68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011f6c:	f001 fc0a 	bl	8013784 <vPortExitCritical>
				return pdPASS;
 8011f70:	2301      	movs	r3, #1
 8011f72:	e063      	b.n	801203c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d103      	bne.n	8011f82 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011f7a:	f001 fc03 	bl	8013784 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	e05c      	b.n	801203c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d106      	bne.n	8011f96 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011f88:	f107 0314 	add.w	r3, r7, #20
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f001 f84b 	bl	8013028 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011f92:	2301      	movs	r3, #1
 8011f94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011f96:	f001 fbf5 	bl	8013784 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011f9a:	f000 fdb1 	bl	8012b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011f9e:	f001 fbbd 	bl	801371c <vPortEnterCritical>
 8011fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011fa8:	b25b      	sxtb	r3, r3
 8011faa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011fae:	d103      	bne.n	8011fb8 <xQueueGenericSend+0x17c>
 8011fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011fbe:	b25b      	sxtb	r3, r3
 8011fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011fc4:	d103      	bne.n	8011fce <xQueueGenericSend+0x192>
 8011fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fc8:	2200      	movs	r2, #0
 8011fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011fce:	f001 fbd9 	bl	8013784 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011fd2:	1d3a      	adds	r2, r7, #4
 8011fd4:	f107 0314 	add.w	r3, r7, #20
 8011fd8:	4611      	mov	r1, r2
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f001 f83a 	bl	8013054 <xTaskCheckForTimeOut>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d124      	bne.n	8012030 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011fe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fe8:	f000 fb32 	bl	8012650 <prvIsQueueFull>
 8011fec:	4603      	mov	r3, r0
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d018      	beq.n	8012024 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ff4:	3310      	adds	r3, #16
 8011ff6:	687a      	ldr	r2, [r7, #4]
 8011ff8:	4611      	mov	r1, r2
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f000 ff8a 	bl	8012f14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012002:	f000 fabd 	bl	8012580 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012006:	f000 fd89 	bl	8012b1c <xTaskResumeAll>
 801200a:	4603      	mov	r3, r0
 801200c:	2b00      	cmp	r3, #0
 801200e:	f47f af7c 	bne.w	8011f0a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8012012:	4b0c      	ldr	r3, [pc, #48]	; (8012044 <xQueueGenericSend+0x208>)
 8012014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012018:	601a      	str	r2, [r3, #0]
 801201a:	f3bf 8f4f 	dsb	sy
 801201e:	f3bf 8f6f 	isb	sy
 8012022:	e772      	b.n	8011f0a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012026:	f000 faab 	bl	8012580 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801202a:	f000 fd77 	bl	8012b1c <xTaskResumeAll>
 801202e:	e76c      	b.n	8011f0a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012032:	f000 faa5 	bl	8012580 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012036:	f000 fd71 	bl	8012b1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801203a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801203c:	4618      	mov	r0, r3
 801203e:	3738      	adds	r7, #56	; 0x38
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}
 8012044:	e000ed04 	.word	0xe000ed04

08012048 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b08e      	sub	sp, #56	; 0x38
 801204c:	af00      	add	r7, sp, #0
 801204e:	60f8      	str	r0, [r7, #12]
 8012050:	60b9      	str	r1, [r7, #8]
 8012052:	607a      	str	r2, [r7, #4]
 8012054:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801205a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801205c:	2b00      	cmp	r3, #0
 801205e:	d10c      	bne.n	801207a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8012060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012064:	b672      	cpsid	i
 8012066:	f383 8811 	msr	BASEPRI, r3
 801206a:	f3bf 8f6f 	isb	sy
 801206e:	f3bf 8f4f 	dsb	sy
 8012072:	b662      	cpsie	i
 8012074:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012076:	bf00      	nop
 8012078:	e7fe      	b.n	8012078 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801207a:	68bb      	ldr	r3, [r7, #8]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d103      	bne.n	8012088 <xQueueGenericSendFromISR+0x40>
 8012080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012084:	2b00      	cmp	r3, #0
 8012086:	d101      	bne.n	801208c <xQueueGenericSendFromISR+0x44>
 8012088:	2301      	movs	r3, #1
 801208a:	e000      	b.n	801208e <xQueueGenericSendFromISR+0x46>
 801208c:	2300      	movs	r3, #0
 801208e:	2b00      	cmp	r3, #0
 8012090:	d10c      	bne.n	80120ac <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8012092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012096:	b672      	cpsid	i
 8012098:	f383 8811 	msr	BASEPRI, r3
 801209c:	f3bf 8f6f 	isb	sy
 80120a0:	f3bf 8f4f 	dsb	sy
 80120a4:	b662      	cpsie	i
 80120a6:	623b      	str	r3, [r7, #32]
}
 80120a8:	bf00      	nop
 80120aa:	e7fe      	b.n	80120aa <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80120ac:	683b      	ldr	r3, [r7, #0]
 80120ae:	2b02      	cmp	r3, #2
 80120b0:	d103      	bne.n	80120ba <xQueueGenericSendFromISR+0x72>
 80120b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120b6:	2b01      	cmp	r3, #1
 80120b8:	d101      	bne.n	80120be <xQueueGenericSendFromISR+0x76>
 80120ba:	2301      	movs	r3, #1
 80120bc:	e000      	b.n	80120c0 <xQueueGenericSendFromISR+0x78>
 80120be:	2300      	movs	r3, #0
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d10c      	bne.n	80120de <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80120c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120c8:	b672      	cpsid	i
 80120ca:	f383 8811 	msr	BASEPRI, r3
 80120ce:	f3bf 8f6f 	isb	sy
 80120d2:	f3bf 8f4f 	dsb	sy
 80120d6:	b662      	cpsie	i
 80120d8:	61fb      	str	r3, [r7, #28]
}
 80120da:	bf00      	nop
 80120dc:	e7fe      	b.n	80120dc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80120de:	f001 fc05 	bl	80138ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80120e2:	f3ef 8211 	mrs	r2, BASEPRI
 80120e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120ea:	b672      	cpsid	i
 80120ec:	f383 8811 	msr	BASEPRI, r3
 80120f0:	f3bf 8f6f 	isb	sy
 80120f4:	f3bf 8f4f 	dsb	sy
 80120f8:	b662      	cpsie	i
 80120fa:	61ba      	str	r2, [r7, #24]
 80120fc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80120fe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012100:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801210a:	429a      	cmp	r2, r3
 801210c:	d302      	bcc.n	8012114 <xQueueGenericSendFromISR+0xcc>
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	2b02      	cmp	r3, #2
 8012112:	d12c      	bne.n	801216e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801211a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801211e:	683a      	ldr	r2, [r7, #0]
 8012120:	68b9      	ldr	r1, [r7, #8]
 8012122:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012124:	f000 f99c 	bl	8012460 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012128:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801212c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012130:	d112      	bne.n	8012158 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012136:	2b00      	cmp	r3, #0
 8012138:	d016      	beq.n	8012168 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801213a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801213c:	3324      	adds	r3, #36	; 0x24
 801213e:	4618      	mov	r0, r3
 8012140:	f000 ff0e 	bl	8012f60 <xTaskRemoveFromEventList>
 8012144:	4603      	mov	r3, r0
 8012146:	2b00      	cmp	r3, #0
 8012148:	d00e      	beq.n	8012168 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d00b      	beq.n	8012168 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2201      	movs	r2, #1
 8012154:	601a      	str	r2, [r3, #0]
 8012156:	e007      	b.n	8012168 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012158:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801215c:	3301      	adds	r3, #1
 801215e:	b2db      	uxtb	r3, r3
 8012160:	b25a      	sxtb	r2, r3
 8012162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012168:	2301      	movs	r3, #1
 801216a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801216c:	e001      	b.n	8012172 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801216e:	2300      	movs	r3, #0
 8012170:	637b      	str	r3, [r7, #52]	; 0x34
 8012172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012174:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801217c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801217e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012180:	4618      	mov	r0, r3
 8012182:	3738      	adds	r7, #56	; 0x38
 8012184:	46bd      	mov	sp, r7
 8012186:	bd80      	pop	{r7, pc}

08012188 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b08c      	sub	sp, #48	; 0x30
 801218c:	af00      	add	r7, sp, #0
 801218e:	60f8      	str	r0, [r7, #12]
 8012190:	60b9      	str	r1, [r7, #8]
 8012192:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012194:	2300      	movs	r3, #0
 8012196:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801219c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d10c      	bne.n	80121bc <xQueueReceive+0x34>
	__asm volatile
 80121a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a6:	b672      	cpsid	i
 80121a8:	f383 8811 	msr	BASEPRI, r3
 80121ac:	f3bf 8f6f 	isb	sy
 80121b0:	f3bf 8f4f 	dsb	sy
 80121b4:	b662      	cpsie	i
 80121b6:	623b      	str	r3, [r7, #32]
}
 80121b8:	bf00      	nop
 80121ba:	e7fe      	b.n	80121ba <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80121bc:	68bb      	ldr	r3, [r7, #8]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d103      	bne.n	80121ca <xQueueReceive+0x42>
 80121c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d101      	bne.n	80121ce <xQueueReceive+0x46>
 80121ca:	2301      	movs	r3, #1
 80121cc:	e000      	b.n	80121d0 <xQueueReceive+0x48>
 80121ce:	2300      	movs	r3, #0
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d10c      	bne.n	80121ee <xQueueReceive+0x66>
	__asm volatile
 80121d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d8:	b672      	cpsid	i
 80121da:	f383 8811 	msr	BASEPRI, r3
 80121de:	f3bf 8f6f 	isb	sy
 80121e2:	f3bf 8f4f 	dsb	sy
 80121e6:	b662      	cpsie	i
 80121e8:	61fb      	str	r3, [r7, #28]
}
 80121ea:	bf00      	nop
 80121ec:	e7fe      	b.n	80121ec <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80121ee:	f001 f87d 	bl	80132ec <xTaskGetSchedulerState>
 80121f2:	4603      	mov	r3, r0
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d102      	bne.n	80121fe <xQueueReceive+0x76>
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d101      	bne.n	8012202 <xQueueReceive+0x7a>
 80121fe:	2301      	movs	r3, #1
 8012200:	e000      	b.n	8012204 <xQueueReceive+0x7c>
 8012202:	2300      	movs	r3, #0
 8012204:	2b00      	cmp	r3, #0
 8012206:	d10c      	bne.n	8012222 <xQueueReceive+0x9a>
	__asm volatile
 8012208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801220c:	b672      	cpsid	i
 801220e:	f383 8811 	msr	BASEPRI, r3
 8012212:	f3bf 8f6f 	isb	sy
 8012216:	f3bf 8f4f 	dsb	sy
 801221a:	b662      	cpsie	i
 801221c:	61bb      	str	r3, [r7, #24]
}
 801221e:	bf00      	nop
 8012220:	e7fe      	b.n	8012220 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012222:	f001 fa7b 	bl	801371c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801222a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801222e:	2b00      	cmp	r3, #0
 8012230:	d01f      	beq.n	8012272 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012232:	68b9      	ldr	r1, [r7, #8]
 8012234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012236:	f000 f97d 	bl	8012534 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801223c:	1e5a      	subs	r2, r3, #1
 801223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012240:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012244:	691b      	ldr	r3, [r3, #16]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d00f      	beq.n	801226a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801224c:	3310      	adds	r3, #16
 801224e:	4618      	mov	r0, r3
 8012250:	f000 fe86 	bl	8012f60 <xTaskRemoveFromEventList>
 8012254:	4603      	mov	r3, r0
 8012256:	2b00      	cmp	r3, #0
 8012258:	d007      	beq.n	801226a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801225a:	4b3d      	ldr	r3, [pc, #244]	; (8012350 <xQueueReceive+0x1c8>)
 801225c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012260:	601a      	str	r2, [r3, #0]
 8012262:	f3bf 8f4f 	dsb	sy
 8012266:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801226a:	f001 fa8b 	bl	8013784 <vPortExitCritical>
				return pdPASS;
 801226e:	2301      	movs	r3, #1
 8012270:	e069      	b.n	8012346 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d103      	bne.n	8012280 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012278:	f001 fa84 	bl	8013784 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801227c:	2300      	movs	r3, #0
 801227e:	e062      	b.n	8012346 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012282:	2b00      	cmp	r3, #0
 8012284:	d106      	bne.n	8012294 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012286:	f107 0310 	add.w	r3, r7, #16
 801228a:	4618      	mov	r0, r3
 801228c:	f000 fecc 	bl	8013028 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012290:	2301      	movs	r3, #1
 8012292:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012294:	f001 fa76 	bl	8013784 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012298:	f000 fc32 	bl	8012b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801229c:	f001 fa3e 	bl	801371c <vPortEnterCritical>
 80122a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80122a6:	b25b      	sxtb	r3, r3
 80122a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80122ac:	d103      	bne.n	80122b6 <xQueueReceive+0x12e>
 80122ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b0:	2200      	movs	r2, #0
 80122b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80122b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80122bc:	b25b      	sxtb	r3, r3
 80122be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80122c2:	d103      	bne.n	80122cc <xQueueReceive+0x144>
 80122c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122c6:	2200      	movs	r2, #0
 80122c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80122cc:	f001 fa5a 	bl	8013784 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80122d0:	1d3a      	adds	r2, r7, #4
 80122d2:	f107 0310 	add.w	r3, r7, #16
 80122d6:	4611      	mov	r1, r2
 80122d8:	4618      	mov	r0, r3
 80122da:	f000 febb 	bl	8013054 <xTaskCheckForTimeOut>
 80122de:	4603      	mov	r3, r0
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d123      	bne.n	801232c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80122e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122e6:	f000 f99d 	bl	8012624 <prvIsQueueEmpty>
 80122ea:	4603      	mov	r3, r0
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d017      	beq.n	8012320 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80122f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122f2:	3324      	adds	r3, #36	; 0x24
 80122f4:	687a      	ldr	r2, [r7, #4]
 80122f6:	4611      	mov	r1, r2
 80122f8:	4618      	mov	r0, r3
 80122fa:	f000 fe0b 	bl	8012f14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80122fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012300:	f000 f93e 	bl	8012580 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012304:	f000 fc0a 	bl	8012b1c <xTaskResumeAll>
 8012308:	4603      	mov	r3, r0
 801230a:	2b00      	cmp	r3, #0
 801230c:	d189      	bne.n	8012222 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 801230e:	4b10      	ldr	r3, [pc, #64]	; (8012350 <xQueueReceive+0x1c8>)
 8012310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012314:	601a      	str	r2, [r3, #0]
 8012316:	f3bf 8f4f 	dsb	sy
 801231a:	f3bf 8f6f 	isb	sy
 801231e:	e780      	b.n	8012222 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012322:	f000 f92d 	bl	8012580 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012326:	f000 fbf9 	bl	8012b1c <xTaskResumeAll>
 801232a:	e77a      	b.n	8012222 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801232c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801232e:	f000 f927 	bl	8012580 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012332:	f000 fbf3 	bl	8012b1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012338:	f000 f974 	bl	8012624 <prvIsQueueEmpty>
 801233c:	4603      	mov	r3, r0
 801233e:	2b00      	cmp	r3, #0
 8012340:	f43f af6f 	beq.w	8012222 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012344:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012346:	4618      	mov	r0, r3
 8012348:	3730      	adds	r7, #48	; 0x30
 801234a:	46bd      	mov	sp, r7
 801234c:	bd80      	pop	{r7, pc}
 801234e:	bf00      	nop
 8012350:	e000ed04 	.word	0xe000ed04

08012354 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b08e      	sub	sp, #56	; 0x38
 8012358:	af00      	add	r7, sp, #0
 801235a:	60f8      	str	r0, [r7, #12]
 801235c:	60b9      	str	r1, [r7, #8]
 801235e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012366:	2b00      	cmp	r3, #0
 8012368:	d10c      	bne.n	8012384 <xQueueReceiveFromISR+0x30>
	__asm volatile
 801236a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801236e:	b672      	cpsid	i
 8012370:	f383 8811 	msr	BASEPRI, r3
 8012374:	f3bf 8f6f 	isb	sy
 8012378:	f3bf 8f4f 	dsb	sy
 801237c:	b662      	cpsie	i
 801237e:	623b      	str	r3, [r7, #32]
}
 8012380:	bf00      	nop
 8012382:	e7fe      	b.n	8012382 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d103      	bne.n	8012392 <xQueueReceiveFromISR+0x3e>
 801238a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801238e:	2b00      	cmp	r3, #0
 8012390:	d101      	bne.n	8012396 <xQueueReceiveFromISR+0x42>
 8012392:	2301      	movs	r3, #1
 8012394:	e000      	b.n	8012398 <xQueueReceiveFromISR+0x44>
 8012396:	2300      	movs	r3, #0
 8012398:	2b00      	cmp	r3, #0
 801239a:	d10c      	bne.n	80123b6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 801239c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123a0:	b672      	cpsid	i
 80123a2:	f383 8811 	msr	BASEPRI, r3
 80123a6:	f3bf 8f6f 	isb	sy
 80123aa:	f3bf 8f4f 	dsb	sy
 80123ae:	b662      	cpsie	i
 80123b0:	61fb      	str	r3, [r7, #28]
}
 80123b2:	bf00      	nop
 80123b4:	e7fe      	b.n	80123b4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80123b6:	f001 fa99 	bl	80138ec <vPortValidateInterruptPriority>
	__asm volatile
 80123ba:	f3ef 8211 	mrs	r2, BASEPRI
 80123be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123c2:	b672      	cpsid	i
 80123c4:	f383 8811 	msr	BASEPRI, r3
 80123c8:	f3bf 8f6f 	isb	sy
 80123cc:	f3bf 8f4f 	dsb	sy
 80123d0:	b662      	cpsie	i
 80123d2:	61ba      	str	r2, [r7, #24]
 80123d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80123d6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80123d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80123da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80123e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d02f      	beq.n	8012446 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80123e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80123ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80123f0:	68b9      	ldr	r1, [r7, #8]
 80123f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123f4:	f000 f89e 	bl	8012534 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80123f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123fa:	1e5a      	subs	r2, r3, #1
 80123fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012400:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012408:	d112      	bne.n	8012430 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801240c:	691b      	ldr	r3, [r3, #16]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d016      	beq.n	8012440 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012414:	3310      	adds	r3, #16
 8012416:	4618      	mov	r0, r3
 8012418:	f000 fda2 	bl	8012f60 <xTaskRemoveFromEventList>
 801241c:	4603      	mov	r3, r0
 801241e:	2b00      	cmp	r3, #0
 8012420:	d00e      	beq.n	8012440 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d00b      	beq.n	8012440 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	2201      	movs	r2, #1
 801242c:	601a      	str	r2, [r3, #0]
 801242e:	e007      	b.n	8012440 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012434:	3301      	adds	r3, #1
 8012436:	b2db      	uxtb	r3, r3
 8012438:	b25a      	sxtb	r2, r3
 801243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801243c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012440:	2301      	movs	r3, #1
 8012442:	637b      	str	r3, [r7, #52]	; 0x34
 8012444:	e001      	b.n	801244a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8012446:	2300      	movs	r3, #0
 8012448:	637b      	str	r3, [r7, #52]	; 0x34
 801244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801244c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801244e:	693b      	ldr	r3, [r7, #16]
 8012450:	f383 8811 	msr	BASEPRI, r3
}
 8012454:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012458:	4618      	mov	r0, r3
 801245a:	3738      	adds	r7, #56	; 0x38
 801245c:	46bd      	mov	sp, r7
 801245e:	bd80      	pop	{r7, pc}

08012460 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b086      	sub	sp, #24
 8012464:	af00      	add	r7, sp, #0
 8012466:	60f8      	str	r0, [r7, #12]
 8012468:	60b9      	str	r1, [r7, #8]
 801246a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801246c:	2300      	movs	r3, #0
 801246e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012474:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801247a:	2b00      	cmp	r3, #0
 801247c:	d10d      	bne.n	801249a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d14d      	bne.n	8012522 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	689b      	ldr	r3, [r3, #8]
 801248a:	4618      	mov	r0, r3
 801248c:	f000 ff4c 	bl	8013328 <xTaskPriorityDisinherit>
 8012490:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	2200      	movs	r2, #0
 8012496:	609a      	str	r2, [r3, #8]
 8012498:	e043      	b.n	8012522 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d119      	bne.n	80124d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	6858      	ldr	r0, [r3, #4]
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124a8:	461a      	mov	r2, r3
 80124aa:	68b9      	ldr	r1, [r7, #8]
 80124ac:	f001 ff7c 	bl	80143a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	685a      	ldr	r2, [r3, #4]
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124b8:	441a      	add	r2, r3
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	685a      	ldr	r2, [r3, #4]
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	689b      	ldr	r3, [r3, #8]
 80124c6:	429a      	cmp	r2, r3
 80124c8:	d32b      	bcc.n	8012522 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	681a      	ldr	r2, [r3, #0]
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	605a      	str	r2, [r3, #4]
 80124d2:	e026      	b.n	8012522 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	68d8      	ldr	r0, [r3, #12]
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124dc:	461a      	mov	r2, r3
 80124de:	68b9      	ldr	r1, [r7, #8]
 80124e0:	f001 ff62 	bl	80143a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	68da      	ldr	r2, [r3, #12]
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124ec:	425b      	negs	r3, r3
 80124ee:	441a      	add	r2, r3
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	68da      	ldr	r2, [r3, #12]
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	429a      	cmp	r2, r3
 80124fe:	d207      	bcs.n	8012510 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	689a      	ldr	r2, [r3, #8]
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012508:	425b      	negs	r3, r3
 801250a:	441a      	add	r2, r3
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	2b02      	cmp	r3, #2
 8012514:	d105      	bne.n	8012522 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012516:	693b      	ldr	r3, [r7, #16]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d002      	beq.n	8012522 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801251c:	693b      	ldr	r3, [r7, #16]
 801251e:	3b01      	subs	r3, #1
 8012520:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	1c5a      	adds	r2, r3, #1
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801252a:	697b      	ldr	r3, [r7, #20]
}
 801252c:	4618      	mov	r0, r3
 801252e:	3718      	adds	r7, #24
 8012530:	46bd      	mov	sp, r7
 8012532:	bd80      	pop	{r7, pc}

08012534 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b082      	sub	sp, #8
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
 801253c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012542:	2b00      	cmp	r3, #0
 8012544:	d018      	beq.n	8012578 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	68da      	ldr	r2, [r3, #12]
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801254e:	441a      	add	r2, r3
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	68da      	ldr	r2, [r3, #12]
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	689b      	ldr	r3, [r3, #8]
 801255c:	429a      	cmp	r2, r3
 801255e:	d303      	bcc.n	8012568 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	681a      	ldr	r2, [r3, #0]
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	68d9      	ldr	r1, [r3, #12]
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012570:	461a      	mov	r2, r3
 8012572:	6838      	ldr	r0, [r7, #0]
 8012574:	f001 ff18 	bl	80143a8 <memcpy>
	}
}
 8012578:	bf00      	nop
 801257a:	3708      	adds	r7, #8
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}

08012580 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b084      	sub	sp, #16
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012588:	f001 f8c8 	bl	801371c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012592:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012594:	e011      	b.n	80125ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801259a:	2b00      	cmp	r3, #0
 801259c:	d012      	beq.n	80125c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	3324      	adds	r3, #36	; 0x24
 80125a2:	4618      	mov	r0, r3
 80125a4:	f000 fcdc 	bl	8012f60 <xTaskRemoveFromEventList>
 80125a8:	4603      	mov	r3, r0
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d001      	beq.n	80125b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80125ae:	f000 fdb7 	bl	8013120 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80125b2:	7bfb      	ldrb	r3, [r7, #15]
 80125b4:	3b01      	subs	r3, #1
 80125b6:	b2db      	uxtb	r3, r3
 80125b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80125ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	dce9      	bgt.n	8012596 <prvUnlockQueue+0x16>
 80125c2:	e000      	b.n	80125c6 <prvUnlockQueue+0x46>
					break;
 80125c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	22ff      	movs	r2, #255	; 0xff
 80125ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80125ce:	f001 f8d9 	bl	8013784 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80125d2:	f001 f8a3 	bl	801371c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80125dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80125de:	e011      	b.n	8012604 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	691b      	ldr	r3, [r3, #16]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d012      	beq.n	801260e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	3310      	adds	r3, #16
 80125ec:	4618      	mov	r0, r3
 80125ee:	f000 fcb7 	bl	8012f60 <xTaskRemoveFromEventList>
 80125f2:	4603      	mov	r3, r0
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d001      	beq.n	80125fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80125f8:	f000 fd92 	bl	8013120 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80125fc:	7bbb      	ldrb	r3, [r7, #14]
 80125fe:	3b01      	subs	r3, #1
 8012600:	b2db      	uxtb	r3, r3
 8012602:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012604:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012608:	2b00      	cmp	r3, #0
 801260a:	dce9      	bgt.n	80125e0 <prvUnlockQueue+0x60>
 801260c:	e000      	b.n	8012610 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801260e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	22ff      	movs	r2, #255	; 0xff
 8012614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012618:	f001 f8b4 	bl	8013784 <vPortExitCritical>
}
 801261c:	bf00      	nop
 801261e:	3710      	adds	r7, #16
 8012620:	46bd      	mov	sp, r7
 8012622:	bd80      	pop	{r7, pc}

08012624 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b084      	sub	sp, #16
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801262c:	f001 f876 	bl	801371c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012634:	2b00      	cmp	r3, #0
 8012636:	d102      	bne.n	801263e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012638:	2301      	movs	r3, #1
 801263a:	60fb      	str	r3, [r7, #12]
 801263c:	e001      	b.n	8012642 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801263e:	2300      	movs	r3, #0
 8012640:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012642:	f001 f89f 	bl	8013784 <vPortExitCritical>

	return xReturn;
 8012646:	68fb      	ldr	r3, [r7, #12]
}
 8012648:	4618      	mov	r0, r3
 801264a:	3710      	adds	r7, #16
 801264c:	46bd      	mov	sp, r7
 801264e:	bd80      	pop	{r7, pc}

08012650 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b084      	sub	sp, #16
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012658:	f001 f860 	bl	801371c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012664:	429a      	cmp	r2, r3
 8012666:	d102      	bne.n	801266e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012668:	2301      	movs	r3, #1
 801266a:	60fb      	str	r3, [r7, #12]
 801266c:	e001      	b.n	8012672 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801266e:	2300      	movs	r3, #0
 8012670:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012672:	f001 f887 	bl	8013784 <vPortExitCritical>

	return xReturn;
 8012676:	68fb      	ldr	r3, [r7, #12]
}
 8012678:	4618      	mov	r0, r3
 801267a:	3710      	adds	r7, #16
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}

08012680 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012680:	b580      	push	{r7, lr}
 8012682:	b08e      	sub	sp, #56	; 0x38
 8012684:	af04      	add	r7, sp, #16
 8012686:	60f8      	str	r0, [r7, #12]
 8012688:	60b9      	str	r1, [r7, #8]
 801268a:	607a      	str	r2, [r7, #4]
 801268c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801268e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012690:	2b00      	cmp	r3, #0
 8012692:	d10c      	bne.n	80126ae <xTaskCreateStatic+0x2e>
	__asm volatile
 8012694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012698:	b672      	cpsid	i
 801269a:	f383 8811 	msr	BASEPRI, r3
 801269e:	f3bf 8f6f 	isb	sy
 80126a2:	f3bf 8f4f 	dsb	sy
 80126a6:	b662      	cpsie	i
 80126a8:	623b      	str	r3, [r7, #32]
}
 80126aa:	bf00      	nop
 80126ac:	e7fe      	b.n	80126ac <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80126ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d10c      	bne.n	80126ce <xTaskCreateStatic+0x4e>
	__asm volatile
 80126b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b8:	b672      	cpsid	i
 80126ba:	f383 8811 	msr	BASEPRI, r3
 80126be:	f3bf 8f6f 	isb	sy
 80126c2:	f3bf 8f4f 	dsb	sy
 80126c6:	b662      	cpsie	i
 80126c8:	61fb      	str	r3, [r7, #28]
}
 80126ca:	bf00      	nop
 80126cc:	e7fe      	b.n	80126cc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80126ce:	2358      	movs	r3, #88	; 0x58
 80126d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80126d2:	693b      	ldr	r3, [r7, #16]
 80126d4:	2b58      	cmp	r3, #88	; 0x58
 80126d6:	d00c      	beq.n	80126f2 <xTaskCreateStatic+0x72>
	__asm volatile
 80126d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126dc:	b672      	cpsid	i
 80126de:	f383 8811 	msr	BASEPRI, r3
 80126e2:	f3bf 8f6f 	isb	sy
 80126e6:	f3bf 8f4f 	dsb	sy
 80126ea:	b662      	cpsie	i
 80126ec:	61bb      	str	r3, [r7, #24]
}
 80126ee:	bf00      	nop
 80126f0:	e7fe      	b.n	80126f0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80126f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80126f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d01e      	beq.n	8012738 <xTaskCreateStatic+0xb8>
 80126fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d01b      	beq.n	8012738 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012702:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012708:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801270c:	2202      	movs	r2, #2
 801270e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012712:	2300      	movs	r3, #0
 8012714:	9303      	str	r3, [sp, #12]
 8012716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012718:	9302      	str	r3, [sp, #8]
 801271a:	f107 0314 	add.w	r3, r7, #20
 801271e:	9301      	str	r3, [sp, #4]
 8012720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012722:	9300      	str	r3, [sp, #0]
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	687a      	ldr	r2, [r7, #4]
 8012728:	68b9      	ldr	r1, [r7, #8]
 801272a:	68f8      	ldr	r0, [r7, #12]
 801272c:	f000 f850 	bl	80127d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012732:	f000 f8e1 	bl	80128f8 <prvAddNewTaskToReadyList>
 8012736:	e001      	b.n	801273c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8012738:	2300      	movs	r3, #0
 801273a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801273c:	697b      	ldr	r3, [r7, #20]
	}
 801273e:	4618      	mov	r0, r3
 8012740:	3728      	adds	r7, #40	; 0x28
 8012742:	46bd      	mov	sp, r7
 8012744:	bd80      	pop	{r7, pc}

08012746 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012746:	b580      	push	{r7, lr}
 8012748:	b08c      	sub	sp, #48	; 0x30
 801274a:	af04      	add	r7, sp, #16
 801274c:	60f8      	str	r0, [r7, #12]
 801274e:	60b9      	str	r1, [r7, #8]
 8012750:	603b      	str	r3, [r7, #0]
 8012752:	4613      	mov	r3, r2
 8012754:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012756:	88fb      	ldrh	r3, [r7, #6]
 8012758:	009b      	lsls	r3, r3, #2
 801275a:	4618      	mov	r0, r3
 801275c:	f001 f90a 	bl	8013974 <pvPortMalloc>
 8012760:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012762:	697b      	ldr	r3, [r7, #20]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d00e      	beq.n	8012786 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012768:	2058      	movs	r0, #88	; 0x58
 801276a:	f001 f903 	bl	8013974 <pvPortMalloc>
 801276e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012770:	69fb      	ldr	r3, [r7, #28]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d003      	beq.n	801277e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012776:	69fb      	ldr	r3, [r7, #28]
 8012778:	697a      	ldr	r2, [r7, #20]
 801277a:	631a      	str	r2, [r3, #48]	; 0x30
 801277c:	e005      	b.n	801278a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801277e:	6978      	ldr	r0, [r7, #20]
 8012780:	f001 f9c8 	bl	8013b14 <vPortFree>
 8012784:	e001      	b.n	801278a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012786:	2300      	movs	r3, #0
 8012788:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801278a:	69fb      	ldr	r3, [r7, #28]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d017      	beq.n	80127c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012790:	69fb      	ldr	r3, [r7, #28]
 8012792:	2200      	movs	r2, #0
 8012794:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012798:	88fa      	ldrh	r2, [r7, #6]
 801279a:	2300      	movs	r3, #0
 801279c:	9303      	str	r3, [sp, #12]
 801279e:	69fb      	ldr	r3, [r7, #28]
 80127a0:	9302      	str	r3, [sp, #8]
 80127a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a4:	9301      	str	r3, [sp, #4]
 80127a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127a8:	9300      	str	r3, [sp, #0]
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	68b9      	ldr	r1, [r7, #8]
 80127ae:	68f8      	ldr	r0, [r7, #12]
 80127b0:	f000 f80e 	bl	80127d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80127b4:	69f8      	ldr	r0, [r7, #28]
 80127b6:	f000 f89f 	bl	80128f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80127ba:	2301      	movs	r3, #1
 80127bc:	61bb      	str	r3, [r7, #24]
 80127be:	e002      	b.n	80127c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80127c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80127c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80127c6:	69bb      	ldr	r3, [r7, #24]
	}
 80127c8:	4618      	mov	r0, r3
 80127ca:	3720      	adds	r7, #32
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}

080127d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b088      	sub	sp, #32
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	60f8      	str	r0, [r7, #12]
 80127d8:	60b9      	str	r1, [r7, #8]
 80127da:	607a      	str	r2, [r7, #4]
 80127dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80127de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	009b      	lsls	r3, r3, #2
 80127e6:	461a      	mov	r2, r3
 80127e8:	21a5      	movs	r1, #165	; 0xa5
 80127ea:	f001 fdeb 	bl	80143c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80127ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80127f2:	6879      	ldr	r1, [r7, #4]
 80127f4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80127f8:	440b      	add	r3, r1
 80127fa:	009b      	lsls	r3, r3, #2
 80127fc:	4413      	add	r3, r2
 80127fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012800:	69bb      	ldr	r3, [r7, #24]
 8012802:	f023 0307 	bic.w	r3, r3, #7
 8012806:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012808:	69bb      	ldr	r3, [r7, #24]
 801280a:	f003 0307 	and.w	r3, r3, #7
 801280e:	2b00      	cmp	r3, #0
 8012810:	d00c      	beq.n	801282c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8012812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012816:	b672      	cpsid	i
 8012818:	f383 8811 	msr	BASEPRI, r3
 801281c:	f3bf 8f6f 	isb	sy
 8012820:	f3bf 8f4f 	dsb	sy
 8012824:	b662      	cpsie	i
 8012826:	617b      	str	r3, [r7, #20]
}
 8012828:	bf00      	nop
 801282a:	e7fe      	b.n	801282a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d01f      	beq.n	8012872 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012832:	2300      	movs	r3, #0
 8012834:	61fb      	str	r3, [r7, #28]
 8012836:	e012      	b.n	801285e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012838:	68ba      	ldr	r2, [r7, #8]
 801283a:	69fb      	ldr	r3, [r7, #28]
 801283c:	4413      	add	r3, r2
 801283e:	7819      	ldrb	r1, [r3, #0]
 8012840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012842:	69fb      	ldr	r3, [r7, #28]
 8012844:	4413      	add	r3, r2
 8012846:	3334      	adds	r3, #52	; 0x34
 8012848:	460a      	mov	r2, r1
 801284a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801284c:	68ba      	ldr	r2, [r7, #8]
 801284e:	69fb      	ldr	r3, [r7, #28]
 8012850:	4413      	add	r3, r2
 8012852:	781b      	ldrb	r3, [r3, #0]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d006      	beq.n	8012866 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012858:	69fb      	ldr	r3, [r7, #28]
 801285a:	3301      	adds	r3, #1
 801285c:	61fb      	str	r3, [r7, #28]
 801285e:	69fb      	ldr	r3, [r7, #28]
 8012860:	2b0f      	cmp	r3, #15
 8012862:	d9e9      	bls.n	8012838 <prvInitialiseNewTask+0x68>
 8012864:	e000      	b.n	8012868 <prvInitialiseNewTask+0x98>
			{
				break;
 8012866:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801286a:	2200      	movs	r2, #0
 801286c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012870:	e003      	b.n	801287a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012874:	2200      	movs	r2, #0
 8012876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801287c:	2b06      	cmp	r3, #6
 801287e:	d901      	bls.n	8012884 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012880:	2306      	movs	r3, #6
 8012882:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012888:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801288c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801288e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012892:	2200      	movs	r2, #0
 8012894:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012898:	3304      	adds	r3, #4
 801289a:	4618      	mov	r0, r3
 801289c:	f7ff f8ec 	bl	8011a78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80128a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128a2:	3318      	adds	r3, #24
 80128a4:	4618      	mov	r0, r3
 80128a6:	f7ff f8e7 	bl	8011a78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80128aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80128b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128b2:	f1c3 0207 	rsb	r2, r3, #7
 80128b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80128ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80128c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128c2:	2200      	movs	r2, #0
 80128c4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80128c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128c8:	2200      	movs	r2, #0
 80128ca:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80128cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ce:	2200      	movs	r2, #0
 80128d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80128d4:	683a      	ldr	r2, [r7, #0]
 80128d6:	68f9      	ldr	r1, [r7, #12]
 80128d8:	69b8      	ldr	r0, [r7, #24]
 80128da:	f000 fe15 	bl	8013508 <pxPortInitialiseStack>
 80128de:	4602      	mov	r2, r0
 80128e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80128e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d002      	beq.n	80128f0 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80128ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80128f0:	bf00      	nop
 80128f2:	3720      	adds	r7, #32
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}

080128f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b082      	sub	sp, #8
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012900:	f000 ff0c 	bl	801371c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012904:	4b2a      	ldr	r3, [pc, #168]	; (80129b0 <prvAddNewTaskToReadyList+0xb8>)
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	3301      	adds	r3, #1
 801290a:	4a29      	ldr	r2, [pc, #164]	; (80129b0 <prvAddNewTaskToReadyList+0xb8>)
 801290c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801290e:	4b29      	ldr	r3, [pc, #164]	; (80129b4 <prvAddNewTaskToReadyList+0xbc>)
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d109      	bne.n	801292a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012916:	4a27      	ldr	r2, [pc, #156]	; (80129b4 <prvAddNewTaskToReadyList+0xbc>)
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801291c:	4b24      	ldr	r3, [pc, #144]	; (80129b0 <prvAddNewTaskToReadyList+0xb8>)
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	2b01      	cmp	r3, #1
 8012922:	d110      	bne.n	8012946 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012924:	f000 fc22 	bl	801316c <prvInitialiseTaskLists>
 8012928:	e00d      	b.n	8012946 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801292a:	4b23      	ldr	r3, [pc, #140]	; (80129b8 <prvAddNewTaskToReadyList+0xc0>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d109      	bne.n	8012946 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012932:	4b20      	ldr	r3, [pc, #128]	; (80129b4 <prvAddNewTaskToReadyList+0xbc>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801293c:	429a      	cmp	r2, r3
 801293e:	d802      	bhi.n	8012946 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012940:	4a1c      	ldr	r2, [pc, #112]	; (80129b4 <prvAddNewTaskToReadyList+0xbc>)
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012946:	4b1d      	ldr	r3, [pc, #116]	; (80129bc <prvAddNewTaskToReadyList+0xc4>)
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	3301      	adds	r3, #1
 801294c:	4a1b      	ldr	r2, [pc, #108]	; (80129bc <prvAddNewTaskToReadyList+0xc4>)
 801294e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012954:	2201      	movs	r2, #1
 8012956:	409a      	lsls	r2, r3
 8012958:	4b19      	ldr	r3, [pc, #100]	; (80129c0 <prvAddNewTaskToReadyList+0xc8>)
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	4313      	orrs	r3, r2
 801295e:	4a18      	ldr	r2, [pc, #96]	; (80129c0 <prvAddNewTaskToReadyList+0xc8>)
 8012960:	6013      	str	r3, [r2, #0]
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012966:	4613      	mov	r3, r2
 8012968:	009b      	lsls	r3, r3, #2
 801296a:	4413      	add	r3, r2
 801296c:	009b      	lsls	r3, r3, #2
 801296e:	4a15      	ldr	r2, [pc, #84]	; (80129c4 <prvAddNewTaskToReadyList+0xcc>)
 8012970:	441a      	add	r2, r3
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	3304      	adds	r3, #4
 8012976:	4619      	mov	r1, r3
 8012978:	4610      	mov	r0, r2
 801297a:	f7ff f88a 	bl	8011a92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801297e:	f000 ff01 	bl	8013784 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012982:	4b0d      	ldr	r3, [pc, #52]	; (80129b8 <prvAddNewTaskToReadyList+0xc0>)
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d00e      	beq.n	80129a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801298a:	4b0a      	ldr	r3, [pc, #40]	; (80129b4 <prvAddNewTaskToReadyList+0xbc>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012994:	429a      	cmp	r2, r3
 8012996:	d207      	bcs.n	80129a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012998:	4b0b      	ldr	r3, [pc, #44]	; (80129c8 <prvAddNewTaskToReadyList+0xd0>)
 801299a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801299e:	601a      	str	r2, [r3, #0]
 80129a0:	f3bf 8f4f 	dsb	sy
 80129a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80129a8:	bf00      	nop
 80129aa:	3708      	adds	r7, #8
 80129ac:	46bd      	mov	sp, r7
 80129ae:	bd80      	pop	{r7, pc}
 80129b0:	20000ec8 	.word	0x20000ec8
 80129b4:	20000dc8 	.word	0x20000dc8
 80129b8:	20000ed4 	.word	0x20000ed4
 80129bc:	20000ee4 	.word	0x20000ee4
 80129c0:	20000ed0 	.word	0x20000ed0
 80129c4:	20000dcc 	.word	0x20000dcc
 80129c8:	e000ed04 	.word	0xe000ed04

080129cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b084      	sub	sp, #16
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80129d4:	2300      	movs	r3, #0
 80129d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d019      	beq.n	8012a12 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80129de:	4b14      	ldr	r3, [pc, #80]	; (8012a30 <vTaskDelay+0x64>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d00c      	beq.n	8012a00 <vTaskDelay+0x34>
	__asm volatile
 80129e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ea:	b672      	cpsid	i
 80129ec:	f383 8811 	msr	BASEPRI, r3
 80129f0:	f3bf 8f6f 	isb	sy
 80129f4:	f3bf 8f4f 	dsb	sy
 80129f8:	b662      	cpsie	i
 80129fa:	60bb      	str	r3, [r7, #8]
}
 80129fc:	bf00      	nop
 80129fe:	e7fe      	b.n	80129fe <vTaskDelay+0x32>
			vTaskSuspendAll();
 8012a00:	f000 f87e 	bl	8012b00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012a04:	2100      	movs	r1, #0
 8012a06:	6878      	ldr	r0, [r7, #4]
 8012a08:	f000 fd18 	bl	801343c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012a0c:	f000 f886 	bl	8012b1c <xTaskResumeAll>
 8012a10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d107      	bne.n	8012a28 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8012a18:	4b06      	ldr	r3, [pc, #24]	; (8012a34 <vTaskDelay+0x68>)
 8012a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a1e:	601a      	str	r2, [r3, #0]
 8012a20:	f3bf 8f4f 	dsb	sy
 8012a24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012a28:	bf00      	nop
 8012a2a:	3710      	adds	r7, #16
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	bd80      	pop	{r7, pc}
 8012a30:	20000ef0 	.word	0x20000ef0
 8012a34:	e000ed04 	.word	0xe000ed04

08012a38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b08a      	sub	sp, #40	; 0x28
 8012a3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012a42:	2300      	movs	r3, #0
 8012a44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012a46:	463a      	mov	r2, r7
 8012a48:	1d39      	adds	r1, r7, #4
 8012a4a:	f107 0308 	add.w	r3, r7, #8
 8012a4e:	4618      	mov	r0, r3
 8012a50:	f7ed fdca 	bl	80005e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012a54:	6839      	ldr	r1, [r7, #0]
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	68ba      	ldr	r2, [r7, #8]
 8012a5a:	9202      	str	r2, [sp, #8]
 8012a5c:	9301      	str	r3, [sp, #4]
 8012a5e:	2300      	movs	r3, #0
 8012a60:	9300      	str	r3, [sp, #0]
 8012a62:	2300      	movs	r3, #0
 8012a64:	460a      	mov	r2, r1
 8012a66:	4920      	ldr	r1, [pc, #128]	; (8012ae8 <vTaskStartScheduler+0xb0>)
 8012a68:	4820      	ldr	r0, [pc, #128]	; (8012aec <vTaskStartScheduler+0xb4>)
 8012a6a:	f7ff fe09 	bl	8012680 <xTaskCreateStatic>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	4a1f      	ldr	r2, [pc, #124]	; (8012af0 <vTaskStartScheduler+0xb8>)
 8012a72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012a74:	4b1e      	ldr	r3, [pc, #120]	; (8012af0 <vTaskStartScheduler+0xb8>)
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d002      	beq.n	8012a82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012a7c:	2301      	movs	r3, #1
 8012a7e:	617b      	str	r3, [r7, #20]
 8012a80:	e001      	b.n	8012a86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012a82:	2300      	movs	r3, #0
 8012a84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012a86:	697b      	ldr	r3, [r7, #20]
 8012a88:	2b01      	cmp	r3, #1
 8012a8a:	d118      	bne.n	8012abe <vTaskStartScheduler+0x86>
	__asm volatile
 8012a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a90:	b672      	cpsid	i
 8012a92:	f383 8811 	msr	BASEPRI, r3
 8012a96:	f3bf 8f6f 	isb	sy
 8012a9a:	f3bf 8f4f 	dsb	sy
 8012a9e:	b662      	cpsie	i
 8012aa0:	613b      	str	r3, [r7, #16]
}
 8012aa2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012aa4:	4b13      	ldr	r3, [pc, #76]	; (8012af4 <vTaskStartScheduler+0xbc>)
 8012aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012aaa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012aac:	4b12      	ldr	r3, [pc, #72]	; (8012af8 <vTaskStartScheduler+0xc0>)
 8012aae:	2201      	movs	r2, #1
 8012ab0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012ab2:	4b12      	ldr	r3, [pc, #72]	; (8012afc <vTaskStartScheduler+0xc4>)
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012ab8:	f000 fdb2 	bl	8013620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012abc:	e010      	b.n	8012ae0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012abe:	697b      	ldr	r3, [r7, #20]
 8012ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012ac4:	d10c      	bne.n	8012ae0 <vTaskStartScheduler+0xa8>
	__asm volatile
 8012ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aca:	b672      	cpsid	i
 8012acc:	f383 8811 	msr	BASEPRI, r3
 8012ad0:	f3bf 8f6f 	isb	sy
 8012ad4:	f3bf 8f4f 	dsb	sy
 8012ad8:	b662      	cpsie	i
 8012ada:	60fb      	str	r3, [r7, #12]
}
 8012adc:	bf00      	nop
 8012ade:	e7fe      	b.n	8012ade <vTaskStartScheduler+0xa6>
}
 8012ae0:	bf00      	nop
 8012ae2:	3718      	adds	r7, #24
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}
 8012ae8:	08014d40 	.word	0x08014d40
 8012aec:	08013139 	.word	0x08013139
 8012af0:	20000eec 	.word	0x20000eec
 8012af4:	20000ee8 	.word	0x20000ee8
 8012af8:	20000ed4 	.word	0x20000ed4
 8012afc:	20000ecc 	.word	0x20000ecc

08012b00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012b00:	b480      	push	{r7}
 8012b02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012b04:	4b04      	ldr	r3, [pc, #16]	; (8012b18 <vTaskSuspendAll+0x18>)
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	3301      	adds	r3, #1
 8012b0a:	4a03      	ldr	r2, [pc, #12]	; (8012b18 <vTaskSuspendAll+0x18>)
 8012b0c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012b0e:	bf00      	nop
 8012b10:	46bd      	mov	sp, r7
 8012b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b16:	4770      	bx	lr
 8012b18:	20000ef0 	.word	0x20000ef0

08012b1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b084      	sub	sp, #16
 8012b20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012b22:	2300      	movs	r3, #0
 8012b24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012b26:	2300      	movs	r3, #0
 8012b28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012b2a:	4b42      	ldr	r3, [pc, #264]	; (8012c34 <xTaskResumeAll+0x118>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d10c      	bne.n	8012b4c <xTaskResumeAll+0x30>
	__asm volatile
 8012b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b36:	b672      	cpsid	i
 8012b38:	f383 8811 	msr	BASEPRI, r3
 8012b3c:	f3bf 8f6f 	isb	sy
 8012b40:	f3bf 8f4f 	dsb	sy
 8012b44:	b662      	cpsie	i
 8012b46:	603b      	str	r3, [r7, #0]
}
 8012b48:	bf00      	nop
 8012b4a:	e7fe      	b.n	8012b4a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012b4c:	f000 fde6 	bl	801371c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012b50:	4b38      	ldr	r3, [pc, #224]	; (8012c34 <xTaskResumeAll+0x118>)
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	3b01      	subs	r3, #1
 8012b56:	4a37      	ldr	r2, [pc, #220]	; (8012c34 <xTaskResumeAll+0x118>)
 8012b58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b5a:	4b36      	ldr	r3, [pc, #216]	; (8012c34 <xTaskResumeAll+0x118>)
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d161      	bne.n	8012c26 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012b62:	4b35      	ldr	r3, [pc, #212]	; (8012c38 <xTaskResumeAll+0x11c>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d05d      	beq.n	8012c26 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012b6a:	e02e      	b.n	8012bca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b6c:	4b33      	ldr	r3, [pc, #204]	; (8012c3c <xTaskResumeAll+0x120>)
 8012b6e:	68db      	ldr	r3, [r3, #12]
 8012b70:	68db      	ldr	r3, [r3, #12]
 8012b72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	3318      	adds	r3, #24
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f7fe ffe7 	bl	8011b4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	3304      	adds	r3, #4
 8012b82:	4618      	mov	r0, r3
 8012b84:	f7fe ffe2 	bl	8011b4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b8c:	2201      	movs	r2, #1
 8012b8e:	409a      	lsls	r2, r3
 8012b90:	4b2b      	ldr	r3, [pc, #172]	; (8012c40 <xTaskResumeAll+0x124>)
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	4313      	orrs	r3, r2
 8012b96:	4a2a      	ldr	r2, [pc, #168]	; (8012c40 <xTaskResumeAll+0x124>)
 8012b98:	6013      	str	r3, [r2, #0]
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b9e:	4613      	mov	r3, r2
 8012ba0:	009b      	lsls	r3, r3, #2
 8012ba2:	4413      	add	r3, r2
 8012ba4:	009b      	lsls	r3, r3, #2
 8012ba6:	4a27      	ldr	r2, [pc, #156]	; (8012c44 <xTaskResumeAll+0x128>)
 8012ba8:	441a      	add	r2, r3
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	3304      	adds	r3, #4
 8012bae:	4619      	mov	r1, r3
 8012bb0:	4610      	mov	r0, r2
 8012bb2:	f7fe ff6e 	bl	8011a92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bba:	4b23      	ldr	r3, [pc, #140]	; (8012c48 <xTaskResumeAll+0x12c>)
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bc0:	429a      	cmp	r2, r3
 8012bc2:	d302      	bcc.n	8012bca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8012bc4:	4b21      	ldr	r3, [pc, #132]	; (8012c4c <xTaskResumeAll+0x130>)
 8012bc6:	2201      	movs	r2, #1
 8012bc8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012bca:	4b1c      	ldr	r3, [pc, #112]	; (8012c3c <xTaskResumeAll+0x120>)
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d1cc      	bne.n	8012b6c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d001      	beq.n	8012bdc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012bd8:	f000 fb68 	bl	80132ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012bdc:	4b1c      	ldr	r3, [pc, #112]	; (8012c50 <xTaskResumeAll+0x134>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d010      	beq.n	8012c0a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012be8:	f000 f858 	bl	8012c9c <xTaskIncrementTick>
 8012bec:	4603      	mov	r3, r0
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d002      	beq.n	8012bf8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8012bf2:	4b16      	ldr	r3, [pc, #88]	; (8012c4c <xTaskResumeAll+0x130>)
 8012bf4:	2201      	movs	r2, #1
 8012bf6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	3b01      	subs	r3, #1
 8012bfc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d1f1      	bne.n	8012be8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8012c04:	4b12      	ldr	r3, [pc, #72]	; (8012c50 <xTaskResumeAll+0x134>)
 8012c06:	2200      	movs	r2, #0
 8012c08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012c0a:	4b10      	ldr	r3, [pc, #64]	; (8012c4c <xTaskResumeAll+0x130>)
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d009      	beq.n	8012c26 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012c12:	2301      	movs	r3, #1
 8012c14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012c16:	4b0f      	ldr	r3, [pc, #60]	; (8012c54 <xTaskResumeAll+0x138>)
 8012c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c1c:	601a      	str	r2, [r3, #0]
 8012c1e:	f3bf 8f4f 	dsb	sy
 8012c22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012c26:	f000 fdad 	bl	8013784 <vPortExitCritical>

	return xAlreadyYielded;
 8012c2a:	68bb      	ldr	r3, [r7, #8]
}
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	3710      	adds	r7, #16
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}
 8012c34:	20000ef0 	.word	0x20000ef0
 8012c38:	20000ec8 	.word	0x20000ec8
 8012c3c:	20000e88 	.word	0x20000e88
 8012c40:	20000ed0 	.word	0x20000ed0
 8012c44:	20000dcc 	.word	0x20000dcc
 8012c48:	20000dc8 	.word	0x20000dc8
 8012c4c:	20000edc 	.word	0x20000edc
 8012c50:	20000ed8 	.word	0x20000ed8
 8012c54:	e000ed04 	.word	0xe000ed04

08012c58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012c58:	b480      	push	{r7}
 8012c5a:	b083      	sub	sp, #12
 8012c5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012c5e:	4b05      	ldr	r3, [pc, #20]	; (8012c74 <xTaskGetTickCount+0x1c>)
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012c64:	687b      	ldr	r3, [r7, #4]
}
 8012c66:	4618      	mov	r0, r3
 8012c68:	370c      	adds	r7, #12
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c70:	4770      	bx	lr
 8012c72:	bf00      	nop
 8012c74:	20000ecc 	.word	0x20000ecc

08012c78 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b082      	sub	sp, #8
 8012c7c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012c7e:	f000 fe35 	bl	80138ec <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8012c82:	2300      	movs	r3, #0
 8012c84:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8012c86:	4b04      	ldr	r3, [pc, #16]	; (8012c98 <xTaskGetTickCountFromISR+0x20>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012c8c:	683b      	ldr	r3, [r7, #0]
}
 8012c8e:	4618      	mov	r0, r3
 8012c90:	3708      	adds	r7, #8
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bd80      	pop	{r7, pc}
 8012c96:	bf00      	nop
 8012c98:	20000ecc 	.word	0x20000ecc

08012c9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b086      	sub	sp, #24
 8012ca0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ca6:	4b4f      	ldr	r3, [pc, #316]	; (8012de4 <xTaskIncrementTick+0x148>)
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	f040 808a 	bne.w	8012dc4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012cb0:	4b4d      	ldr	r3, [pc, #308]	; (8012de8 <xTaskIncrementTick+0x14c>)
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	3301      	adds	r3, #1
 8012cb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012cb8:	4a4b      	ldr	r2, [pc, #300]	; (8012de8 <xTaskIncrementTick+0x14c>)
 8012cba:	693b      	ldr	r3, [r7, #16]
 8012cbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012cbe:	693b      	ldr	r3, [r7, #16]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d122      	bne.n	8012d0a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8012cc4:	4b49      	ldr	r3, [pc, #292]	; (8012dec <xTaskIncrementTick+0x150>)
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d00c      	beq.n	8012ce8 <xTaskIncrementTick+0x4c>
	__asm volatile
 8012cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cd2:	b672      	cpsid	i
 8012cd4:	f383 8811 	msr	BASEPRI, r3
 8012cd8:	f3bf 8f6f 	isb	sy
 8012cdc:	f3bf 8f4f 	dsb	sy
 8012ce0:	b662      	cpsie	i
 8012ce2:	603b      	str	r3, [r7, #0]
}
 8012ce4:	bf00      	nop
 8012ce6:	e7fe      	b.n	8012ce6 <xTaskIncrementTick+0x4a>
 8012ce8:	4b40      	ldr	r3, [pc, #256]	; (8012dec <xTaskIncrementTick+0x150>)
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	60fb      	str	r3, [r7, #12]
 8012cee:	4b40      	ldr	r3, [pc, #256]	; (8012df0 <xTaskIncrementTick+0x154>)
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	4a3e      	ldr	r2, [pc, #248]	; (8012dec <xTaskIncrementTick+0x150>)
 8012cf4:	6013      	str	r3, [r2, #0]
 8012cf6:	4a3e      	ldr	r2, [pc, #248]	; (8012df0 <xTaskIncrementTick+0x154>)
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	6013      	str	r3, [r2, #0]
 8012cfc:	4b3d      	ldr	r3, [pc, #244]	; (8012df4 <xTaskIncrementTick+0x158>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	3301      	adds	r3, #1
 8012d02:	4a3c      	ldr	r2, [pc, #240]	; (8012df4 <xTaskIncrementTick+0x158>)
 8012d04:	6013      	str	r3, [r2, #0]
 8012d06:	f000 fad1 	bl	80132ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012d0a:	4b3b      	ldr	r3, [pc, #236]	; (8012df8 <xTaskIncrementTick+0x15c>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	693a      	ldr	r2, [r7, #16]
 8012d10:	429a      	cmp	r2, r3
 8012d12:	d348      	bcc.n	8012da6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012d14:	4b35      	ldr	r3, [pc, #212]	; (8012dec <xTaskIncrementTick+0x150>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d104      	bne.n	8012d28 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d1e:	4b36      	ldr	r3, [pc, #216]	; (8012df8 <xTaskIncrementTick+0x15c>)
 8012d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012d24:	601a      	str	r2, [r3, #0]
					break;
 8012d26:	e03e      	b.n	8012da6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d28:	4b30      	ldr	r3, [pc, #192]	; (8012dec <xTaskIncrementTick+0x150>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	68db      	ldr	r3, [r3, #12]
 8012d2e:	68db      	ldr	r3, [r3, #12]
 8012d30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012d32:	68bb      	ldr	r3, [r7, #8]
 8012d34:	685b      	ldr	r3, [r3, #4]
 8012d36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012d38:	693a      	ldr	r2, [r7, #16]
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	429a      	cmp	r2, r3
 8012d3e:	d203      	bcs.n	8012d48 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012d40:	4a2d      	ldr	r2, [pc, #180]	; (8012df8 <xTaskIncrementTick+0x15c>)
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012d46:	e02e      	b.n	8012da6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012d48:	68bb      	ldr	r3, [r7, #8]
 8012d4a:	3304      	adds	r3, #4
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7fe fefd 	bl	8011b4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012d52:	68bb      	ldr	r3, [r7, #8]
 8012d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d004      	beq.n	8012d64 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012d5a:	68bb      	ldr	r3, [r7, #8]
 8012d5c:	3318      	adds	r3, #24
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f7fe fef4 	bl	8011b4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012d64:	68bb      	ldr	r3, [r7, #8]
 8012d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d68:	2201      	movs	r2, #1
 8012d6a:	409a      	lsls	r2, r3
 8012d6c:	4b23      	ldr	r3, [pc, #140]	; (8012dfc <xTaskIncrementTick+0x160>)
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	4313      	orrs	r3, r2
 8012d72:	4a22      	ldr	r2, [pc, #136]	; (8012dfc <xTaskIncrementTick+0x160>)
 8012d74:	6013      	str	r3, [r2, #0]
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d7a:	4613      	mov	r3, r2
 8012d7c:	009b      	lsls	r3, r3, #2
 8012d7e:	4413      	add	r3, r2
 8012d80:	009b      	lsls	r3, r3, #2
 8012d82:	4a1f      	ldr	r2, [pc, #124]	; (8012e00 <xTaskIncrementTick+0x164>)
 8012d84:	441a      	add	r2, r3
 8012d86:	68bb      	ldr	r3, [r7, #8]
 8012d88:	3304      	adds	r3, #4
 8012d8a:	4619      	mov	r1, r3
 8012d8c:	4610      	mov	r0, r2
 8012d8e:	f7fe fe80 	bl	8011a92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012d92:	68bb      	ldr	r3, [r7, #8]
 8012d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d96:	4b1b      	ldr	r3, [pc, #108]	; (8012e04 <xTaskIncrementTick+0x168>)
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	d3b9      	bcc.n	8012d14 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8012da0:	2301      	movs	r3, #1
 8012da2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012da4:	e7b6      	b.n	8012d14 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012da6:	4b17      	ldr	r3, [pc, #92]	; (8012e04 <xTaskIncrementTick+0x168>)
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012dac:	4914      	ldr	r1, [pc, #80]	; (8012e00 <xTaskIncrementTick+0x164>)
 8012dae:	4613      	mov	r3, r2
 8012db0:	009b      	lsls	r3, r3, #2
 8012db2:	4413      	add	r3, r2
 8012db4:	009b      	lsls	r3, r3, #2
 8012db6:	440b      	add	r3, r1
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	2b01      	cmp	r3, #1
 8012dbc:	d907      	bls.n	8012dce <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8012dbe:	2301      	movs	r3, #1
 8012dc0:	617b      	str	r3, [r7, #20]
 8012dc2:	e004      	b.n	8012dce <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012dc4:	4b10      	ldr	r3, [pc, #64]	; (8012e08 <xTaskIncrementTick+0x16c>)
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	3301      	adds	r3, #1
 8012dca:	4a0f      	ldr	r2, [pc, #60]	; (8012e08 <xTaskIncrementTick+0x16c>)
 8012dcc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012dce:	4b0f      	ldr	r3, [pc, #60]	; (8012e0c <xTaskIncrementTick+0x170>)
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d001      	beq.n	8012dda <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8012dd6:	2301      	movs	r3, #1
 8012dd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012dda:	697b      	ldr	r3, [r7, #20]
}
 8012ddc:	4618      	mov	r0, r3
 8012dde:	3718      	adds	r7, #24
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd80      	pop	{r7, pc}
 8012de4:	20000ef0 	.word	0x20000ef0
 8012de8:	20000ecc 	.word	0x20000ecc
 8012dec:	20000e80 	.word	0x20000e80
 8012df0:	20000e84 	.word	0x20000e84
 8012df4:	20000ee0 	.word	0x20000ee0
 8012df8:	20000ee8 	.word	0x20000ee8
 8012dfc:	20000ed0 	.word	0x20000ed0
 8012e00:	20000dcc 	.word	0x20000dcc
 8012e04:	20000dc8 	.word	0x20000dc8
 8012e08:	20000ed8 	.word	0x20000ed8
 8012e0c:	20000edc 	.word	0x20000edc

08012e10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b088      	sub	sp, #32
 8012e14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012e16:	4b3a      	ldr	r3, [pc, #232]	; (8012f00 <vTaskSwitchContext+0xf0>)
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d003      	beq.n	8012e26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012e1e:	4b39      	ldr	r3, [pc, #228]	; (8012f04 <vTaskSwitchContext+0xf4>)
 8012e20:	2201      	movs	r2, #1
 8012e22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012e24:	e068      	b.n	8012ef8 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8012e26:	4b37      	ldr	r3, [pc, #220]	; (8012f04 <vTaskSwitchContext+0xf4>)
 8012e28:	2200      	movs	r2, #0
 8012e2a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8012e2c:	4b36      	ldr	r3, [pc, #216]	; (8012f08 <vTaskSwitchContext+0xf8>)
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e32:	61fb      	str	r3, [r7, #28]
 8012e34:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8012e38:	61bb      	str	r3, [r7, #24]
 8012e3a:	69fb      	ldr	r3, [r7, #28]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	69ba      	ldr	r2, [r7, #24]
 8012e40:	429a      	cmp	r2, r3
 8012e42:	d111      	bne.n	8012e68 <vTaskSwitchContext+0x58>
 8012e44:	69fb      	ldr	r3, [r7, #28]
 8012e46:	3304      	adds	r3, #4
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	69ba      	ldr	r2, [r7, #24]
 8012e4c:	429a      	cmp	r2, r3
 8012e4e:	d10b      	bne.n	8012e68 <vTaskSwitchContext+0x58>
 8012e50:	69fb      	ldr	r3, [r7, #28]
 8012e52:	3308      	adds	r3, #8
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	69ba      	ldr	r2, [r7, #24]
 8012e58:	429a      	cmp	r2, r3
 8012e5a:	d105      	bne.n	8012e68 <vTaskSwitchContext+0x58>
 8012e5c:	69fb      	ldr	r3, [r7, #28]
 8012e5e:	330c      	adds	r3, #12
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	69ba      	ldr	r2, [r7, #24]
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d008      	beq.n	8012e7a <vTaskSwitchContext+0x6a>
 8012e68:	4b27      	ldr	r3, [pc, #156]	; (8012f08 <vTaskSwitchContext+0xf8>)
 8012e6a:	681a      	ldr	r2, [r3, #0]
 8012e6c:	4b26      	ldr	r3, [pc, #152]	; (8012f08 <vTaskSwitchContext+0xf8>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	3334      	adds	r3, #52	; 0x34
 8012e72:	4619      	mov	r1, r3
 8012e74:	4610      	mov	r0, r2
 8012e76:	f7ed fba4 	bl	80005c2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e7a:	4b24      	ldr	r3, [pc, #144]	; (8012f0c <vTaskSwitchContext+0xfc>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	fab3 f383 	clz	r3, r3
 8012e86:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012e88:	7afb      	ldrb	r3, [r7, #11]
 8012e8a:	f1c3 031f 	rsb	r3, r3, #31
 8012e8e:	617b      	str	r3, [r7, #20]
 8012e90:	491f      	ldr	r1, [pc, #124]	; (8012f10 <vTaskSwitchContext+0x100>)
 8012e92:	697a      	ldr	r2, [r7, #20]
 8012e94:	4613      	mov	r3, r2
 8012e96:	009b      	lsls	r3, r3, #2
 8012e98:	4413      	add	r3, r2
 8012e9a:	009b      	lsls	r3, r3, #2
 8012e9c:	440b      	add	r3, r1
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d10c      	bne.n	8012ebe <vTaskSwitchContext+0xae>
	__asm volatile
 8012ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ea8:	b672      	cpsid	i
 8012eaa:	f383 8811 	msr	BASEPRI, r3
 8012eae:	f3bf 8f6f 	isb	sy
 8012eb2:	f3bf 8f4f 	dsb	sy
 8012eb6:	b662      	cpsie	i
 8012eb8:	607b      	str	r3, [r7, #4]
}
 8012eba:	bf00      	nop
 8012ebc:	e7fe      	b.n	8012ebc <vTaskSwitchContext+0xac>
 8012ebe:	697a      	ldr	r2, [r7, #20]
 8012ec0:	4613      	mov	r3, r2
 8012ec2:	009b      	lsls	r3, r3, #2
 8012ec4:	4413      	add	r3, r2
 8012ec6:	009b      	lsls	r3, r3, #2
 8012ec8:	4a11      	ldr	r2, [pc, #68]	; (8012f10 <vTaskSwitchContext+0x100>)
 8012eca:	4413      	add	r3, r2
 8012ecc:	613b      	str	r3, [r7, #16]
 8012ece:	693b      	ldr	r3, [r7, #16]
 8012ed0:	685b      	ldr	r3, [r3, #4]
 8012ed2:	685a      	ldr	r2, [r3, #4]
 8012ed4:	693b      	ldr	r3, [r7, #16]
 8012ed6:	605a      	str	r2, [r3, #4]
 8012ed8:	693b      	ldr	r3, [r7, #16]
 8012eda:	685a      	ldr	r2, [r3, #4]
 8012edc:	693b      	ldr	r3, [r7, #16]
 8012ede:	3308      	adds	r3, #8
 8012ee0:	429a      	cmp	r2, r3
 8012ee2:	d104      	bne.n	8012eee <vTaskSwitchContext+0xde>
 8012ee4:	693b      	ldr	r3, [r7, #16]
 8012ee6:	685b      	ldr	r3, [r3, #4]
 8012ee8:	685a      	ldr	r2, [r3, #4]
 8012eea:	693b      	ldr	r3, [r7, #16]
 8012eec:	605a      	str	r2, [r3, #4]
 8012eee:	693b      	ldr	r3, [r7, #16]
 8012ef0:	685b      	ldr	r3, [r3, #4]
 8012ef2:	68db      	ldr	r3, [r3, #12]
 8012ef4:	4a04      	ldr	r2, [pc, #16]	; (8012f08 <vTaskSwitchContext+0xf8>)
 8012ef6:	6013      	str	r3, [r2, #0]
}
 8012ef8:	bf00      	nop
 8012efa:	3720      	adds	r7, #32
 8012efc:	46bd      	mov	sp, r7
 8012efe:	bd80      	pop	{r7, pc}
 8012f00:	20000ef0 	.word	0x20000ef0
 8012f04:	20000edc 	.word	0x20000edc
 8012f08:	20000dc8 	.word	0x20000dc8
 8012f0c:	20000ed0 	.word	0x20000ed0
 8012f10:	20000dcc 	.word	0x20000dcc

08012f14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b084      	sub	sp, #16
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
 8012f1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d10c      	bne.n	8012f3e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8012f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f28:	b672      	cpsid	i
 8012f2a:	f383 8811 	msr	BASEPRI, r3
 8012f2e:	f3bf 8f6f 	isb	sy
 8012f32:	f3bf 8f4f 	dsb	sy
 8012f36:	b662      	cpsie	i
 8012f38:	60fb      	str	r3, [r7, #12]
}
 8012f3a:	bf00      	nop
 8012f3c:	e7fe      	b.n	8012f3c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012f3e:	4b07      	ldr	r3, [pc, #28]	; (8012f5c <vTaskPlaceOnEventList+0x48>)
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	3318      	adds	r3, #24
 8012f44:	4619      	mov	r1, r3
 8012f46:	6878      	ldr	r0, [r7, #4]
 8012f48:	f7fe fdc7 	bl	8011ada <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012f4c:	2101      	movs	r1, #1
 8012f4e:	6838      	ldr	r0, [r7, #0]
 8012f50:	f000 fa74 	bl	801343c <prvAddCurrentTaskToDelayedList>
}
 8012f54:	bf00      	nop
 8012f56:	3710      	adds	r7, #16
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}
 8012f5c:	20000dc8 	.word	0x20000dc8

08012f60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b086      	sub	sp, #24
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	68db      	ldr	r3, [r3, #12]
 8012f6c:	68db      	ldr	r3, [r3, #12]
 8012f6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012f70:	693b      	ldr	r3, [r7, #16]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d10c      	bne.n	8012f90 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8012f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f7a:	b672      	cpsid	i
 8012f7c:	f383 8811 	msr	BASEPRI, r3
 8012f80:	f3bf 8f6f 	isb	sy
 8012f84:	f3bf 8f4f 	dsb	sy
 8012f88:	b662      	cpsie	i
 8012f8a:	60fb      	str	r3, [r7, #12]
}
 8012f8c:	bf00      	nop
 8012f8e:	e7fe      	b.n	8012f8e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012f90:	693b      	ldr	r3, [r7, #16]
 8012f92:	3318      	adds	r3, #24
 8012f94:	4618      	mov	r0, r3
 8012f96:	f7fe fdd9 	bl	8011b4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012f9a:	4b1d      	ldr	r3, [pc, #116]	; (8013010 <xTaskRemoveFromEventList+0xb0>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d11c      	bne.n	8012fdc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012fa2:	693b      	ldr	r3, [r7, #16]
 8012fa4:	3304      	adds	r3, #4
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f7fe fdd0 	bl	8011b4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012fac:	693b      	ldr	r3, [r7, #16]
 8012fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fb0:	2201      	movs	r2, #1
 8012fb2:	409a      	lsls	r2, r3
 8012fb4:	4b17      	ldr	r3, [pc, #92]	; (8013014 <xTaskRemoveFromEventList+0xb4>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	4313      	orrs	r3, r2
 8012fba:	4a16      	ldr	r2, [pc, #88]	; (8013014 <xTaskRemoveFromEventList+0xb4>)
 8012fbc:	6013      	str	r3, [r2, #0]
 8012fbe:	693b      	ldr	r3, [r7, #16]
 8012fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fc2:	4613      	mov	r3, r2
 8012fc4:	009b      	lsls	r3, r3, #2
 8012fc6:	4413      	add	r3, r2
 8012fc8:	009b      	lsls	r3, r3, #2
 8012fca:	4a13      	ldr	r2, [pc, #76]	; (8013018 <xTaskRemoveFromEventList+0xb8>)
 8012fcc:	441a      	add	r2, r3
 8012fce:	693b      	ldr	r3, [r7, #16]
 8012fd0:	3304      	adds	r3, #4
 8012fd2:	4619      	mov	r1, r3
 8012fd4:	4610      	mov	r0, r2
 8012fd6:	f7fe fd5c 	bl	8011a92 <vListInsertEnd>
 8012fda:	e005      	b.n	8012fe8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012fdc:	693b      	ldr	r3, [r7, #16]
 8012fde:	3318      	adds	r3, #24
 8012fe0:	4619      	mov	r1, r3
 8012fe2:	480e      	ldr	r0, [pc, #56]	; (801301c <xTaskRemoveFromEventList+0xbc>)
 8012fe4:	f7fe fd55 	bl	8011a92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012fe8:	693b      	ldr	r3, [r7, #16]
 8012fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fec:	4b0c      	ldr	r3, [pc, #48]	; (8013020 <xTaskRemoveFromEventList+0xc0>)
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ff2:	429a      	cmp	r2, r3
 8012ff4:	d905      	bls.n	8013002 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012ff6:	2301      	movs	r3, #1
 8012ff8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012ffa:	4b0a      	ldr	r3, [pc, #40]	; (8013024 <xTaskRemoveFromEventList+0xc4>)
 8012ffc:	2201      	movs	r2, #1
 8012ffe:	601a      	str	r2, [r3, #0]
 8013000:	e001      	b.n	8013006 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8013002:	2300      	movs	r3, #0
 8013004:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013006:	697b      	ldr	r3, [r7, #20]
}
 8013008:	4618      	mov	r0, r3
 801300a:	3718      	adds	r7, #24
 801300c:	46bd      	mov	sp, r7
 801300e:	bd80      	pop	{r7, pc}
 8013010:	20000ef0 	.word	0x20000ef0
 8013014:	20000ed0 	.word	0x20000ed0
 8013018:	20000dcc 	.word	0x20000dcc
 801301c:	20000e88 	.word	0x20000e88
 8013020:	20000dc8 	.word	0x20000dc8
 8013024:	20000edc 	.word	0x20000edc

08013028 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013028:	b480      	push	{r7}
 801302a:	b083      	sub	sp, #12
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013030:	4b06      	ldr	r3, [pc, #24]	; (801304c <vTaskInternalSetTimeOutState+0x24>)
 8013032:	681a      	ldr	r2, [r3, #0]
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013038:	4b05      	ldr	r3, [pc, #20]	; (8013050 <vTaskInternalSetTimeOutState+0x28>)
 801303a:	681a      	ldr	r2, [r3, #0]
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	605a      	str	r2, [r3, #4]
}
 8013040:	bf00      	nop
 8013042:	370c      	adds	r7, #12
 8013044:	46bd      	mov	sp, r7
 8013046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304a:	4770      	bx	lr
 801304c:	20000ee0 	.word	0x20000ee0
 8013050:	20000ecc 	.word	0x20000ecc

08013054 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b088      	sub	sp, #32
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
 801305c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d10c      	bne.n	801307e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8013064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013068:	b672      	cpsid	i
 801306a:	f383 8811 	msr	BASEPRI, r3
 801306e:	f3bf 8f6f 	isb	sy
 8013072:	f3bf 8f4f 	dsb	sy
 8013076:	b662      	cpsie	i
 8013078:	613b      	str	r3, [r7, #16]
}
 801307a:	bf00      	nop
 801307c:	e7fe      	b.n	801307c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801307e:	683b      	ldr	r3, [r7, #0]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d10c      	bne.n	801309e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8013084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013088:	b672      	cpsid	i
 801308a:	f383 8811 	msr	BASEPRI, r3
 801308e:	f3bf 8f6f 	isb	sy
 8013092:	f3bf 8f4f 	dsb	sy
 8013096:	b662      	cpsie	i
 8013098:	60fb      	str	r3, [r7, #12]
}
 801309a:	bf00      	nop
 801309c:	e7fe      	b.n	801309c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 801309e:	f000 fb3d 	bl	801371c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80130a2:	4b1d      	ldr	r3, [pc, #116]	; (8013118 <xTaskCheckForTimeOut+0xc4>)
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	685b      	ldr	r3, [r3, #4]
 80130ac:	69ba      	ldr	r2, [r7, #24]
 80130ae:	1ad3      	subs	r3, r2, r3
 80130b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80130ba:	d102      	bne.n	80130c2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80130bc:	2300      	movs	r3, #0
 80130be:	61fb      	str	r3, [r7, #28]
 80130c0:	e023      	b.n	801310a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	681a      	ldr	r2, [r3, #0]
 80130c6:	4b15      	ldr	r3, [pc, #84]	; (801311c <xTaskCheckForTimeOut+0xc8>)
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	429a      	cmp	r2, r3
 80130cc:	d007      	beq.n	80130de <xTaskCheckForTimeOut+0x8a>
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	685b      	ldr	r3, [r3, #4]
 80130d2:	69ba      	ldr	r2, [r7, #24]
 80130d4:	429a      	cmp	r2, r3
 80130d6:	d302      	bcc.n	80130de <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80130d8:	2301      	movs	r3, #1
 80130da:	61fb      	str	r3, [r7, #28]
 80130dc:	e015      	b.n	801310a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	697a      	ldr	r2, [r7, #20]
 80130e4:	429a      	cmp	r2, r3
 80130e6:	d20b      	bcs.n	8013100 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80130e8:	683b      	ldr	r3, [r7, #0]
 80130ea:	681a      	ldr	r2, [r3, #0]
 80130ec:	697b      	ldr	r3, [r7, #20]
 80130ee:	1ad2      	subs	r2, r2, r3
 80130f0:	683b      	ldr	r3, [r7, #0]
 80130f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80130f4:	6878      	ldr	r0, [r7, #4]
 80130f6:	f7ff ff97 	bl	8013028 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80130fa:	2300      	movs	r3, #0
 80130fc:	61fb      	str	r3, [r7, #28]
 80130fe:	e004      	b.n	801310a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8013100:	683b      	ldr	r3, [r7, #0]
 8013102:	2200      	movs	r2, #0
 8013104:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013106:	2301      	movs	r3, #1
 8013108:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801310a:	f000 fb3b 	bl	8013784 <vPortExitCritical>

	return xReturn;
 801310e:	69fb      	ldr	r3, [r7, #28]
}
 8013110:	4618      	mov	r0, r3
 8013112:	3720      	adds	r7, #32
 8013114:	46bd      	mov	sp, r7
 8013116:	bd80      	pop	{r7, pc}
 8013118:	20000ecc 	.word	0x20000ecc
 801311c:	20000ee0 	.word	0x20000ee0

08013120 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013120:	b480      	push	{r7}
 8013122:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013124:	4b03      	ldr	r3, [pc, #12]	; (8013134 <vTaskMissedYield+0x14>)
 8013126:	2201      	movs	r2, #1
 8013128:	601a      	str	r2, [r3, #0]
}
 801312a:	bf00      	nop
 801312c:	46bd      	mov	sp, r7
 801312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013132:	4770      	bx	lr
 8013134:	20000edc 	.word	0x20000edc

08013138 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b082      	sub	sp, #8
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013140:	f000 f854 	bl	80131ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013144:	4b07      	ldr	r3, [pc, #28]	; (8013164 <prvIdleTask+0x2c>)
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	2b01      	cmp	r3, #1
 801314a:	d907      	bls.n	801315c <prvIdleTask+0x24>
			{
				taskYIELD();
 801314c:	4b06      	ldr	r3, [pc, #24]	; (8013168 <prvIdleTask+0x30>)
 801314e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013152:	601a      	str	r2, [r3, #0]
 8013154:	f3bf 8f4f 	dsb	sy
 8013158:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801315c:	f7ed fa2a 	bl	80005b4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8013160:	e7ee      	b.n	8013140 <prvIdleTask+0x8>
 8013162:	bf00      	nop
 8013164:	20000dcc 	.word	0x20000dcc
 8013168:	e000ed04 	.word	0xe000ed04

0801316c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b082      	sub	sp, #8
 8013170:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013172:	2300      	movs	r3, #0
 8013174:	607b      	str	r3, [r7, #4]
 8013176:	e00c      	b.n	8013192 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013178:	687a      	ldr	r2, [r7, #4]
 801317a:	4613      	mov	r3, r2
 801317c:	009b      	lsls	r3, r3, #2
 801317e:	4413      	add	r3, r2
 8013180:	009b      	lsls	r3, r3, #2
 8013182:	4a12      	ldr	r2, [pc, #72]	; (80131cc <prvInitialiseTaskLists+0x60>)
 8013184:	4413      	add	r3, r2
 8013186:	4618      	mov	r0, r3
 8013188:	f7fe fc56 	bl	8011a38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	3301      	adds	r3, #1
 8013190:	607b      	str	r3, [r7, #4]
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	2b06      	cmp	r3, #6
 8013196:	d9ef      	bls.n	8013178 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013198:	480d      	ldr	r0, [pc, #52]	; (80131d0 <prvInitialiseTaskLists+0x64>)
 801319a:	f7fe fc4d 	bl	8011a38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801319e:	480d      	ldr	r0, [pc, #52]	; (80131d4 <prvInitialiseTaskLists+0x68>)
 80131a0:	f7fe fc4a 	bl	8011a38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80131a4:	480c      	ldr	r0, [pc, #48]	; (80131d8 <prvInitialiseTaskLists+0x6c>)
 80131a6:	f7fe fc47 	bl	8011a38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80131aa:	480c      	ldr	r0, [pc, #48]	; (80131dc <prvInitialiseTaskLists+0x70>)
 80131ac:	f7fe fc44 	bl	8011a38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80131b0:	480b      	ldr	r0, [pc, #44]	; (80131e0 <prvInitialiseTaskLists+0x74>)
 80131b2:	f7fe fc41 	bl	8011a38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80131b6:	4b0b      	ldr	r3, [pc, #44]	; (80131e4 <prvInitialiseTaskLists+0x78>)
 80131b8:	4a05      	ldr	r2, [pc, #20]	; (80131d0 <prvInitialiseTaskLists+0x64>)
 80131ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80131bc:	4b0a      	ldr	r3, [pc, #40]	; (80131e8 <prvInitialiseTaskLists+0x7c>)
 80131be:	4a05      	ldr	r2, [pc, #20]	; (80131d4 <prvInitialiseTaskLists+0x68>)
 80131c0:	601a      	str	r2, [r3, #0]
}
 80131c2:	bf00      	nop
 80131c4:	3708      	adds	r7, #8
 80131c6:	46bd      	mov	sp, r7
 80131c8:	bd80      	pop	{r7, pc}
 80131ca:	bf00      	nop
 80131cc:	20000dcc 	.word	0x20000dcc
 80131d0:	20000e58 	.word	0x20000e58
 80131d4:	20000e6c 	.word	0x20000e6c
 80131d8:	20000e88 	.word	0x20000e88
 80131dc:	20000e9c 	.word	0x20000e9c
 80131e0:	20000eb4 	.word	0x20000eb4
 80131e4:	20000e80 	.word	0x20000e80
 80131e8:	20000e84 	.word	0x20000e84

080131ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b082      	sub	sp, #8
 80131f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80131f2:	e019      	b.n	8013228 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80131f4:	f000 fa92 	bl	801371c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131f8:	4b10      	ldr	r3, [pc, #64]	; (801323c <prvCheckTasksWaitingTermination+0x50>)
 80131fa:	68db      	ldr	r3, [r3, #12]
 80131fc:	68db      	ldr	r3, [r3, #12]
 80131fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	3304      	adds	r3, #4
 8013204:	4618      	mov	r0, r3
 8013206:	f7fe fca1 	bl	8011b4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801320a:	4b0d      	ldr	r3, [pc, #52]	; (8013240 <prvCheckTasksWaitingTermination+0x54>)
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	3b01      	subs	r3, #1
 8013210:	4a0b      	ldr	r2, [pc, #44]	; (8013240 <prvCheckTasksWaitingTermination+0x54>)
 8013212:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013214:	4b0b      	ldr	r3, [pc, #44]	; (8013244 <prvCheckTasksWaitingTermination+0x58>)
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	3b01      	subs	r3, #1
 801321a:	4a0a      	ldr	r2, [pc, #40]	; (8013244 <prvCheckTasksWaitingTermination+0x58>)
 801321c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801321e:	f000 fab1 	bl	8013784 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013222:	6878      	ldr	r0, [r7, #4]
 8013224:	f000 f810 	bl	8013248 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013228:	4b06      	ldr	r3, [pc, #24]	; (8013244 <prvCheckTasksWaitingTermination+0x58>)
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d1e1      	bne.n	80131f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013230:	bf00      	nop
 8013232:	bf00      	nop
 8013234:	3708      	adds	r7, #8
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}
 801323a:	bf00      	nop
 801323c:	20000e9c 	.word	0x20000e9c
 8013240:	20000ec8 	.word	0x20000ec8
 8013244:	20000eb0 	.word	0x20000eb0

08013248 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013248:	b580      	push	{r7, lr}
 801324a:	b084      	sub	sp, #16
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8013256:	2b00      	cmp	r3, #0
 8013258:	d108      	bne.n	801326c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801325e:	4618      	mov	r0, r3
 8013260:	f000 fc58 	bl	8013b14 <vPortFree>
				vPortFree( pxTCB );
 8013264:	6878      	ldr	r0, [r7, #4]
 8013266:	f000 fc55 	bl	8013b14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801326a:	e01a      	b.n	80132a2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8013272:	2b01      	cmp	r3, #1
 8013274:	d103      	bne.n	801327e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013276:	6878      	ldr	r0, [r7, #4]
 8013278:	f000 fc4c 	bl	8013b14 <vPortFree>
	}
 801327c:	e011      	b.n	80132a2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8013284:	2b02      	cmp	r3, #2
 8013286:	d00c      	beq.n	80132a2 <prvDeleteTCB+0x5a>
	__asm volatile
 8013288:	f04f 0350 	mov.w	r3, #80	; 0x50
 801328c:	b672      	cpsid	i
 801328e:	f383 8811 	msr	BASEPRI, r3
 8013292:	f3bf 8f6f 	isb	sy
 8013296:	f3bf 8f4f 	dsb	sy
 801329a:	b662      	cpsie	i
 801329c:	60fb      	str	r3, [r7, #12]
}
 801329e:	bf00      	nop
 80132a0:	e7fe      	b.n	80132a0 <prvDeleteTCB+0x58>
	}
 80132a2:	bf00      	nop
 80132a4:	3710      	adds	r7, #16
 80132a6:	46bd      	mov	sp, r7
 80132a8:	bd80      	pop	{r7, pc}
	...

080132ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80132ac:	b480      	push	{r7}
 80132ae:	b083      	sub	sp, #12
 80132b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80132b2:	4b0c      	ldr	r3, [pc, #48]	; (80132e4 <prvResetNextTaskUnblockTime+0x38>)
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d104      	bne.n	80132c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80132bc:	4b0a      	ldr	r3, [pc, #40]	; (80132e8 <prvResetNextTaskUnblockTime+0x3c>)
 80132be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80132c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80132c4:	e008      	b.n	80132d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132c6:	4b07      	ldr	r3, [pc, #28]	; (80132e4 <prvResetNextTaskUnblockTime+0x38>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	68db      	ldr	r3, [r3, #12]
 80132cc:	68db      	ldr	r3, [r3, #12]
 80132ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	685b      	ldr	r3, [r3, #4]
 80132d4:	4a04      	ldr	r2, [pc, #16]	; (80132e8 <prvResetNextTaskUnblockTime+0x3c>)
 80132d6:	6013      	str	r3, [r2, #0]
}
 80132d8:	bf00      	nop
 80132da:	370c      	adds	r7, #12
 80132dc:	46bd      	mov	sp, r7
 80132de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e2:	4770      	bx	lr
 80132e4:	20000e80 	.word	0x20000e80
 80132e8:	20000ee8 	.word	0x20000ee8

080132ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80132ec:	b480      	push	{r7}
 80132ee:	b083      	sub	sp, #12
 80132f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80132f2:	4b0b      	ldr	r3, [pc, #44]	; (8013320 <xTaskGetSchedulerState+0x34>)
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d102      	bne.n	8013300 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80132fa:	2301      	movs	r3, #1
 80132fc:	607b      	str	r3, [r7, #4]
 80132fe:	e008      	b.n	8013312 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013300:	4b08      	ldr	r3, [pc, #32]	; (8013324 <xTaskGetSchedulerState+0x38>)
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d102      	bne.n	801330e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013308:	2302      	movs	r3, #2
 801330a:	607b      	str	r3, [r7, #4]
 801330c:	e001      	b.n	8013312 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801330e:	2300      	movs	r3, #0
 8013310:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013312:	687b      	ldr	r3, [r7, #4]
	}
 8013314:	4618      	mov	r0, r3
 8013316:	370c      	adds	r7, #12
 8013318:	46bd      	mov	sp, r7
 801331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331e:	4770      	bx	lr
 8013320:	20000ed4 	.word	0x20000ed4
 8013324:	20000ef0 	.word	0x20000ef0

08013328 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013328:	b580      	push	{r7, lr}
 801332a:	b086      	sub	sp, #24
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013334:	2300      	movs	r3, #0
 8013336:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d072      	beq.n	8013424 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801333e:	4b3c      	ldr	r3, [pc, #240]	; (8013430 <xTaskPriorityDisinherit+0x108>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	693a      	ldr	r2, [r7, #16]
 8013344:	429a      	cmp	r2, r3
 8013346:	d00c      	beq.n	8013362 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8013348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801334c:	b672      	cpsid	i
 801334e:	f383 8811 	msr	BASEPRI, r3
 8013352:	f3bf 8f6f 	isb	sy
 8013356:	f3bf 8f4f 	dsb	sy
 801335a:	b662      	cpsie	i
 801335c:	60fb      	str	r3, [r7, #12]
}
 801335e:	bf00      	nop
 8013360:	e7fe      	b.n	8013360 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8013362:	693b      	ldr	r3, [r7, #16]
 8013364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013366:	2b00      	cmp	r3, #0
 8013368:	d10c      	bne.n	8013384 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801336a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801336e:	b672      	cpsid	i
 8013370:	f383 8811 	msr	BASEPRI, r3
 8013374:	f3bf 8f6f 	isb	sy
 8013378:	f3bf 8f4f 	dsb	sy
 801337c:	b662      	cpsie	i
 801337e:	60bb      	str	r3, [r7, #8]
}
 8013380:	bf00      	nop
 8013382:	e7fe      	b.n	8013382 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8013384:	693b      	ldr	r3, [r7, #16]
 8013386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013388:	1e5a      	subs	r2, r3, #1
 801338a:	693b      	ldr	r3, [r7, #16]
 801338c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801338e:	693b      	ldr	r3, [r7, #16]
 8013390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013392:	693b      	ldr	r3, [r7, #16]
 8013394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013396:	429a      	cmp	r2, r3
 8013398:	d044      	beq.n	8013424 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801339a:	693b      	ldr	r3, [r7, #16]
 801339c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d140      	bne.n	8013424 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80133a2:	693b      	ldr	r3, [r7, #16]
 80133a4:	3304      	adds	r3, #4
 80133a6:	4618      	mov	r0, r3
 80133a8:	f7fe fbd0 	bl	8011b4c <uxListRemove>
 80133ac:	4603      	mov	r3, r0
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d115      	bne.n	80133de <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80133b2:	693b      	ldr	r3, [r7, #16]
 80133b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133b6:	491f      	ldr	r1, [pc, #124]	; (8013434 <xTaskPriorityDisinherit+0x10c>)
 80133b8:	4613      	mov	r3, r2
 80133ba:	009b      	lsls	r3, r3, #2
 80133bc:	4413      	add	r3, r2
 80133be:	009b      	lsls	r3, r3, #2
 80133c0:	440b      	add	r3, r1
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d10a      	bne.n	80133de <xTaskPriorityDisinherit+0xb6>
 80133c8:	693b      	ldr	r3, [r7, #16]
 80133ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133cc:	2201      	movs	r2, #1
 80133ce:	fa02 f303 	lsl.w	r3, r2, r3
 80133d2:	43da      	mvns	r2, r3
 80133d4:	4b18      	ldr	r3, [pc, #96]	; (8013438 <xTaskPriorityDisinherit+0x110>)
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	4013      	ands	r3, r2
 80133da:	4a17      	ldr	r2, [pc, #92]	; (8013438 <xTaskPriorityDisinherit+0x110>)
 80133dc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80133de:	693b      	ldr	r3, [r7, #16]
 80133e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80133e2:	693b      	ldr	r3, [r7, #16]
 80133e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80133e6:	693b      	ldr	r3, [r7, #16]
 80133e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133ea:	f1c3 0207 	rsb	r2, r3, #7
 80133ee:	693b      	ldr	r3, [r7, #16]
 80133f0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80133f2:	693b      	ldr	r3, [r7, #16]
 80133f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133f6:	2201      	movs	r2, #1
 80133f8:	409a      	lsls	r2, r3
 80133fa:	4b0f      	ldr	r3, [pc, #60]	; (8013438 <xTaskPriorityDisinherit+0x110>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	4313      	orrs	r3, r2
 8013400:	4a0d      	ldr	r2, [pc, #52]	; (8013438 <xTaskPriorityDisinherit+0x110>)
 8013402:	6013      	str	r3, [r2, #0]
 8013404:	693b      	ldr	r3, [r7, #16]
 8013406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013408:	4613      	mov	r3, r2
 801340a:	009b      	lsls	r3, r3, #2
 801340c:	4413      	add	r3, r2
 801340e:	009b      	lsls	r3, r3, #2
 8013410:	4a08      	ldr	r2, [pc, #32]	; (8013434 <xTaskPriorityDisinherit+0x10c>)
 8013412:	441a      	add	r2, r3
 8013414:	693b      	ldr	r3, [r7, #16]
 8013416:	3304      	adds	r3, #4
 8013418:	4619      	mov	r1, r3
 801341a:	4610      	mov	r0, r2
 801341c:	f7fe fb39 	bl	8011a92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013420:	2301      	movs	r3, #1
 8013422:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013424:	697b      	ldr	r3, [r7, #20]
	}
 8013426:	4618      	mov	r0, r3
 8013428:	3718      	adds	r7, #24
 801342a:	46bd      	mov	sp, r7
 801342c:	bd80      	pop	{r7, pc}
 801342e:	bf00      	nop
 8013430:	20000dc8 	.word	0x20000dc8
 8013434:	20000dcc 	.word	0x20000dcc
 8013438:	20000ed0 	.word	0x20000ed0

0801343c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b084      	sub	sp, #16
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
 8013444:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013446:	4b29      	ldr	r3, [pc, #164]	; (80134ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801344c:	4b28      	ldr	r3, [pc, #160]	; (80134f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	3304      	adds	r3, #4
 8013452:	4618      	mov	r0, r3
 8013454:	f7fe fb7a 	bl	8011b4c <uxListRemove>
 8013458:	4603      	mov	r3, r0
 801345a:	2b00      	cmp	r3, #0
 801345c:	d10b      	bne.n	8013476 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801345e:	4b24      	ldr	r3, [pc, #144]	; (80134f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013464:	2201      	movs	r2, #1
 8013466:	fa02 f303 	lsl.w	r3, r2, r3
 801346a:	43da      	mvns	r2, r3
 801346c:	4b21      	ldr	r3, [pc, #132]	; (80134f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	4013      	ands	r3, r2
 8013472:	4a20      	ldr	r2, [pc, #128]	; (80134f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013474:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801347c:	d10a      	bne.n	8013494 <prvAddCurrentTaskToDelayedList+0x58>
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d007      	beq.n	8013494 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013484:	4b1a      	ldr	r3, [pc, #104]	; (80134f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	3304      	adds	r3, #4
 801348a:	4619      	mov	r1, r3
 801348c:	481a      	ldr	r0, [pc, #104]	; (80134f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 801348e:	f7fe fb00 	bl	8011a92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013492:	e026      	b.n	80134e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013494:	68fa      	ldr	r2, [r7, #12]
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	4413      	add	r3, r2
 801349a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801349c:	4b14      	ldr	r3, [pc, #80]	; (80134f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	68ba      	ldr	r2, [r7, #8]
 80134a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80134a4:	68ba      	ldr	r2, [r7, #8]
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	429a      	cmp	r2, r3
 80134aa:	d209      	bcs.n	80134c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80134ac:	4b13      	ldr	r3, [pc, #76]	; (80134fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80134ae:	681a      	ldr	r2, [r3, #0]
 80134b0:	4b0f      	ldr	r3, [pc, #60]	; (80134f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	3304      	adds	r3, #4
 80134b6:	4619      	mov	r1, r3
 80134b8:	4610      	mov	r0, r2
 80134ba:	f7fe fb0e 	bl	8011ada <vListInsert>
}
 80134be:	e010      	b.n	80134e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80134c0:	4b0f      	ldr	r3, [pc, #60]	; (8013500 <prvAddCurrentTaskToDelayedList+0xc4>)
 80134c2:	681a      	ldr	r2, [r3, #0]
 80134c4:	4b0a      	ldr	r3, [pc, #40]	; (80134f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	3304      	adds	r3, #4
 80134ca:	4619      	mov	r1, r3
 80134cc:	4610      	mov	r0, r2
 80134ce:	f7fe fb04 	bl	8011ada <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80134d2:	4b0c      	ldr	r3, [pc, #48]	; (8013504 <prvAddCurrentTaskToDelayedList+0xc8>)
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	68ba      	ldr	r2, [r7, #8]
 80134d8:	429a      	cmp	r2, r3
 80134da:	d202      	bcs.n	80134e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80134dc:	4a09      	ldr	r2, [pc, #36]	; (8013504 <prvAddCurrentTaskToDelayedList+0xc8>)
 80134de:	68bb      	ldr	r3, [r7, #8]
 80134e0:	6013      	str	r3, [r2, #0]
}
 80134e2:	bf00      	nop
 80134e4:	3710      	adds	r7, #16
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}
 80134ea:	bf00      	nop
 80134ec:	20000ecc 	.word	0x20000ecc
 80134f0:	20000dc8 	.word	0x20000dc8
 80134f4:	20000ed0 	.word	0x20000ed0
 80134f8:	20000eb4 	.word	0x20000eb4
 80134fc:	20000e84 	.word	0x20000e84
 8013500:	20000e80 	.word	0x20000e80
 8013504:	20000ee8 	.word	0x20000ee8

08013508 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013508:	b480      	push	{r7}
 801350a:	b085      	sub	sp, #20
 801350c:	af00      	add	r7, sp, #0
 801350e:	60f8      	str	r0, [r7, #12]
 8013510:	60b9      	str	r1, [r7, #8]
 8013512:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	3b04      	subs	r3, #4
 8013518:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013520:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	3b04      	subs	r3, #4
 8013526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	f023 0201 	bic.w	r2, r3, #1
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	3b04      	subs	r3, #4
 8013536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013538:	4a0c      	ldr	r2, [pc, #48]	; (801356c <pxPortInitialiseStack+0x64>)
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	3b14      	subs	r3, #20
 8013542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013544:	687a      	ldr	r2, [r7, #4]
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	3b04      	subs	r3, #4
 801354e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	f06f 0202 	mvn.w	r2, #2
 8013556:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	3b20      	subs	r3, #32
 801355c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801355e:	68fb      	ldr	r3, [r7, #12]
}
 8013560:	4618      	mov	r0, r3
 8013562:	3714      	adds	r7, #20
 8013564:	46bd      	mov	sp, r7
 8013566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356a:	4770      	bx	lr
 801356c:	08013571 	.word	0x08013571

08013570 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013570:	b480      	push	{r7}
 8013572:	b085      	sub	sp, #20
 8013574:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013576:	2300      	movs	r3, #0
 8013578:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801357a:	4b14      	ldr	r3, [pc, #80]	; (80135cc <prvTaskExitError+0x5c>)
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013582:	d00c      	beq.n	801359e <prvTaskExitError+0x2e>
	__asm volatile
 8013584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013588:	b672      	cpsid	i
 801358a:	f383 8811 	msr	BASEPRI, r3
 801358e:	f3bf 8f6f 	isb	sy
 8013592:	f3bf 8f4f 	dsb	sy
 8013596:	b662      	cpsie	i
 8013598:	60fb      	str	r3, [r7, #12]
}
 801359a:	bf00      	nop
 801359c:	e7fe      	b.n	801359c <prvTaskExitError+0x2c>
	__asm volatile
 801359e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135a2:	b672      	cpsid	i
 80135a4:	f383 8811 	msr	BASEPRI, r3
 80135a8:	f3bf 8f6f 	isb	sy
 80135ac:	f3bf 8f4f 	dsb	sy
 80135b0:	b662      	cpsie	i
 80135b2:	60bb      	str	r3, [r7, #8]
}
 80135b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80135b6:	bf00      	nop
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d0fc      	beq.n	80135b8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80135be:	bf00      	nop
 80135c0:	bf00      	nop
 80135c2:	3714      	adds	r7, #20
 80135c4:	46bd      	mov	sp, r7
 80135c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ca:	4770      	bx	lr
 80135cc:	20000038 	.word	0x20000038

080135d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80135d0:	4b07      	ldr	r3, [pc, #28]	; (80135f0 <pxCurrentTCBConst2>)
 80135d2:	6819      	ldr	r1, [r3, #0]
 80135d4:	6808      	ldr	r0, [r1, #0]
 80135d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135da:	f380 8809 	msr	PSP, r0
 80135de:	f3bf 8f6f 	isb	sy
 80135e2:	f04f 0000 	mov.w	r0, #0
 80135e6:	f380 8811 	msr	BASEPRI, r0
 80135ea:	4770      	bx	lr
 80135ec:	f3af 8000 	nop.w

080135f0 <pxCurrentTCBConst2>:
 80135f0:	20000dc8 	.word	0x20000dc8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80135f4:	bf00      	nop
 80135f6:	bf00      	nop

080135f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80135f8:	4808      	ldr	r0, [pc, #32]	; (801361c <prvPortStartFirstTask+0x24>)
 80135fa:	6800      	ldr	r0, [r0, #0]
 80135fc:	6800      	ldr	r0, [r0, #0]
 80135fe:	f380 8808 	msr	MSP, r0
 8013602:	f04f 0000 	mov.w	r0, #0
 8013606:	f380 8814 	msr	CONTROL, r0
 801360a:	b662      	cpsie	i
 801360c:	b661      	cpsie	f
 801360e:	f3bf 8f4f 	dsb	sy
 8013612:	f3bf 8f6f 	isb	sy
 8013616:	df00      	svc	0
 8013618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801361a:	bf00      	nop
 801361c:	e000ed08 	.word	0xe000ed08

08013620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b084      	sub	sp, #16
 8013624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013626:	4b37      	ldr	r3, [pc, #220]	; (8013704 <xPortStartScheduler+0xe4>)
 8013628:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	781b      	ldrb	r3, [r3, #0]
 801362e:	b2db      	uxtb	r3, r3
 8013630:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	22ff      	movs	r2, #255	; 0xff
 8013636:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	781b      	ldrb	r3, [r3, #0]
 801363c:	b2db      	uxtb	r3, r3
 801363e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013640:	78fb      	ldrb	r3, [r7, #3]
 8013642:	b2db      	uxtb	r3, r3
 8013644:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013648:	b2da      	uxtb	r2, r3
 801364a:	4b2f      	ldr	r3, [pc, #188]	; (8013708 <xPortStartScheduler+0xe8>)
 801364c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801364e:	4b2f      	ldr	r3, [pc, #188]	; (801370c <xPortStartScheduler+0xec>)
 8013650:	2207      	movs	r2, #7
 8013652:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013654:	e009      	b.n	801366a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013656:	4b2d      	ldr	r3, [pc, #180]	; (801370c <xPortStartScheduler+0xec>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	3b01      	subs	r3, #1
 801365c:	4a2b      	ldr	r2, [pc, #172]	; (801370c <xPortStartScheduler+0xec>)
 801365e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013660:	78fb      	ldrb	r3, [r7, #3]
 8013662:	b2db      	uxtb	r3, r3
 8013664:	005b      	lsls	r3, r3, #1
 8013666:	b2db      	uxtb	r3, r3
 8013668:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801366a:	78fb      	ldrb	r3, [r7, #3]
 801366c:	b2db      	uxtb	r3, r3
 801366e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013672:	2b80      	cmp	r3, #128	; 0x80
 8013674:	d0ef      	beq.n	8013656 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013676:	4b25      	ldr	r3, [pc, #148]	; (801370c <xPortStartScheduler+0xec>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	f1c3 0307 	rsb	r3, r3, #7
 801367e:	2b04      	cmp	r3, #4
 8013680:	d00c      	beq.n	801369c <xPortStartScheduler+0x7c>
	__asm volatile
 8013682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013686:	b672      	cpsid	i
 8013688:	f383 8811 	msr	BASEPRI, r3
 801368c:	f3bf 8f6f 	isb	sy
 8013690:	f3bf 8f4f 	dsb	sy
 8013694:	b662      	cpsie	i
 8013696:	60bb      	str	r3, [r7, #8]
}
 8013698:	bf00      	nop
 801369a:	e7fe      	b.n	801369a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801369c:	4b1b      	ldr	r3, [pc, #108]	; (801370c <xPortStartScheduler+0xec>)
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	021b      	lsls	r3, r3, #8
 80136a2:	4a1a      	ldr	r2, [pc, #104]	; (801370c <xPortStartScheduler+0xec>)
 80136a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80136a6:	4b19      	ldr	r3, [pc, #100]	; (801370c <xPortStartScheduler+0xec>)
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80136ae:	4a17      	ldr	r2, [pc, #92]	; (801370c <xPortStartScheduler+0xec>)
 80136b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	b2da      	uxtb	r2, r3
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80136ba:	4b15      	ldr	r3, [pc, #84]	; (8013710 <xPortStartScheduler+0xf0>)
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	4a14      	ldr	r2, [pc, #80]	; (8013710 <xPortStartScheduler+0xf0>)
 80136c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80136c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80136c6:	4b12      	ldr	r3, [pc, #72]	; (8013710 <xPortStartScheduler+0xf0>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	4a11      	ldr	r2, [pc, #68]	; (8013710 <xPortStartScheduler+0xf0>)
 80136cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80136d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80136d2:	f000 f8dd 	bl	8013890 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80136d6:	4b0f      	ldr	r3, [pc, #60]	; (8013714 <xPortStartScheduler+0xf4>)
 80136d8:	2200      	movs	r2, #0
 80136da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80136dc:	f000 f8fc 	bl	80138d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80136e0:	4b0d      	ldr	r3, [pc, #52]	; (8013718 <xPortStartScheduler+0xf8>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	4a0c      	ldr	r2, [pc, #48]	; (8013718 <xPortStartScheduler+0xf8>)
 80136e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80136ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80136ec:	f7ff ff84 	bl	80135f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80136f0:	f7ff fb8e 	bl	8012e10 <vTaskSwitchContext>
	prvTaskExitError();
 80136f4:	f7ff ff3c 	bl	8013570 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80136f8:	2300      	movs	r3, #0
}
 80136fa:	4618      	mov	r0, r3
 80136fc:	3710      	adds	r7, #16
 80136fe:	46bd      	mov	sp, r7
 8013700:	bd80      	pop	{r7, pc}
 8013702:	bf00      	nop
 8013704:	e000e400 	.word	0xe000e400
 8013708:	20000ef4 	.word	0x20000ef4
 801370c:	20000ef8 	.word	0x20000ef8
 8013710:	e000ed20 	.word	0xe000ed20
 8013714:	20000038 	.word	0x20000038
 8013718:	e000ef34 	.word	0xe000ef34

0801371c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801371c:	b480      	push	{r7}
 801371e:	b083      	sub	sp, #12
 8013720:	af00      	add	r7, sp, #0
	__asm volatile
 8013722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013726:	b672      	cpsid	i
 8013728:	f383 8811 	msr	BASEPRI, r3
 801372c:	f3bf 8f6f 	isb	sy
 8013730:	f3bf 8f4f 	dsb	sy
 8013734:	b662      	cpsie	i
 8013736:	607b      	str	r3, [r7, #4]
}
 8013738:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801373a:	4b10      	ldr	r3, [pc, #64]	; (801377c <vPortEnterCritical+0x60>)
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	3301      	adds	r3, #1
 8013740:	4a0e      	ldr	r2, [pc, #56]	; (801377c <vPortEnterCritical+0x60>)
 8013742:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013744:	4b0d      	ldr	r3, [pc, #52]	; (801377c <vPortEnterCritical+0x60>)
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	2b01      	cmp	r3, #1
 801374a:	d111      	bne.n	8013770 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801374c:	4b0c      	ldr	r3, [pc, #48]	; (8013780 <vPortEnterCritical+0x64>)
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	b2db      	uxtb	r3, r3
 8013752:	2b00      	cmp	r3, #0
 8013754:	d00c      	beq.n	8013770 <vPortEnterCritical+0x54>
	__asm volatile
 8013756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801375a:	b672      	cpsid	i
 801375c:	f383 8811 	msr	BASEPRI, r3
 8013760:	f3bf 8f6f 	isb	sy
 8013764:	f3bf 8f4f 	dsb	sy
 8013768:	b662      	cpsie	i
 801376a:	603b      	str	r3, [r7, #0]
}
 801376c:	bf00      	nop
 801376e:	e7fe      	b.n	801376e <vPortEnterCritical+0x52>
	}
}
 8013770:	bf00      	nop
 8013772:	370c      	adds	r7, #12
 8013774:	46bd      	mov	sp, r7
 8013776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377a:	4770      	bx	lr
 801377c:	20000038 	.word	0x20000038
 8013780:	e000ed04 	.word	0xe000ed04

08013784 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013784:	b480      	push	{r7}
 8013786:	b083      	sub	sp, #12
 8013788:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801378a:	4b13      	ldr	r3, [pc, #76]	; (80137d8 <vPortExitCritical+0x54>)
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d10c      	bne.n	80137ac <vPortExitCritical+0x28>
	__asm volatile
 8013792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013796:	b672      	cpsid	i
 8013798:	f383 8811 	msr	BASEPRI, r3
 801379c:	f3bf 8f6f 	isb	sy
 80137a0:	f3bf 8f4f 	dsb	sy
 80137a4:	b662      	cpsie	i
 80137a6:	607b      	str	r3, [r7, #4]
}
 80137a8:	bf00      	nop
 80137aa:	e7fe      	b.n	80137aa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80137ac:	4b0a      	ldr	r3, [pc, #40]	; (80137d8 <vPortExitCritical+0x54>)
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	3b01      	subs	r3, #1
 80137b2:	4a09      	ldr	r2, [pc, #36]	; (80137d8 <vPortExitCritical+0x54>)
 80137b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80137b6:	4b08      	ldr	r3, [pc, #32]	; (80137d8 <vPortExitCritical+0x54>)
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d105      	bne.n	80137ca <vPortExitCritical+0x46>
 80137be:	2300      	movs	r3, #0
 80137c0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80137c2:	683b      	ldr	r3, [r7, #0]
 80137c4:	f383 8811 	msr	BASEPRI, r3
}
 80137c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80137ca:	bf00      	nop
 80137cc:	370c      	adds	r7, #12
 80137ce:	46bd      	mov	sp, r7
 80137d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d4:	4770      	bx	lr
 80137d6:	bf00      	nop
 80137d8:	20000038 	.word	0x20000038
 80137dc:	00000000 	.word	0x00000000

080137e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80137e0:	f3ef 8009 	mrs	r0, PSP
 80137e4:	f3bf 8f6f 	isb	sy
 80137e8:	4b15      	ldr	r3, [pc, #84]	; (8013840 <pxCurrentTCBConst>)
 80137ea:	681a      	ldr	r2, [r3, #0]
 80137ec:	f01e 0f10 	tst.w	lr, #16
 80137f0:	bf08      	it	eq
 80137f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80137f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137fa:	6010      	str	r0, [r2, #0]
 80137fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013800:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013804:	b672      	cpsid	i
 8013806:	f380 8811 	msr	BASEPRI, r0
 801380a:	f3bf 8f4f 	dsb	sy
 801380e:	f3bf 8f6f 	isb	sy
 8013812:	b662      	cpsie	i
 8013814:	f7ff fafc 	bl	8012e10 <vTaskSwitchContext>
 8013818:	f04f 0000 	mov.w	r0, #0
 801381c:	f380 8811 	msr	BASEPRI, r0
 8013820:	bc09      	pop	{r0, r3}
 8013822:	6819      	ldr	r1, [r3, #0]
 8013824:	6808      	ldr	r0, [r1, #0]
 8013826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801382a:	f01e 0f10 	tst.w	lr, #16
 801382e:	bf08      	it	eq
 8013830:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013834:	f380 8809 	msr	PSP, r0
 8013838:	f3bf 8f6f 	isb	sy
 801383c:	4770      	bx	lr
 801383e:	bf00      	nop

08013840 <pxCurrentTCBConst>:
 8013840:	20000dc8 	.word	0x20000dc8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013844:	bf00      	nop
 8013846:	bf00      	nop

08013848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b082      	sub	sp, #8
 801384c:	af00      	add	r7, sp, #0
	__asm volatile
 801384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013852:	b672      	cpsid	i
 8013854:	f383 8811 	msr	BASEPRI, r3
 8013858:	f3bf 8f6f 	isb	sy
 801385c:	f3bf 8f4f 	dsb	sy
 8013860:	b662      	cpsie	i
 8013862:	607b      	str	r3, [r7, #4]
}
 8013864:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013866:	f7ff fa19 	bl	8012c9c <xTaskIncrementTick>
 801386a:	4603      	mov	r3, r0
 801386c:	2b00      	cmp	r3, #0
 801386e:	d003      	beq.n	8013878 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013870:	4b06      	ldr	r3, [pc, #24]	; (801388c <SysTick_Handler+0x44>)
 8013872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013876:	601a      	str	r2, [r3, #0]
 8013878:	2300      	movs	r3, #0
 801387a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801387c:	683b      	ldr	r3, [r7, #0]
 801387e:	f383 8811 	msr	BASEPRI, r3
}
 8013882:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013884:	bf00      	nop
 8013886:	3708      	adds	r7, #8
 8013888:	46bd      	mov	sp, r7
 801388a:	bd80      	pop	{r7, pc}
 801388c:	e000ed04 	.word	0xe000ed04

08013890 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013890:	b480      	push	{r7}
 8013892:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013894:	4b0b      	ldr	r3, [pc, #44]	; (80138c4 <vPortSetupTimerInterrupt+0x34>)
 8013896:	2200      	movs	r2, #0
 8013898:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801389a:	4b0b      	ldr	r3, [pc, #44]	; (80138c8 <vPortSetupTimerInterrupt+0x38>)
 801389c:	2200      	movs	r2, #0
 801389e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80138a0:	4b0a      	ldr	r3, [pc, #40]	; (80138cc <vPortSetupTimerInterrupt+0x3c>)
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	4a0a      	ldr	r2, [pc, #40]	; (80138d0 <vPortSetupTimerInterrupt+0x40>)
 80138a6:	fba2 2303 	umull	r2, r3, r2, r3
 80138aa:	099b      	lsrs	r3, r3, #6
 80138ac:	4a09      	ldr	r2, [pc, #36]	; (80138d4 <vPortSetupTimerInterrupt+0x44>)
 80138ae:	3b01      	subs	r3, #1
 80138b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80138b2:	4b04      	ldr	r3, [pc, #16]	; (80138c4 <vPortSetupTimerInterrupt+0x34>)
 80138b4:	2207      	movs	r2, #7
 80138b6:	601a      	str	r2, [r3, #0]
}
 80138b8:	bf00      	nop
 80138ba:	46bd      	mov	sp, r7
 80138bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c0:	4770      	bx	lr
 80138c2:	bf00      	nop
 80138c4:	e000e010 	.word	0xe000e010
 80138c8:	e000e018 	.word	0xe000e018
 80138cc:	20000000 	.word	0x20000000
 80138d0:	10624dd3 	.word	0x10624dd3
 80138d4:	e000e014 	.word	0xe000e014

080138d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80138d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80138e8 <vPortEnableVFP+0x10>
 80138dc:	6801      	ldr	r1, [r0, #0]
 80138de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80138e2:	6001      	str	r1, [r0, #0]
 80138e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80138e6:	bf00      	nop
 80138e8:	e000ed88 	.word	0xe000ed88

080138ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80138ec:	b480      	push	{r7}
 80138ee:	b085      	sub	sp, #20
 80138f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80138f2:	f3ef 8305 	mrs	r3, IPSR
 80138f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	2b0f      	cmp	r3, #15
 80138fc:	d916      	bls.n	801392c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80138fe:	4a19      	ldr	r2, [pc, #100]	; (8013964 <vPortValidateInterruptPriority+0x78>)
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	4413      	add	r3, r2
 8013904:	781b      	ldrb	r3, [r3, #0]
 8013906:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013908:	4b17      	ldr	r3, [pc, #92]	; (8013968 <vPortValidateInterruptPriority+0x7c>)
 801390a:	781b      	ldrb	r3, [r3, #0]
 801390c:	7afa      	ldrb	r2, [r7, #11]
 801390e:	429a      	cmp	r2, r3
 8013910:	d20c      	bcs.n	801392c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8013912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013916:	b672      	cpsid	i
 8013918:	f383 8811 	msr	BASEPRI, r3
 801391c:	f3bf 8f6f 	isb	sy
 8013920:	f3bf 8f4f 	dsb	sy
 8013924:	b662      	cpsie	i
 8013926:	607b      	str	r3, [r7, #4]
}
 8013928:	bf00      	nop
 801392a:	e7fe      	b.n	801392a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801392c:	4b0f      	ldr	r3, [pc, #60]	; (801396c <vPortValidateInterruptPriority+0x80>)
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013934:	4b0e      	ldr	r3, [pc, #56]	; (8013970 <vPortValidateInterruptPriority+0x84>)
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	429a      	cmp	r2, r3
 801393a:	d90c      	bls.n	8013956 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013940:	b672      	cpsid	i
 8013942:	f383 8811 	msr	BASEPRI, r3
 8013946:	f3bf 8f6f 	isb	sy
 801394a:	f3bf 8f4f 	dsb	sy
 801394e:	b662      	cpsie	i
 8013950:	603b      	str	r3, [r7, #0]
}
 8013952:	bf00      	nop
 8013954:	e7fe      	b.n	8013954 <vPortValidateInterruptPriority+0x68>
	}
 8013956:	bf00      	nop
 8013958:	3714      	adds	r7, #20
 801395a:	46bd      	mov	sp, r7
 801395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013960:	4770      	bx	lr
 8013962:	bf00      	nop
 8013964:	e000e3f0 	.word	0xe000e3f0
 8013968:	20000ef4 	.word	0x20000ef4
 801396c:	e000ed0c 	.word	0xe000ed0c
 8013970:	20000ef8 	.word	0x20000ef8

08013974 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b08a      	sub	sp, #40	; 0x28
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801397c:	2300      	movs	r3, #0
 801397e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013980:	f7ff f8be 	bl	8012b00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013984:	4b5e      	ldr	r3, [pc, #376]	; (8013b00 <pvPortMalloc+0x18c>)
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d101      	bne.n	8013990 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801398c:	f000 f920 	bl	8013bd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013990:	4b5c      	ldr	r3, [pc, #368]	; (8013b04 <pvPortMalloc+0x190>)
 8013992:	681a      	ldr	r2, [r3, #0]
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	4013      	ands	r3, r2
 8013998:	2b00      	cmp	r3, #0
 801399a:	f040 8092 	bne.w	8013ac2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d01f      	beq.n	80139e4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80139a4:	2208      	movs	r2, #8
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	4413      	add	r3, r2
 80139aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	f003 0307 	and.w	r3, r3, #7
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d016      	beq.n	80139e4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	f023 0307 	bic.w	r3, r3, #7
 80139bc:	3308      	adds	r3, #8
 80139be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	f003 0307 	and.w	r3, r3, #7
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d00c      	beq.n	80139e4 <pvPortMalloc+0x70>
	__asm volatile
 80139ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139ce:	b672      	cpsid	i
 80139d0:	f383 8811 	msr	BASEPRI, r3
 80139d4:	f3bf 8f6f 	isb	sy
 80139d8:	f3bf 8f4f 	dsb	sy
 80139dc:	b662      	cpsie	i
 80139de:	617b      	str	r3, [r7, #20]
}
 80139e0:	bf00      	nop
 80139e2:	e7fe      	b.n	80139e2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d06b      	beq.n	8013ac2 <pvPortMalloc+0x14e>
 80139ea:	4b47      	ldr	r3, [pc, #284]	; (8013b08 <pvPortMalloc+0x194>)
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	687a      	ldr	r2, [r7, #4]
 80139f0:	429a      	cmp	r2, r3
 80139f2:	d866      	bhi.n	8013ac2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80139f4:	4b45      	ldr	r3, [pc, #276]	; (8013b0c <pvPortMalloc+0x198>)
 80139f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80139f8:	4b44      	ldr	r3, [pc, #272]	; (8013b0c <pvPortMalloc+0x198>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80139fe:	e004      	b.n	8013a0a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8013a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a0c:	685b      	ldr	r3, [r3, #4]
 8013a0e:	687a      	ldr	r2, [r7, #4]
 8013a10:	429a      	cmp	r2, r3
 8013a12:	d903      	bls.n	8013a1c <pvPortMalloc+0xa8>
 8013a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d1f1      	bne.n	8013a00 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013a1c:	4b38      	ldr	r3, [pc, #224]	; (8013b00 <pvPortMalloc+0x18c>)
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a22:	429a      	cmp	r2, r3
 8013a24:	d04d      	beq.n	8013ac2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013a26:	6a3b      	ldr	r3, [r7, #32]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	2208      	movs	r2, #8
 8013a2c:	4413      	add	r3, r2
 8013a2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a32:	681a      	ldr	r2, [r3, #0]
 8013a34:	6a3b      	ldr	r3, [r7, #32]
 8013a36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a3a:	685a      	ldr	r2, [r3, #4]
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	1ad2      	subs	r2, r2, r3
 8013a40:	2308      	movs	r3, #8
 8013a42:	005b      	lsls	r3, r3, #1
 8013a44:	429a      	cmp	r2, r3
 8013a46:	d921      	bls.n	8013a8c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	4413      	add	r3, r2
 8013a4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013a50:	69bb      	ldr	r3, [r7, #24]
 8013a52:	f003 0307 	and.w	r3, r3, #7
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d00c      	beq.n	8013a74 <pvPortMalloc+0x100>
	__asm volatile
 8013a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a5e:	b672      	cpsid	i
 8013a60:	f383 8811 	msr	BASEPRI, r3
 8013a64:	f3bf 8f6f 	isb	sy
 8013a68:	f3bf 8f4f 	dsb	sy
 8013a6c:	b662      	cpsie	i
 8013a6e:	613b      	str	r3, [r7, #16]
}
 8013a70:	bf00      	nop
 8013a72:	e7fe      	b.n	8013a72 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a76:	685a      	ldr	r2, [r3, #4]
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	1ad2      	subs	r2, r2, r3
 8013a7c:	69bb      	ldr	r3, [r7, #24]
 8013a7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a82:	687a      	ldr	r2, [r7, #4]
 8013a84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013a86:	69b8      	ldr	r0, [r7, #24]
 8013a88:	f000 f904 	bl	8013c94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013a8c:	4b1e      	ldr	r3, [pc, #120]	; (8013b08 <pvPortMalloc+0x194>)
 8013a8e:	681a      	ldr	r2, [r3, #0]
 8013a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a92:	685b      	ldr	r3, [r3, #4]
 8013a94:	1ad3      	subs	r3, r2, r3
 8013a96:	4a1c      	ldr	r2, [pc, #112]	; (8013b08 <pvPortMalloc+0x194>)
 8013a98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013a9a:	4b1b      	ldr	r3, [pc, #108]	; (8013b08 <pvPortMalloc+0x194>)
 8013a9c:	681a      	ldr	r2, [r3, #0]
 8013a9e:	4b1c      	ldr	r3, [pc, #112]	; (8013b10 <pvPortMalloc+0x19c>)
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	d203      	bcs.n	8013aae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013aa6:	4b18      	ldr	r3, [pc, #96]	; (8013b08 <pvPortMalloc+0x194>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	4a19      	ldr	r2, [pc, #100]	; (8013b10 <pvPortMalloc+0x19c>)
 8013aac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ab0:	685a      	ldr	r2, [r3, #4]
 8013ab2:	4b14      	ldr	r3, [pc, #80]	; (8013b04 <pvPortMalloc+0x190>)
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	431a      	orrs	r2, r3
 8013ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013abe:	2200      	movs	r2, #0
 8013ac0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013ac2:	f7ff f82b 	bl	8012b1c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8013ac6:	69fb      	ldr	r3, [r7, #28]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d101      	bne.n	8013ad0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8013acc:	f7ec fd84 	bl	80005d8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013ad0:	69fb      	ldr	r3, [r7, #28]
 8013ad2:	f003 0307 	and.w	r3, r3, #7
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d00c      	beq.n	8013af4 <pvPortMalloc+0x180>
	__asm volatile
 8013ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ade:	b672      	cpsid	i
 8013ae0:	f383 8811 	msr	BASEPRI, r3
 8013ae4:	f3bf 8f6f 	isb	sy
 8013ae8:	f3bf 8f4f 	dsb	sy
 8013aec:	b662      	cpsie	i
 8013aee:	60fb      	str	r3, [r7, #12]
}
 8013af0:	bf00      	nop
 8013af2:	e7fe      	b.n	8013af2 <pvPortMalloc+0x17e>
	return pvReturn;
 8013af4:	69fb      	ldr	r3, [r7, #28]
}
 8013af6:	4618      	mov	r0, r3
 8013af8:	3728      	adds	r7, #40	; 0x28
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bd80      	pop	{r7, pc}
 8013afe:	bf00      	nop
 8013b00:	20008f04 	.word	0x20008f04
 8013b04:	20008f10 	.word	0x20008f10
 8013b08:	20008f08 	.word	0x20008f08
 8013b0c:	20008efc 	.word	0x20008efc
 8013b10:	20008f0c 	.word	0x20008f0c

08013b14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b086      	sub	sp, #24
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d04c      	beq.n	8013bc0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013b26:	2308      	movs	r3, #8
 8013b28:	425b      	negs	r3, r3
 8013b2a:	697a      	ldr	r2, [r7, #20]
 8013b2c:	4413      	add	r3, r2
 8013b2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013b30:	697b      	ldr	r3, [r7, #20]
 8013b32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013b34:	693b      	ldr	r3, [r7, #16]
 8013b36:	685a      	ldr	r2, [r3, #4]
 8013b38:	4b23      	ldr	r3, [pc, #140]	; (8013bc8 <vPortFree+0xb4>)
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	4013      	ands	r3, r2
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d10c      	bne.n	8013b5c <vPortFree+0x48>
	__asm volatile
 8013b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b46:	b672      	cpsid	i
 8013b48:	f383 8811 	msr	BASEPRI, r3
 8013b4c:	f3bf 8f6f 	isb	sy
 8013b50:	f3bf 8f4f 	dsb	sy
 8013b54:	b662      	cpsie	i
 8013b56:	60fb      	str	r3, [r7, #12]
}
 8013b58:	bf00      	nop
 8013b5a:	e7fe      	b.n	8013b5a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013b5c:	693b      	ldr	r3, [r7, #16]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d00c      	beq.n	8013b7e <vPortFree+0x6a>
	__asm volatile
 8013b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b68:	b672      	cpsid	i
 8013b6a:	f383 8811 	msr	BASEPRI, r3
 8013b6e:	f3bf 8f6f 	isb	sy
 8013b72:	f3bf 8f4f 	dsb	sy
 8013b76:	b662      	cpsie	i
 8013b78:	60bb      	str	r3, [r7, #8]
}
 8013b7a:	bf00      	nop
 8013b7c:	e7fe      	b.n	8013b7c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013b7e:	693b      	ldr	r3, [r7, #16]
 8013b80:	685a      	ldr	r2, [r3, #4]
 8013b82:	4b11      	ldr	r3, [pc, #68]	; (8013bc8 <vPortFree+0xb4>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	4013      	ands	r3, r2
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d019      	beq.n	8013bc0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013b8c:	693b      	ldr	r3, [r7, #16]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d115      	bne.n	8013bc0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013b94:	693b      	ldr	r3, [r7, #16]
 8013b96:	685a      	ldr	r2, [r3, #4]
 8013b98:	4b0b      	ldr	r3, [pc, #44]	; (8013bc8 <vPortFree+0xb4>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	43db      	mvns	r3, r3
 8013b9e:	401a      	ands	r2, r3
 8013ba0:	693b      	ldr	r3, [r7, #16]
 8013ba2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013ba4:	f7fe ffac 	bl	8012b00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013ba8:	693b      	ldr	r3, [r7, #16]
 8013baa:	685a      	ldr	r2, [r3, #4]
 8013bac:	4b07      	ldr	r3, [pc, #28]	; (8013bcc <vPortFree+0xb8>)
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	4413      	add	r3, r2
 8013bb2:	4a06      	ldr	r2, [pc, #24]	; (8013bcc <vPortFree+0xb8>)
 8013bb4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013bb6:	6938      	ldr	r0, [r7, #16]
 8013bb8:	f000 f86c 	bl	8013c94 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013bbc:	f7fe ffae 	bl	8012b1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013bc0:	bf00      	nop
 8013bc2:	3718      	adds	r7, #24
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	bd80      	pop	{r7, pc}
 8013bc8:	20008f10 	.word	0x20008f10
 8013bcc:	20008f08 	.word	0x20008f08

08013bd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013bd0:	b480      	push	{r7}
 8013bd2:	b085      	sub	sp, #20
 8013bd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013bda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013bdc:	4b27      	ldr	r3, [pc, #156]	; (8013c7c <prvHeapInit+0xac>)
 8013bde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	f003 0307 	and.w	r3, r3, #7
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d00c      	beq.n	8013c04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	3307      	adds	r3, #7
 8013bee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	f023 0307 	bic.w	r3, r3, #7
 8013bf6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013bf8:	68ba      	ldr	r2, [r7, #8]
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	1ad3      	subs	r3, r2, r3
 8013bfe:	4a1f      	ldr	r2, [pc, #124]	; (8013c7c <prvHeapInit+0xac>)
 8013c00:	4413      	add	r3, r2
 8013c02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013c08:	4a1d      	ldr	r2, [pc, #116]	; (8013c80 <prvHeapInit+0xb0>)
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013c0e:	4b1c      	ldr	r3, [pc, #112]	; (8013c80 <prvHeapInit+0xb0>)
 8013c10:	2200      	movs	r2, #0
 8013c12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	68ba      	ldr	r2, [r7, #8]
 8013c18:	4413      	add	r3, r2
 8013c1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013c1c:	2208      	movs	r2, #8
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	1a9b      	subs	r3, r3, r2
 8013c22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	f023 0307 	bic.w	r3, r3, #7
 8013c2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	4a15      	ldr	r2, [pc, #84]	; (8013c84 <prvHeapInit+0xb4>)
 8013c30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013c32:	4b14      	ldr	r3, [pc, #80]	; (8013c84 <prvHeapInit+0xb4>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	2200      	movs	r2, #0
 8013c38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013c3a:	4b12      	ldr	r3, [pc, #72]	; (8013c84 <prvHeapInit+0xb4>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	2200      	movs	r2, #0
 8013c40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	68fa      	ldr	r2, [r7, #12]
 8013c4a:	1ad2      	subs	r2, r2, r3
 8013c4c:	683b      	ldr	r3, [r7, #0]
 8013c4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013c50:	4b0c      	ldr	r3, [pc, #48]	; (8013c84 <prvHeapInit+0xb4>)
 8013c52:	681a      	ldr	r2, [r3, #0]
 8013c54:	683b      	ldr	r3, [r7, #0]
 8013c56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013c58:	683b      	ldr	r3, [r7, #0]
 8013c5a:	685b      	ldr	r3, [r3, #4]
 8013c5c:	4a0a      	ldr	r2, [pc, #40]	; (8013c88 <prvHeapInit+0xb8>)
 8013c5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013c60:	683b      	ldr	r3, [r7, #0]
 8013c62:	685b      	ldr	r3, [r3, #4]
 8013c64:	4a09      	ldr	r2, [pc, #36]	; (8013c8c <prvHeapInit+0xbc>)
 8013c66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013c68:	4b09      	ldr	r3, [pc, #36]	; (8013c90 <prvHeapInit+0xc0>)
 8013c6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013c6e:	601a      	str	r2, [r3, #0]
}
 8013c70:	bf00      	nop
 8013c72:	3714      	adds	r7, #20
 8013c74:	46bd      	mov	sp, r7
 8013c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7a:	4770      	bx	lr
 8013c7c:	20000efc 	.word	0x20000efc
 8013c80:	20008efc 	.word	0x20008efc
 8013c84:	20008f04 	.word	0x20008f04
 8013c88:	20008f0c 	.word	0x20008f0c
 8013c8c:	20008f08 	.word	0x20008f08
 8013c90:	20008f10 	.word	0x20008f10

08013c94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013c94:	b480      	push	{r7}
 8013c96:	b085      	sub	sp, #20
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013c9c:	4b28      	ldr	r3, [pc, #160]	; (8013d40 <prvInsertBlockIntoFreeList+0xac>)
 8013c9e:	60fb      	str	r3, [r7, #12]
 8013ca0:	e002      	b.n	8013ca8 <prvInsertBlockIntoFreeList+0x14>
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	60fb      	str	r3, [r7, #12]
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	687a      	ldr	r2, [r7, #4]
 8013cae:	429a      	cmp	r2, r3
 8013cb0:	d8f7      	bhi.n	8013ca2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	685b      	ldr	r3, [r3, #4]
 8013cba:	68ba      	ldr	r2, [r7, #8]
 8013cbc:	4413      	add	r3, r2
 8013cbe:	687a      	ldr	r2, [r7, #4]
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d108      	bne.n	8013cd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	685a      	ldr	r2, [r3, #4]
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	685b      	ldr	r3, [r3, #4]
 8013ccc:	441a      	add	r2, r3
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	685b      	ldr	r3, [r3, #4]
 8013cde:	68ba      	ldr	r2, [r7, #8]
 8013ce0:	441a      	add	r2, r3
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	d118      	bne.n	8013d1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	681a      	ldr	r2, [r3, #0]
 8013cee:	4b15      	ldr	r3, [pc, #84]	; (8013d44 <prvInsertBlockIntoFreeList+0xb0>)
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	429a      	cmp	r2, r3
 8013cf4:	d00d      	beq.n	8013d12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	685a      	ldr	r2, [r3, #4]
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	685b      	ldr	r3, [r3, #4]
 8013d00:	441a      	add	r2, r3
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	681a      	ldr	r2, [r3, #0]
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	601a      	str	r2, [r3, #0]
 8013d10:	e008      	b.n	8013d24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013d12:	4b0c      	ldr	r3, [pc, #48]	; (8013d44 <prvInsertBlockIntoFreeList+0xb0>)
 8013d14:	681a      	ldr	r2, [r3, #0]
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	601a      	str	r2, [r3, #0]
 8013d1a:	e003      	b.n	8013d24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	681a      	ldr	r2, [r3, #0]
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013d24:	68fa      	ldr	r2, [r7, #12]
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	429a      	cmp	r2, r3
 8013d2a:	d002      	beq.n	8013d32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	687a      	ldr	r2, [r7, #4]
 8013d30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013d32:	bf00      	nop
 8013d34:	3714      	adds	r7, #20
 8013d36:	46bd      	mov	sp, r7
 8013d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3c:	4770      	bx	lr
 8013d3e:	bf00      	nop
 8013d40:	20008efc 	.word	0x20008efc
 8013d44:	20008f04 	.word	0x20008f04

08013d48 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8013d4c:	2201      	movs	r2, #1
 8013d4e:	490e      	ldr	r1, [pc, #56]	; (8013d88 <MX_USB_HOST_Init+0x40>)
 8013d50:	480e      	ldr	r0, [pc, #56]	; (8013d8c <MX_USB_HOST_Init+0x44>)
 8013d52:	f7fb ff01 	bl	800fb58 <USBH_Init>
 8013d56:	4603      	mov	r3, r0
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d001      	beq.n	8013d60 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8013d5c:	f7ed ff96 	bl	8001c8c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8013d60:	490b      	ldr	r1, [pc, #44]	; (8013d90 <MX_USB_HOST_Init+0x48>)
 8013d62:	480a      	ldr	r0, [pc, #40]	; (8013d8c <MX_USB_HOST_Init+0x44>)
 8013d64:	f7fb ffae 	bl	800fcc4 <USBH_RegisterClass>
 8013d68:	4603      	mov	r3, r0
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d001      	beq.n	8013d72 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8013d6e:	f7ed ff8d 	bl	8001c8c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8013d72:	4806      	ldr	r0, [pc, #24]	; (8013d8c <MX_USB_HOST_Init+0x44>)
 8013d74:	f7fc f832 	bl	800fddc <USBH_Start>
 8013d78:	4603      	mov	r3, r0
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d001      	beq.n	8013d82 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8013d7e:	f7ed ff85 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8013d82:	bf00      	nop
 8013d84:	bd80      	pop	{r7, pc}
 8013d86:	bf00      	nop
 8013d88:	08013d95 	.word	0x08013d95
 8013d8c:	20008f14 	.word	0x20008f14
 8013d90:	20000018 	.word	0x20000018

08013d94 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8013d94:	b480      	push	{r7}
 8013d96:	b083      	sub	sp, #12
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
 8013d9c:	460b      	mov	r3, r1
 8013d9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8013da0:	78fb      	ldrb	r3, [r7, #3]
 8013da2:	3b01      	subs	r3, #1
 8013da4:	2b04      	cmp	r3, #4
 8013da6:	d819      	bhi.n	8013ddc <USBH_UserProcess+0x48>
 8013da8:	a201      	add	r2, pc, #4	; (adr r2, 8013db0 <USBH_UserProcess+0x1c>)
 8013daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dae:	bf00      	nop
 8013db0:	08013ddd 	.word	0x08013ddd
 8013db4:	08013dcd 	.word	0x08013dcd
 8013db8:	08013ddd 	.word	0x08013ddd
 8013dbc:	08013dd5 	.word	0x08013dd5
 8013dc0:	08013dc5 	.word	0x08013dc5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8013dc4:	4b09      	ldr	r3, [pc, #36]	; (8013dec <USBH_UserProcess+0x58>)
 8013dc6:	2203      	movs	r2, #3
 8013dc8:	701a      	strb	r2, [r3, #0]
  break;
 8013dca:	e008      	b.n	8013dde <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8013dcc:	4b07      	ldr	r3, [pc, #28]	; (8013dec <USBH_UserProcess+0x58>)
 8013dce:	2202      	movs	r2, #2
 8013dd0:	701a      	strb	r2, [r3, #0]
  break;
 8013dd2:	e004      	b.n	8013dde <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8013dd4:	4b05      	ldr	r3, [pc, #20]	; (8013dec <USBH_UserProcess+0x58>)
 8013dd6:	2201      	movs	r2, #1
 8013dd8:	701a      	strb	r2, [r3, #0]
  break;
 8013dda:	e000      	b.n	8013dde <USBH_UserProcess+0x4a>

  default:
  break;
 8013ddc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8013dde:	bf00      	nop
 8013de0:	370c      	adds	r7, #12
 8013de2:	46bd      	mov	sp, r7
 8013de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de8:	4770      	bx	lr
 8013dea:	bf00      	nop
 8013dec:	200092f8 	.word	0x200092f8

08013df0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b08a      	sub	sp, #40	; 0x28
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013df8:	f107 0314 	add.w	r3, r7, #20
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	601a      	str	r2, [r3, #0]
 8013e00:	605a      	str	r2, [r3, #4]
 8013e02:	609a      	str	r2, [r3, #8]
 8013e04:	60da      	str	r2, [r3, #12]
 8013e06:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013e10:	d13c      	bne.n	8013e8c <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013e12:	4b20      	ldr	r3, [pc, #128]	; (8013e94 <HAL_HCD_MspInit+0xa4>)
 8013e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e16:	4a1f      	ldr	r2, [pc, #124]	; (8013e94 <HAL_HCD_MspInit+0xa4>)
 8013e18:	f043 0301 	orr.w	r3, r3, #1
 8013e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8013e1e:	4b1d      	ldr	r3, [pc, #116]	; (8013e94 <HAL_HCD_MspInit+0xa4>)
 8013e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e22:	f003 0301 	and.w	r3, r3, #1
 8013e26:	613b      	str	r3, [r7, #16]
 8013e28:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8013e2a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8013e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013e30:	2302      	movs	r3, #2
 8013e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013e34:	2300      	movs	r3, #0
 8013e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013e38:	2303      	movs	r3, #3
 8013e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013e3c:	230a      	movs	r3, #10
 8013e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013e40:	f107 0314 	add.w	r3, r7, #20
 8013e44:	4619      	mov	r1, r3
 8013e46:	4814      	ldr	r0, [pc, #80]	; (8013e98 <HAL_HCD_MspInit+0xa8>)
 8013e48:	f7f0 ff70 	bl	8004d2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013e4c:	4b11      	ldr	r3, [pc, #68]	; (8013e94 <HAL_HCD_MspInit+0xa4>)
 8013e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e50:	4a10      	ldr	r2, [pc, #64]	; (8013e94 <HAL_HCD_MspInit+0xa4>)
 8013e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e56:	6353      	str	r3, [r2, #52]	; 0x34
 8013e58:	4b0e      	ldr	r3, [pc, #56]	; (8013e94 <HAL_HCD_MspInit+0xa4>)
 8013e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e60:	60fb      	str	r3, [r7, #12]
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	4b0b      	ldr	r3, [pc, #44]	; (8013e94 <HAL_HCD_MspInit+0xa4>)
 8013e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e68:	4a0a      	ldr	r2, [pc, #40]	; (8013e94 <HAL_HCD_MspInit+0xa4>)
 8013e6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013e6e:	6453      	str	r3, [r2, #68]	; 0x44
 8013e70:	4b08      	ldr	r3, [pc, #32]	; (8013e94 <HAL_HCD_MspInit+0xa4>)
 8013e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013e78:	60bb      	str	r3, [r7, #8]
 8013e7a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	2105      	movs	r1, #5
 8013e80:	2043      	movs	r0, #67	; 0x43
 8013e82:	f7ef fb6b 	bl	800355c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013e86:	2043      	movs	r0, #67	; 0x43
 8013e88:	f7ef fb84 	bl	8003594 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013e8c:	bf00      	nop
 8013e8e:	3728      	adds	r7, #40	; 0x28
 8013e90:	46bd      	mov	sp, r7
 8013e92:	bd80      	pop	{r7, pc}
 8013e94:	40023800 	.word	0x40023800
 8013e98:	40020000 	.word	0x40020000

08013e9c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b082      	sub	sp, #8
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f7fc fc43 	bl	8010736 <USBH_LL_IncTimer>
}
 8013eb0:	bf00      	nop
 8013eb2:	3708      	adds	r7, #8
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bd80      	pop	{r7, pc}

08013eb8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b082      	sub	sp, #8
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f7fc fc87 	bl	80107da <USBH_LL_Connect>
}
 8013ecc:	bf00      	nop
 8013ece:	3708      	adds	r7, #8
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}

08013ed4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b082      	sub	sp, #8
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f7fc fc9c 	bl	8010820 <USBH_LL_Disconnect>
}
 8013ee8:	bf00      	nop
 8013eea:	3708      	adds	r7, #8
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd80      	pop	{r7, pc}

08013ef0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b082      	sub	sp, #8
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
 8013ef8:	460b      	mov	r3, r1
 8013efa:	70fb      	strb	r3, [r7, #3]
 8013efc:	4613      	mov	r3, r2
 8013efe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7fc fcd1 	bl	80108ae <USBH_LL_NotifyURBChange>
#endif
}
 8013f0c:	bf00      	nop
 8013f0e:	3708      	adds	r7, #8
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}

08013f14 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b082      	sub	sp, #8
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013f22:	4618      	mov	r0, r3
 8013f24:	f7fc fc31 	bl	801078a <USBH_LL_PortEnabled>
}
 8013f28:	bf00      	nop
 8013f2a:	3708      	adds	r7, #8
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}

08013f30 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b082      	sub	sp, #8
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f7fc fc3d 	bl	80107be <USBH_LL_PortDisabled>
}
 8013f44:	bf00      	nop
 8013f46:	3708      	adds	r7, #8
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	bd80      	pop	{r7, pc}

08013f4c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b082      	sub	sp, #8
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8013f5a:	2b01      	cmp	r3, #1
 8013f5c:	d12a      	bne.n	8013fb4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8013f5e:	4a18      	ldr	r2, [pc, #96]	; (8013fc0 <USBH_LL_Init+0x74>)
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	4a15      	ldr	r2, [pc, #84]	; (8013fc0 <USBH_LL_Init+0x74>)
 8013f6a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013f6e:	4b14      	ldr	r3, [pc, #80]	; (8013fc0 <USBH_LL_Init+0x74>)
 8013f70:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013f74:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8013f76:	4b12      	ldr	r3, [pc, #72]	; (8013fc0 <USBH_LL_Init+0x74>)
 8013f78:	2208      	movs	r2, #8
 8013f7a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8013f7c:	4b10      	ldr	r3, [pc, #64]	; (8013fc0 <USBH_LL_Init+0x74>)
 8013f7e:	2201      	movs	r2, #1
 8013f80:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013f82:	4b0f      	ldr	r3, [pc, #60]	; (8013fc0 <USBH_LL_Init+0x74>)
 8013f84:	2200      	movs	r2, #0
 8013f86:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8013f88:	4b0d      	ldr	r3, [pc, #52]	; (8013fc0 <USBH_LL_Init+0x74>)
 8013f8a:	2202      	movs	r2, #2
 8013f8c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013f8e:	4b0c      	ldr	r3, [pc, #48]	; (8013fc0 <USBH_LL_Init+0x74>)
 8013f90:	2200      	movs	r2, #0
 8013f92:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8013f94:	480a      	ldr	r0, [pc, #40]	; (8013fc0 <USBH_LL_Init+0x74>)
 8013f96:	f7f1 f8bf 	bl	8005118 <HAL_HCD_Init>
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d001      	beq.n	8013fa4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8013fa0:	f7ed fe74 	bl	8001c8c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8013fa4:	4806      	ldr	r0, [pc, #24]	; (8013fc0 <USBH_LL_Init+0x74>)
 8013fa6:	f7f1 fc9b 	bl	80058e0 <HAL_HCD_GetCurrentFrame>
 8013faa:	4603      	mov	r3, r0
 8013fac:	4619      	mov	r1, r3
 8013fae:	6878      	ldr	r0, [r7, #4]
 8013fb0:	f7fc fbb2 	bl	8010718 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8013fb4:	2300      	movs	r3, #0
}
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	3708      	adds	r7, #8
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bd80      	pop	{r7, pc}
 8013fbe:	bf00      	nop
 8013fc0:	200092fc 	.word	0x200092fc

08013fc4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b084      	sub	sp, #16
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013fcc:	2300      	movs	r3, #0
 8013fce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f7f1 fc0a 	bl	80057f4 <HAL_HCD_Start>
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013fe4:	7bfb      	ldrb	r3, [r7, #15]
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f000 f95c 	bl	80142a4 <USBH_Get_USB_Status>
 8013fec:	4603      	mov	r3, r0
 8013fee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013ff0:	7bbb      	ldrb	r3, [r7, #14]
}
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	3710      	adds	r7, #16
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bd80      	pop	{r7, pc}

08013ffa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8013ffa:	b580      	push	{r7, lr}
 8013ffc:	b084      	sub	sp, #16
 8013ffe:	af00      	add	r7, sp, #0
 8014000:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014002:	2300      	movs	r3, #0
 8014004:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014006:	2300      	movs	r3, #0
 8014008:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014010:	4618      	mov	r0, r3
 8014012:	f7f1 fc12 	bl	800583a <HAL_HCD_Stop>
 8014016:	4603      	mov	r3, r0
 8014018:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801401a:	7bfb      	ldrb	r3, [r7, #15]
 801401c:	4618      	mov	r0, r3
 801401e:	f000 f941 	bl	80142a4 <USBH_Get_USB_Status>
 8014022:	4603      	mov	r3, r0
 8014024:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014026:	7bbb      	ldrb	r3, [r7, #14]
}
 8014028:	4618      	mov	r0, r3
 801402a:	3710      	adds	r7, #16
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}

08014030 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b084      	sub	sp, #16
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8014038:	2301      	movs	r3, #1
 801403a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014042:	4618      	mov	r0, r3
 8014044:	f7f1 fc5a 	bl	80058fc <HAL_HCD_GetCurrentSpeed>
 8014048:	4603      	mov	r3, r0
 801404a:	2b02      	cmp	r3, #2
 801404c:	d00c      	beq.n	8014068 <USBH_LL_GetSpeed+0x38>
 801404e:	2b02      	cmp	r3, #2
 8014050:	d80d      	bhi.n	801406e <USBH_LL_GetSpeed+0x3e>
 8014052:	2b00      	cmp	r3, #0
 8014054:	d002      	beq.n	801405c <USBH_LL_GetSpeed+0x2c>
 8014056:	2b01      	cmp	r3, #1
 8014058:	d003      	beq.n	8014062 <USBH_LL_GetSpeed+0x32>
 801405a:	e008      	b.n	801406e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801405c:	2300      	movs	r3, #0
 801405e:	73fb      	strb	r3, [r7, #15]
    break;
 8014060:	e008      	b.n	8014074 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8014062:	2301      	movs	r3, #1
 8014064:	73fb      	strb	r3, [r7, #15]
    break;
 8014066:	e005      	b.n	8014074 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8014068:	2302      	movs	r3, #2
 801406a:	73fb      	strb	r3, [r7, #15]
    break;
 801406c:	e002      	b.n	8014074 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801406e:	2301      	movs	r3, #1
 8014070:	73fb      	strb	r3, [r7, #15]
    break;
 8014072:	bf00      	nop
  }
  return  speed;
 8014074:	7bfb      	ldrb	r3, [r7, #15]
}
 8014076:	4618      	mov	r0, r3
 8014078:	3710      	adds	r7, #16
 801407a:	46bd      	mov	sp, r7
 801407c:	bd80      	pop	{r7, pc}

0801407e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801407e:	b580      	push	{r7, lr}
 8014080:	b084      	sub	sp, #16
 8014082:	af00      	add	r7, sp, #0
 8014084:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014086:	2300      	movs	r3, #0
 8014088:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801408a:	2300      	movs	r3, #0
 801408c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014094:	4618      	mov	r0, r3
 8014096:	f7f1 fbed 	bl	8005874 <HAL_HCD_ResetPort>
 801409a:	4603      	mov	r3, r0
 801409c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801409e:	7bfb      	ldrb	r3, [r7, #15]
 80140a0:	4618      	mov	r0, r3
 80140a2:	f000 f8ff 	bl	80142a4 <USBH_Get_USB_Status>
 80140a6:	4603      	mov	r3, r0
 80140a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80140aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80140ac:	4618      	mov	r0, r3
 80140ae:	3710      	adds	r7, #16
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd80      	pop	{r7, pc}

080140b4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b082      	sub	sp, #8
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
 80140bc:	460b      	mov	r3, r1
 80140be:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80140c6:	78fa      	ldrb	r2, [r7, #3]
 80140c8:	4611      	mov	r1, r2
 80140ca:	4618      	mov	r0, r3
 80140cc:	f7f1 fbf4 	bl	80058b8 <HAL_HCD_HC_GetXferCount>
 80140d0:	4603      	mov	r3, r0
}
 80140d2:	4618      	mov	r0, r3
 80140d4:	3708      	adds	r7, #8
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd80      	pop	{r7, pc}

080140da <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80140da:	b590      	push	{r4, r7, lr}
 80140dc:	b089      	sub	sp, #36	; 0x24
 80140de:	af04      	add	r7, sp, #16
 80140e0:	6078      	str	r0, [r7, #4]
 80140e2:	4608      	mov	r0, r1
 80140e4:	4611      	mov	r1, r2
 80140e6:	461a      	mov	r2, r3
 80140e8:	4603      	mov	r3, r0
 80140ea:	70fb      	strb	r3, [r7, #3]
 80140ec:	460b      	mov	r3, r1
 80140ee:	70bb      	strb	r3, [r7, #2]
 80140f0:	4613      	mov	r3, r2
 80140f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80140f4:	2300      	movs	r3, #0
 80140f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80140f8:	2300      	movs	r3, #0
 80140fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8014102:	787c      	ldrb	r4, [r7, #1]
 8014104:	78ba      	ldrb	r2, [r7, #2]
 8014106:	78f9      	ldrb	r1, [r7, #3]
 8014108:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801410a:	9302      	str	r3, [sp, #8]
 801410c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014110:	9301      	str	r3, [sp, #4]
 8014112:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014116:	9300      	str	r3, [sp, #0]
 8014118:	4623      	mov	r3, r4
 801411a:	f7f1 f85f 	bl	80051dc <HAL_HCD_HC_Init>
 801411e:	4603      	mov	r3, r0
 8014120:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8014122:	7bfb      	ldrb	r3, [r7, #15]
 8014124:	4618      	mov	r0, r3
 8014126:	f000 f8bd 	bl	80142a4 <USBH_Get_USB_Status>
 801412a:	4603      	mov	r3, r0
 801412c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801412e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014130:	4618      	mov	r0, r3
 8014132:	3714      	adds	r7, #20
 8014134:	46bd      	mov	sp, r7
 8014136:	bd90      	pop	{r4, r7, pc}

08014138 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b084      	sub	sp, #16
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
 8014140:	460b      	mov	r3, r1
 8014142:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014144:	2300      	movs	r3, #0
 8014146:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014148:	2300      	movs	r3, #0
 801414a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014152:	78fa      	ldrb	r2, [r7, #3]
 8014154:	4611      	mov	r1, r2
 8014156:	4618      	mov	r0, r3
 8014158:	f7f1 f8cf 	bl	80052fa <HAL_HCD_HC_Halt>
 801415c:	4603      	mov	r3, r0
 801415e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014160:	7bfb      	ldrb	r3, [r7, #15]
 8014162:	4618      	mov	r0, r3
 8014164:	f000 f89e 	bl	80142a4 <USBH_Get_USB_Status>
 8014168:	4603      	mov	r3, r0
 801416a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801416c:	7bbb      	ldrb	r3, [r7, #14]
}
 801416e:	4618      	mov	r0, r3
 8014170:	3710      	adds	r7, #16
 8014172:	46bd      	mov	sp, r7
 8014174:	bd80      	pop	{r7, pc}

08014176 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8014176:	b590      	push	{r4, r7, lr}
 8014178:	b089      	sub	sp, #36	; 0x24
 801417a:	af04      	add	r7, sp, #16
 801417c:	6078      	str	r0, [r7, #4]
 801417e:	4608      	mov	r0, r1
 8014180:	4611      	mov	r1, r2
 8014182:	461a      	mov	r2, r3
 8014184:	4603      	mov	r3, r0
 8014186:	70fb      	strb	r3, [r7, #3]
 8014188:	460b      	mov	r3, r1
 801418a:	70bb      	strb	r3, [r7, #2]
 801418c:	4613      	mov	r3, r2
 801418e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014190:	2300      	movs	r3, #0
 8014192:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014194:	2300      	movs	r3, #0
 8014196:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801419e:	787c      	ldrb	r4, [r7, #1]
 80141a0:	78ba      	ldrb	r2, [r7, #2]
 80141a2:	78f9      	ldrb	r1, [r7, #3]
 80141a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80141a8:	9303      	str	r3, [sp, #12]
 80141aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80141ac:	9302      	str	r3, [sp, #8]
 80141ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141b0:	9301      	str	r3, [sp, #4]
 80141b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80141b6:	9300      	str	r3, [sp, #0]
 80141b8:	4623      	mov	r3, r4
 80141ba:	f7f1 f8c1 	bl	8005340 <HAL_HCD_HC_SubmitRequest>
 80141be:	4603      	mov	r3, r0
 80141c0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80141c2:	7bfb      	ldrb	r3, [r7, #15]
 80141c4:	4618      	mov	r0, r3
 80141c6:	f000 f86d 	bl	80142a4 <USBH_Get_USB_Status>
 80141ca:	4603      	mov	r3, r0
 80141cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80141ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80141d0:	4618      	mov	r0, r3
 80141d2:	3714      	adds	r7, #20
 80141d4:	46bd      	mov	sp, r7
 80141d6:	bd90      	pop	{r4, r7, pc}

080141d8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b082      	sub	sp, #8
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
 80141e0:	460b      	mov	r3, r1
 80141e2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80141ea:	78fa      	ldrb	r2, [r7, #3]
 80141ec:	4611      	mov	r1, r2
 80141ee:	4618      	mov	r0, r3
 80141f0:	f7f1 fb4e 	bl	8005890 <HAL_HCD_HC_GetURBState>
 80141f4:	4603      	mov	r3, r0
}
 80141f6:	4618      	mov	r0, r3
 80141f8:	3708      	adds	r7, #8
 80141fa:	46bd      	mov	sp, r7
 80141fc:	bd80      	pop	{r7, pc}

080141fe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80141fe:	b580      	push	{r7, lr}
 8014200:	b082      	sub	sp, #8
 8014202:	af00      	add	r7, sp, #0
 8014204:	6078      	str	r0, [r7, #4]
 8014206:	460b      	mov	r3, r1
 8014208:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8014210:	2b01      	cmp	r3, #1
 8014212:	d103      	bne.n	801421c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8014214:	78fb      	ldrb	r3, [r7, #3]
 8014216:	4618      	mov	r0, r3
 8014218:	f000 f870 	bl	80142fc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801421c:	20c8      	movs	r0, #200	; 0xc8
 801421e:	f7ee fe39 	bl	8002e94 <HAL_Delay>
  return USBH_OK;
 8014222:	2300      	movs	r3, #0
}
 8014224:	4618      	mov	r0, r3
 8014226:	3708      	adds	r7, #8
 8014228:	46bd      	mov	sp, r7
 801422a:	bd80      	pop	{r7, pc}

0801422c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801422c:	b480      	push	{r7}
 801422e:	b085      	sub	sp, #20
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
 8014234:	460b      	mov	r3, r1
 8014236:	70fb      	strb	r3, [r7, #3]
 8014238:	4613      	mov	r3, r2
 801423a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014242:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8014244:	78fb      	ldrb	r3, [r7, #3]
 8014246:	68fa      	ldr	r2, [r7, #12]
 8014248:	212c      	movs	r1, #44	; 0x2c
 801424a:	fb01 f303 	mul.w	r3, r1, r3
 801424e:	4413      	add	r3, r2
 8014250:	333b      	adds	r3, #59	; 0x3b
 8014252:	781b      	ldrb	r3, [r3, #0]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d009      	beq.n	801426c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8014258:	78fb      	ldrb	r3, [r7, #3]
 801425a:	68fa      	ldr	r2, [r7, #12]
 801425c:	212c      	movs	r1, #44	; 0x2c
 801425e:	fb01 f303 	mul.w	r3, r1, r3
 8014262:	4413      	add	r3, r2
 8014264:	3354      	adds	r3, #84	; 0x54
 8014266:	78ba      	ldrb	r2, [r7, #2]
 8014268:	701a      	strb	r2, [r3, #0]
 801426a:	e008      	b.n	801427e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801426c:	78fb      	ldrb	r3, [r7, #3]
 801426e:	68fa      	ldr	r2, [r7, #12]
 8014270:	212c      	movs	r1, #44	; 0x2c
 8014272:	fb01 f303 	mul.w	r3, r1, r3
 8014276:	4413      	add	r3, r2
 8014278:	3355      	adds	r3, #85	; 0x55
 801427a:	78ba      	ldrb	r2, [r7, #2]
 801427c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801427e:	2300      	movs	r3, #0
}
 8014280:	4618      	mov	r0, r3
 8014282:	3714      	adds	r7, #20
 8014284:	46bd      	mov	sp, r7
 8014286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428a:	4770      	bx	lr

0801428c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b082      	sub	sp, #8
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8014294:	6878      	ldr	r0, [r7, #4]
 8014296:	f7ee fdfd 	bl	8002e94 <HAL_Delay>
}
 801429a:	bf00      	nop
 801429c:	3708      	adds	r7, #8
 801429e:	46bd      	mov	sp, r7
 80142a0:	bd80      	pop	{r7, pc}
	...

080142a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80142a4:	b480      	push	{r7}
 80142a6:	b085      	sub	sp, #20
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	4603      	mov	r3, r0
 80142ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80142ae:	2300      	movs	r3, #0
 80142b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80142b2:	79fb      	ldrb	r3, [r7, #7]
 80142b4:	2b03      	cmp	r3, #3
 80142b6:	d817      	bhi.n	80142e8 <USBH_Get_USB_Status+0x44>
 80142b8:	a201      	add	r2, pc, #4	; (adr r2, 80142c0 <USBH_Get_USB_Status+0x1c>)
 80142ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142be:	bf00      	nop
 80142c0:	080142d1 	.word	0x080142d1
 80142c4:	080142d7 	.word	0x080142d7
 80142c8:	080142dd 	.word	0x080142dd
 80142cc:	080142e3 	.word	0x080142e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80142d0:	2300      	movs	r3, #0
 80142d2:	73fb      	strb	r3, [r7, #15]
    break;
 80142d4:	e00b      	b.n	80142ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80142d6:	2302      	movs	r3, #2
 80142d8:	73fb      	strb	r3, [r7, #15]
    break;
 80142da:	e008      	b.n	80142ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80142dc:	2301      	movs	r3, #1
 80142de:	73fb      	strb	r3, [r7, #15]
    break;
 80142e0:	e005      	b.n	80142ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80142e2:	2302      	movs	r3, #2
 80142e4:	73fb      	strb	r3, [r7, #15]
    break;
 80142e6:	e002      	b.n	80142ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80142e8:	2302      	movs	r3, #2
 80142ea:	73fb      	strb	r3, [r7, #15]
    break;
 80142ec:	bf00      	nop
  }
  return usb_status;
 80142ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80142f0:	4618      	mov	r0, r3
 80142f2:	3714      	adds	r7, #20
 80142f4:	46bd      	mov	sp, r7
 80142f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142fa:	4770      	bx	lr

080142fc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b084      	sub	sp, #16
 8014300:	af00      	add	r7, sp, #0
 8014302:	4603      	mov	r3, r0
 8014304:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8014306:	79fb      	ldrb	r3, [r7, #7]
 8014308:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801430a:	79fb      	ldrb	r3, [r7, #7]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d102      	bne.n	8014316 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8014310:	2301      	movs	r3, #1
 8014312:	73fb      	strb	r3, [r7, #15]
 8014314:	e001      	b.n	801431a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8014316:	2300      	movs	r3, #0
 8014318:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801431a:	7bfb      	ldrb	r3, [r7, #15]
 801431c:	461a      	mov	r2, r3
 801431e:	2120      	movs	r1, #32
 8014320:	4803      	ldr	r0, [pc, #12]	; (8014330 <MX_DriverVbusFS+0x34>)
 8014322:	f7f0 fec7 	bl	80050b4 <HAL_GPIO_WritePin>
}
 8014326:	bf00      	nop
 8014328:	3710      	adds	r7, #16
 801432a:	46bd      	mov	sp, r7
 801432c:	bd80      	pop	{r7, pc}
 801432e:	bf00      	nop
 8014330:	40020c00 	.word	0x40020c00

08014334 <__errno>:
 8014334:	4b01      	ldr	r3, [pc, #4]	; (801433c <__errno+0x8>)
 8014336:	6818      	ldr	r0, [r3, #0]
 8014338:	4770      	bx	lr
 801433a:	bf00      	nop
 801433c:	2000003c 	.word	0x2000003c

08014340 <__libc_init_array>:
 8014340:	b570      	push	{r4, r5, r6, lr}
 8014342:	4d0d      	ldr	r5, [pc, #52]	; (8014378 <__libc_init_array+0x38>)
 8014344:	4c0d      	ldr	r4, [pc, #52]	; (801437c <__libc_init_array+0x3c>)
 8014346:	1b64      	subs	r4, r4, r5
 8014348:	10a4      	asrs	r4, r4, #2
 801434a:	2600      	movs	r6, #0
 801434c:	42a6      	cmp	r6, r4
 801434e:	d109      	bne.n	8014364 <__libc_init_array+0x24>
 8014350:	4d0b      	ldr	r5, [pc, #44]	; (8014380 <__libc_init_array+0x40>)
 8014352:	4c0c      	ldr	r4, [pc, #48]	; (8014384 <__libc_init_array+0x44>)
 8014354:	f000 fc9e 	bl	8014c94 <_init>
 8014358:	1b64      	subs	r4, r4, r5
 801435a:	10a4      	asrs	r4, r4, #2
 801435c:	2600      	movs	r6, #0
 801435e:	42a6      	cmp	r6, r4
 8014360:	d105      	bne.n	801436e <__libc_init_array+0x2e>
 8014362:	bd70      	pop	{r4, r5, r6, pc}
 8014364:	f855 3b04 	ldr.w	r3, [r5], #4
 8014368:	4798      	blx	r3
 801436a:	3601      	adds	r6, #1
 801436c:	e7ee      	b.n	801434c <__libc_init_array+0xc>
 801436e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014372:	4798      	blx	r3
 8014374:	3601      	adds	r6, #1
 8014376:	e7f2      	b.n	801435e <__libc_init_array+0x1e>
 8014378:	08016870 	.word	0x08016870
 801437c:	08016870 	.word	0x08016870
 8014380:	08016870 	.word	0x08016870
 8014384:	08016874 	.word	0x08016874

08014388 <malloc>:
 8014388:	4b02      	ldr	r3, [pc, #8]	; (8014394 <malloc+0xc>)
 801438a:	4601      	mov	r1, r0
 801438c:	6818      	ldr	r0, [r3, #0]
 801438e:	f000 b88d 	b.w	80144ac <_malloc_r>
 8014392:	bf00      	nop
 8014394:	2000003c 	.word	0x2000003c

08014398 <free>:
 8014398:	4b02      	ldr	r3, [pc, #8]	; (80143a4 <free+0xc>)
 801439a:	4601      	mov	r1, r0
 801439c:	6818      	ldr	r0, [r3, #0]
 801439e:	f000 b819 	b.w	80143d4 <_free_r>
 80143a2:	bf00      	nop
 80143a4:	2000003c 	.word	0x2000003c

080143a8 <memcpy>:
 80143a8:	440a      	add	r2, r1
 80143aa:	4291      	cmp	r1, r2
 80143ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80143b0:	d100      	bne.n	80143b4 <memcpy+0xc>
 80143b2:	4770      	bx	lr
 80143b4:	b510      	push	{r4, lr}
 80143b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80143ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80143be:	4291      	cmp	r1, r2
 80143c0:	d1f9      	bne.n	80143b6 <memcpy+0xe>
 80143c2:	bd10      	pop	{r4, pc}

080143c4 <memset>:
 80143c4:	4402      	add	r2, r0
 80143c6:	4603      	mov	r3, r0
 80143c8:	4293      	cmp	r3, r2
 80143ca:	d100      	bne.n	80143ce <memset+0xa>
 80143cc:	4770      	bx	lr
 80143ce:	f803 1b01 	strb.w	r1, [r3], #1
 80143d2:	e7f9      	b.n	80143c8 <memset+0x4>

080143d4 <_free_r>:
 80143d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80143d6:	2900      	cmp	r1, #0
 80143d8:	d044      	beq.n	8014464 <_free_r+0x90>
 80143da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80143de:	9001      	str	r0, [sp, #4]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	f1a1 0404 	sub.w	r4, r1, #4
 80143e6:	bfb8      	it	lt
 80143e8:	18e4      	addlt	r4, r4, r3
 80143ea:	f000 f903 	bl	80145f4 <__malloc_lock>
 80143ee:	4a1e      	ldr	r2, [pc, #120]	; (8014468 <_free_r+0x94>)
 80143f0:	9801      	ldr	r0, [sp, #4]
 80143f2:	6813      	ldr	r3, [r2, #0]
 80143f4:	b933      	cbnz	r3, 8014404 <_free_r+0x30>
 80143f6:	6063      	str	r3, [r4, #4]
 80143f8:	6014      	str	r4, [r2, #0]
 80143fa:	b003      	add	sp, #12
 80143fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014400:	f000 b8fe 	b.w	8014600 <__malloc_unlock>
 8014404:	42a3      	cmp	r3, r4
 8014406:	d908      	bls.n	801441a <_free_r+0x46>
 8014408:	6825      	ldr	r5, [r4, #0]
 801440a:	1961      	adds	r1, r4, r5
 801440c:	428b      	cmp	r3, r1
 801440e:	bf01      	itttt	eq
 8014410:	6819      	ldreq	r1, [r3, #0]
 8014412:	685b      	ldreq	r3, [r3, #4]
 8014414:	1949      	addeq	r1, r1, r5
 8014416:	6021      	streq	r1, [r4, #0]
 8014418:	e7ed      	b.n	80143f6 <_free_r+0x22>
 801441a:	461a      	mov	r2, r3
 801441c:	685b      	ldr	r3, [r3, #4]
 801441e:	b10b      	cbz	r3, 8014424 <_free_r+0x50>
 8014420:	42a3      	cmp	r3, r4
 8014422:	d9fa      	bls.n	801441a <_free_r+0x46>
 8014424:	6811      	ldr	r1, [r2, #0]
 8014426:	1855      	adds	r5, r2, r1
 8014428:	42a5      	cmp	r5, r4
 801442a:	d10b      	bne.n	8014444 <_free_r+0x70>
 801442c:	6824      	ldr	r4, [r4, #0]
 801442e:	4421      	add	r1, r4
 8014430:	1854      	adds	r4, r2, r1
 8014432:	42a3      	cmp	r3, r4
 8014434:	6011      	str	r1, [r2, #0]
 8014436:	d1e0      	bne.n	80143fa <_free_r+0x26>
 8014438:	681c      	ldr	r4, [r3, #0]
 801443a:	685b      	ldr	r3, [r3, #4]
 801443c:	6053      	str	r3, [r2, #4]
 801443e:	4421      	add	r1, r4
 8014440:	6011      	str	r1, [r2, #0]
 8014442:	e7da      	b.n	80143fa <_free_r+0x26>
 8014444:	d902      	bls.n	801444c <_free_r+0x78>
 8014446:	230c      	movs	r3, #12
 8014448:	6003      	str	r3, [r0, #0]
 801444a:	e7d6      	b.n	80143fa <_free_r+0x26>
 801444c:	6825      	ldr	r5, [r4, #0]
 801444e:	1961      	adds	r1, r4, r5
 8014450:	428b      	cmp	r3, r1
 8014452:	bf04      	itt	eq
 8014454:	6819      	ldreq	r1, [r3, #0]
 8014456:	685b      	ldreq	r3, [r3, #4]
 8014458:	6063      	str	r3, [r4, #4]
 801445a:	bf04      	itt	eq
 801445c:	1949      	addeq	r1, r1, r5
 801445e:	6021      	streq	r1, [r4, #0]
 8014460:	6054      	str	r4, [r2, #4]
 8014462:	e7ca      	b.n	80143fa <_free_r+0x26>
 8014464:	b003      	add	sp, #12
 8014466:	bd30      	pop	{r4, r5, pc}
 8014468:	20009600 	.word	0x20009600

0801446c <sbrk_aligned>:
 801446c:	b570      	push	{r4, r5, r6, lr}
 801446e:	4e0e      	ldr	r6, [pc, #56]	; (80144a8 <sbrk_aligned+0x3c>)
 8014470:	460c      	mov	r4, r1
 8014472:	6831      	ldr	r1, [r6, #0]
 8014474:	4605      	mov	r5, r0
 8014476:	b911      	cbnz	r1, 801447e <sbrk_aligned+0x12>
 8014478:	f000 f88c 	bl	8014594 <_sbrk_r>
 801447c:	6030      	str	r0, [r6, #0]
 801447e:	4621      	mov	r1, r4
 8014480:	4628      	mov	r0, r5
 8014482:	f000 f887 	bl	8014594 <_sbrk_r>
 8014486:	1c43      	adds	r3, r0, #1
 8014488:	d00a      	beq.n	80144a0 <sbrk_aligned+0x34>
 801448a:	1cc4      	adds	r4, r0, #3
 801448c:	f024 0403 	bic.w	r4, r4, #3
 8014490:	42a0      	cmp	r0, r4
 8014492:	d007      	beq.n	80144a4 <sbrk_aligned+0x38>
 8014494:	1a21      	subs	r1, r4, r0
 8014496:	4628      	mov	r0, r5
 8014498:	f000 f87c 	bl	8014594 <_sbrk_r>
 801449c:	3001      	adds	r0, #1
 801449e:	d101      	bne.n	80144a4 <sbrk_aligned+0x38>
 80144a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80144a4:	4620      	mov	r0, r4
 80144a6:	bd70      	pop	{r4, r5, r6, pc}
 80144a8:	20009604 	.word	0x20009604

080144ac <_malloc_r>:
 80144ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144b0:	1ccd      	adds	r5, r1, #3
 80144b2:	f025 0503 	bic.w	r5, r5, #3
 80144b6:	3508      	adds	r5, #8
 80144b8:	2d0c      	cmp	r5, #12
 80144ba:	bf38      	it	cc
 80144bc:	250c      	movcc	r5, #12
 80144be:	2d00      	cmp	r5, #0
 80144c0:	4607      	mov	r7, r0
 80144c2:	db01      	blt.n	80144c8 <_malloc_r+0x1c>
 80144c4:	42a9      	cmp	r1, r5
 80144c6:	d905      	bls.n	80144d4 <_malloc_r+0x28>
 80144c8:	230c      	movs	r3, #12
 80144ca:	603b      	str	r3, [r7, #0]
 80144cc:	2600      	movs	r6, #0
 80144ce:	4630      	mov	r0, r6
 80144d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144d4:	4e2e      	ldr	r6, [pc, #184]	; (8014590 <_malloc_r+0xe4>)
 80144d6:	f000 f88d 	bl	80145f4 <__malloc_lock>
 80144da:	6833      	ldr	r3, [r6, #0]
 80144dc:	461c      	mov	r4, r3
 80144de:	bb34      	cbnz	r4, 801452e <_malloc_r+0x82>
 80144e0:	4629      	mov	r1, r5
 80144e2:	4638      	mov	r0, r7
 80144e4:	f7ff ffc2 	bl	801446c <sbrk_aligned>
 80144e8:	1c43      	adds	r3, r0, #1
 80144ea:	4604      	mov	r4, r0
 80144ec:	d14d      	bne.n	801458a <_malloc_r+0xde>
 80144ee:	6834      	ldr	r4, [r6, #0]
 80144f0:	4626      	mov	r6, r4
 80144f2:	2e00      	cmp	r6, #0
 80144f4:	d140      	bne.n	8014578 <_malloc_r+0xcc>
 80144f6:	6823      	ldr	r3, [r4, #0]
 80144f8:	4631      	mov	r1, r6
 80144fa:	4638      	mov	r0, r7
 80144fc:	eb04 0803 	add.w	r8, r4, r3
 8014500:	f000 f848 	bl	8014594 <_sbrk_r>
 8014504:	4580      	cmp	r8, r0
 8014506:	d13a      	bne.n	801457e <_malloc_r+0xd2>
 8014508:	6821      	ldr	r1, [r4, #0]
 801450a:	3503      	adds	r5, #3
 801450c:	1a6d      	subs	r5, r5, r1
 801450e:	f025 0503 	bic.w	r5, r5, #3
 8014512:	3508      	adds	r5, #8
 8014514:	2d0c      	cmp	r5, #12
 8014516:	bf38      	it	cc
 8014518:	250c      	movcc	r5, #12
 801451a:	4629      	mov	r1, r5
 801451c:	4638      	mov	r0, r7
 801451e:	f7ff ffa5 	bl	801446c <sbrk_aligned>
 8014522:	3001      	adds	r0, #1
 8014524:	d02b      	beq.n	801457e <_malloc_r+0xd2>
 8014526:	6823      	ldr	r3, [r4, #0]
 8014528:	442b      	add	r3, r5
 801452a:	6023      	str	r3, [r4, #0]
 801452c:	e00e      	b.n	801454c <_malloc_r+0xa0>
 801452e:	6822      	ldr	r2, [r4, #0]
 8014530:	1b52      	subs	r2, r2, r5
 8014532:	d41e      	bmi.n	8014572 <_malloc_r+0xc6>
 8014534:	2a0b      	cmp	r2, #11
 8014536:	d916      	bls.n	8014566 <_malloc_r+0xba>
 8014538:	1961      	adds	r1, r4, r5
 801453a:	42a3      	cmp	r3, r4
 801453c:	6025      	str	r5, [r4, #0]
 801453e:	bf18      	it	ne
 8014540:	6059      	strne	r1, [r3, #4]
 8014542:	6863      	ldr	r3, [r4, #4]
 8014544:	bf08      	it	eq
 8014546:	6031      	streq	r1, [r6, #0]
 8014548:	5162      	str	r2, [r4, r5]
 801454a:	604b      	str	r3, [r1, #4]
 801454c:	4638      	mov	r0, r7
 801454e:	f104 060b 	add.w	r6, r4, #11
 8014552:	f000 f855 	bl	8014600 <__malloc_unlock>
 8014556:	f026 0607 	bic.w	r6, r6, #7
 801455a:	1d23      	adds	r3, r4, #4
 801455c:	1af2      	subs	r2, r6, r3
 801455e:	d0b6      	beq.n	80144ce <_malloc_r+0x22>
 8014560:	1b9b      	subs	r3, r3, r6
 8014562:	50a3      	str	r3, [r4, r2]
 8014564:	e7b3      	b.n	80144ce <_malloc_r+0x22>
 8014566:	6862      	ldr	r2, [r4, #4]
 8014568:	42a3      	cmp	r3, r4
 801456a:	bf0c      	ite	eq
 801456c:	6032      	streq	r2, [r6, #0]
 801456e:	605a      	strne	r2, [r3, #4]
 8014570:	e7ec      	b.n	801454c <_malloc_r+0xa0>
 8014572:	4623      	mov	r3, r4
 8014574:	6864      	ldr	r4, [r4, #4]
 8014576:	e7b2      	b.n	80144de <_malloc_r+0x32>
 8014578:	4634      	mov	r4, r6
 801457a:	6876      	ldr	r6, [r6, #4]
 801457c:	e7b9      	b.n	80144f2 <_malloc_r+0x46>
 801457e:	230c      	movs	r3, #12
 8014580:	603b      	str	r3, [r7, #0]
 8014582:	4638      	mov	r0, r7
 8014584:	f000 f83c 	bl	8014600 <__malloc_unlock>
 8014588:	e7a1      	b.n	80144ce <_malloc_r+0x22>
 801458a:	6025      	str	r5, [r4, #0]
 801458c:	e7de      	b.n	801454c <_malloc_r+0xa0>
 801458e:	bf00      	nop
 8014590:	20009600 	.word	0x20009600

08014594 <_sbrk_r>:
 8014594:	b538      	push	{r3, r4, r5, lr}
 8014596:	4d06      	ldr	r5, [pc, #24]	; (80145b0 <_sbrk_r+0x1c>)
 8014598:	2300      	movs	r3, #0
 801459a:	4604      	mov	r4, r0
 801459c:	4608      	mov	r0, r1
 801459e:	602b      	str	r3, [r5, #0]
 80145a0:	f7ee fbda 	bl	8002d58 <_sbrk>
 80145a4:	1c43      	adds	r3, r0, #1
 80145a6:	d102      	bne.n	80145ae <_sbrk_r+0x1a>
 80145a8:	682b      	ldr	r3, [r5, #0]
 80145aa:	b103      	cbz	r3, 80145ae <_sbrk_r+0x1a>
 80145ac:	6023      	str	r3, [r4, #0]
 80145ae:	bd38      	pop	{r3, r4, r5, pc}
 80145b0:	20009608 	.word	0x20009608

080145b4 <siprintf>:
 80145b4:	b40e      	push	{r1, r2, r3}
 80145b6:	b500      	push	{lr}
 80145b8:	b09c      	sub	sp, #112	; 0x70
 80145ba:	ab1d      	add	r3, sp, #116	; 0x74
 80145bc:	9002      	str	r0, [sp, #8]
 80145be:	9006      	str	r0, [sp, #24]
 80145c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80145c4:	4809      	ldr	r0, [pc, #36]	; (80145ec <siprintf+0x38>)
 80145c6:	9107      	str	r1, [sp, #28]
 80145c8:	9104      	str	r1, [sp, #16]
 80145ca:	4909      	ldr	r1, [pc, #36]	; (80145f0 <siprintf+0x3c>)
 80145cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80145d0:	9105      	str	r1, [sp, #20]
 80145d2:	6800      	ldr	r0, [r0, #0]
 80145d4:	9301      	str	r3, [sp, #4]
 80145d6:	a902      	add	r1, sp, #8
 80145d8:	f000 f874 	bl	80146c4 <_svfiprintf_r>
 80145dc:	9b02      	ldr	r3, [sp, #8]
 80145de:	2200      	movs	r2, #0
 80145e0:	701a      	strb	r2, [r3, #0]
 80145e2:	b01c      	add	sp, #112	; 0x70
 80145e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80145e8:	b003      	add	sp, #12
 80145ea:	4770      	bx	lr
 80145ec:	2000003c 	.word	0x2000003c
 80145f0:	ffff0208 	.word	0xffff0208

080145f4 <__malloc_lock>:
 80145f4:	4801      	ldr	r0, [pc, #4]	; (80145fc <__malloc_lock+0x8>)
 80145f6:	f000 baf9 	b.w	8014bec <__retarget_lock_acquire_recursive>
 80145fa:	bf00      	nop
 80145fc:	2000960c 	.word	0x2000960c

08014600 <__malloc_unlock>:
 8014600:	4801      	ldr	r0, [pc, #4]	; (8014608 <__malloc_unlock+0x8>)
 8014602:	f000 baf4 	b.w	8014bee <__retarget_lock_release_recursive>
 8014606:	bf00      	nop
 8014608:	2000960c 	.word	0x2000960c

0801460c <__ssputs_r>:
 801460c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014610:	688e      	ldr	r6, [r1, #8]
 8014612:	429e      	cmp	r6, r3
 8014614:	4682      	mov	sl, r0
 8014616:	460c      	mov	r4, r1
 8014618:	4690      	mov	r8, r2
 801461a:	461f      	mov	r7, r3
 801461c:	d838      	bhi.n	8014690 <__ssputs_r+0x84>
 801461e:	898a      	ldrh	r2, [r1, #12]
 8014620:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014624:	d032      	beq.n	801468c <__ssputs_r+0x80>
 8014626:	6825      	ldr	r5, [r4, #0]
 8014628:	6909      	ldr	r1, [r1, #16]
 801462a:	eba5 0901 	sub.w	r9, r5, r1
 801462e:	6965      	ldr	r5, [r4, #20]
 8014630:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014634:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014638:	3301      	adds	r3, #1
 801463a:	444b      	add	r3, r9
 801463c:	106d      	asrs	r5, r5, #1
 801463e:	429d      	cmp	r5, r3
 8014640:	bf38      	it	cc
 8014642:	461d      	movcc	r5, r3
 8014644:	0553      	lsls	r3, r2, #21
 8014646:	d531      	bpl.n	80146ac <__ssputs_r+0xa0>
 8014648:	4629      	mov	r1, r5
 801464a:	f7ff ff2f 	bl	80144ac <_malloc_r>
 801464e:	4606      	mov	r6, r0
 8014650:	b950      	cbnz	r0, 8014668 <__ssputs_r+0x5c>
 8014652:	230c      	movs	r3, #12
 8014654:	f8ca 3000 	str.w	r3, [sl]
 8014658:	89a3      	ldrh	r3, [r4, #12]
 801465a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801465e:	81a3      	strh	r3, [r4, #12]
 8014660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014668:	6921      	ldr	r1, [r4, #16]
 801466a:	464a      	mov	r2, r9
 801466c:	f7ff fe9c 	bl	80143a8 <memcpy>
 8014670:	89a3      	ldrh	r3, [r4, #12]
 8014672:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801467a:	81a3      	strh	r3, [r4, #12]
 801467c:	6126      	str	r6, [r4, #16]
 801467e:	6165      	str	r5, [r4, #20]
 8014680:	444e      	add	r6, r9
 8014682:	eba5 0509 	sub.w	r5, r5, r9
 8014686:	6026      	str	r6, [r4, #0]
 8014688:	60a5      	str	r5, [r4, #8]
 801468a:	463e      	mov	r6, r7
 801468c:	42be      	cmp	r6, r7
 801468e:	d900      	bls.n	8014692 <__ssputs_r+0x86>
 8014690:	463e      	mov	r6, r7
 8014692:	6820      	ldr	r0, [r4, #0]
 8014694:	4632      	mov	r2, r6
 8014696:	4641      	mov	r1, r8
 8014698:	f000 faaa 	bl	8014bf0 <memmove>
 801469c:	68a3      	ldr	r3, [r4, #8]
 801469e:	1b9b      	subs	r3, r3, r6
 80146a0:	60a3      	str	r3, [r4, #8]
 80146a2:	6823      	ldr	r3, [r4, #0]
 80146a4:	4433      	add	r3, r6
 80146a6:	6023      	str	r3, [r4, #0]
 80146a8:	2000      	movs	r0, #0
 80146aa:	e7db      	b.n	8014664 <__ssputs_r+0x58>
 80146ac:	462a      	mov	r2, r5
 80146ae:	f000 fab9 	bl	8014c24 <_realloc_r>
 80146b2:	4606      	mov	r6, r0
 80146b4:	2800      	cmp	r0, #0
 80146b6:	d1e1      	bne.n	801467c <__ssputs_r+0x70>
 80146b8:	6921      	ldr	r1, [r4, #16]
 80146ba:	4650      	mov	r0, sl
 80146bc:	f7ff fe8a 	bl	80143d4 <_free_r>
 80146c0:	e7c7      	b.n	8014652 <__ssputs_r+0x46>
	...

080146c4 <_svfiprintf_r>:
 80146c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146c8:	4698      	mov	r8, r3
 80146ca:	898b      	ldrh	r3, [r1, #12]
 80146cc:	061b      	lsls	r3, r3, #24
 80146ce:	b09d      	sub	sp, #116	; 0x74
 80146d0:	4607      	mov	r7, r0
 80146d2:	460d      	mov	r5, r1
 80146d4:	4614      	mov	r4, r2
 80146d6:	d50e      	bpl.n	80146f6 <_svfiprintf_r+0x32>
 80146d8:	690b      	ldr	r3, [r1, #16]
 80146da:	b963      	cbnz	r3, 80146f6 <_svfiprintf_r+0x32>
 80146dc:	2140      	movs	r1, #64	; 0x40
 80146de:	f7ff fee5 	bl	80144ac <_malloc_r>
 80146e2:	6028      	str	r0, [r5, #0]
 80146e4:	6128      	str	r0, [r5, #16]
 80146e6:	b920      	cbnz	r0, 80146f2 <_svfiprintf_r+0x2e>
 80146e8:	230c      	movs	r3, #12
 80146ea:	603b      	str	r3, [r7, #0]
 80146ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80146f0:	e0d1      	b.n	8014896 <_svfiprintf_r+0x1d2>
 80146f2:	2340      	movs	r3, #64	; 0x40
 80146f4:	616b      	str	r3, [r5, #20]
 80146f6:	2300      	movs	r3, #0
 80146f8:	9309      	str	r3, [sp, #36]	; 0x24
 80146fa:	2320      	movs	r3, #32
 80146fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014700:	f8cd 800c 	str.w	r8, [sp, #12]
 8014704:	2330      	movs	r3, #48	; 0x30
 8014706:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80148b0 <_svfiprintf_r+0x1ec>
 801470a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801470e:	f04f 0901 	mov.w	r9, #1
 8014712:	4623      	mov	r3, r4
 8014714:	469a      	mov	sl, r3
 8014716:	f813 2b01 	ldrb.w	r2, [r3], #1
 801471a:	b10a      	cbz	r2, 8014720 <_svfiprintf_r+0x5c>
 801471c:	2a25      	cmp	r2, #37	; 0x25
 801471e:	d1f9      	bne.n	8014714 <_svfiprintf_r+0x50>
 8014720:	ebba 0b04 	subs.w	fp, sl, r4
 8014724:	d00b      	beq.n	801473e <_svfiprintf_r+0x7a>
 8014726:	465b      	mov	r3, fp
 8014728:	4622      	mov	r2, r4
 801472a:	4629      	mov	r1, r5
 801472c:	4638      	mov	r0, r7
 801472e:	f7ff ff6d 	bl	801460c <__ssputs_r>
 8014732:	3001      	adds	r0, #1
 8014734:	f000 80aa 	beq.w	801488c <_svfiprintf_r+0x1c8>
 8014738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801473a:	445a      	add	r2, fp
 801473c:	9209      	str	r2, [sp, #36]	; 0x24
 801473e:	f89a 3000 	ldrb.w	r3, [sl]
 8014742:	2b00      	cmp	r3, #0
 8014744:	f000 80a2 	beq.w	801488c <_svfiprintf_r+0x1c8>
 8014748:	2300      	movs	r3, #0
 801474a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801474e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014752:	f10a 0a01 	add.w	sl, sl, #1
 8014756:	9304      	str	r3, [sp, #16]
 8014758:	9307      	str	r3, [sp, #28]
 801475a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801475e:	931a      	str	r3, [sp, #104]	; 0x68
 8014760:	4654      	mov	r4, sl
 8014762:	2205      	movs	r2, #5
 8014764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014768:	4851      	ldr	r0, [pc, #324]	; (80148b0 <_svfiprintf_r+0x1ec>)
 801476a:	f7eb fd51 	bl	8000210 <memchr>
 801476e:	9a04      	ldr	r2, [sp, #16]
 8014770:	b9d8      	cbnz	r0, 80147aa <_svfiprintf_r+0xe6>
 8014772:	06d0      	lsls	r0, r2, #27
 8014774:	bf44      	itt	mi
 8014776:	2320      	movmi	r3, #32
 8014778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801477c:	0711      	lsls	r1, r2, #28
 801477e:	bf44      	itt	mi
 8014780:	232b      	movmi	r3, #43	; 0x2b
 8014782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014786:	f89a 3000 	ldrb.w	r3, [sl]
 801478a:	2b2a      	cmp	r3, #42	; 0x2a
 801478c:	d015      	beq.n	80147ba <_svfiprintf_r+0xf6>
 801478e:	9a07      	ldr	r2, [sp, #28]
 8014790:	4654      	mov	r4, sl
 8014792:	2000      	movs	r0, #0
 8014794:	f04f 0c0a 	mov.w	ip, #10
 8014798:	4621      	mov	r1, r4
 801479a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801479e:	3b30      	subs	r3, #48	; 0x30
 80147a0:	2b09      	cmp	r3, #9
 80147a2:	d94e      	bls.n	8014842 <_svfiprintf_r+0x17e>
 80147a4:	b1b0      	cbz	r0, 80147d4 <_svfiprintf_r+0x110>
 80147a6:	9207      	str	r2, [sp, #28]
 80147a8:	e014      	b.n	80147d4 <_svfiprintf_r+0x110>
 80147aa:	eba0 0308 	sub.w	r3, r0, r8
 80147ae:	fa09 f303 	lsl.w	r3, r9, r3
 80147b2:	4313      	orrs	r3, r2
 80147b4:	9304      	str	r3, [sp, #16]
 80147b6:	46a2      	mov	sl, r4
 80147b8:	e7d2      	b.n	8014760 <_svfiprintf_r+0x9c>
 80147ba:	9b03      	ldr	r3, [sp, #12]
 80147bc:	1d19      	adds	r1, r3, #4
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	9103      	str	r1, [sp, #12]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	bfbb      	ittet	lt
 80147c6:	425b      	neglt	r3, r3
 80147c8:	f042 0202 	orrlt.w	r2, r2, #2
 80147cc:	9307      	strge	r3, [sp, #28]
 80147ce:	9307      	strlt	r3, [sp, #28]
 80147d0:	bfb8      	it	lt
 80147d2:	9204      	strlt	r2, [sp, #16]
 80147d4:	7823      	ldrb	r3, [r4, #0]
 80147d6:	2b2e      	cmp	r3, #46	; 0x2e
 80147d8:	d10c      	bne.n	80147f4 <_svfiprintf_r+0x130>
 80147da:	7863      	ldrb	r3, [r4, #1]
 80147dc:	2b2a      	cmp	r3, #42	; 0x2a
 80147de:	d135      	bne.n	801484c <_svfiprintf_r+0x188>
 80147e0:	9b03      	ldr	r3, [sp, #12]
 80147e2:	1d1a      	adds	r2, r3, #4
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	9203      	str	r2, [sp, #12]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	bfb8      	it	lt
 80147ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80147f0:	3402      	adds	r4, #2
 80147f2:	9305      	str	r3, [sp, #20]
 80147f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80148c0 <_svfiprintf_r+0x1fc>
 80147f8:	7821      	ldrb	r1, [r4, #0]
 80147fa:	2203      	movs	r2, #3
 80147fc:	4650      	mov	r0, sl
 80147fe:	f7eb fd07 	bl	8000210 <memchr>
 8014802:	b140      	cbz	r0, 8014816 <_svfiprintf_r+0x152>
 8014804:	2340      	movs	r3, #64	; 0x40
 8014806:	eba0 000a 	sub.w	r0, r0, sl
 801480a:	fa03 f000 	lsl.w	r0, r3, r0
 801480e:	9b04      	ldr	r3, [sp, #16]
 8014810:	4303      	orrs	r3, r0
 8014812:	3401      	adds	r4, #1
 8014814:	9304      	str	r3, [sp, #16]
 8014816:	f814 1b01 	ldrb.w	r1, [r4], #1
 801481a:	4826      	ldr	r0, [pc, #152]	; (80148b4 <_svfiprintf_r+0x1f0>)
 801481c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014820:	2206      	movs	r2, #6
 8014822:	f7eb fcf5 	bl	8000210 <memchr>
 8014826:	2800      	cmp	r0, #0
 8014828:	d038      	beq.n	801489c <_svfiprintf_r+0x1d8>
 801482a:	4b23      	ldr	r3, [pc, #140]	; (80148b8 <_svfiprintf_r+0x1f4>)
 801482c:	bb1b      	cbnz	r3, 8014876 <_svfiprintf_r+0x1b2>
 801482e:	9b03      	ldr	r3, [sp, #12]
 8014830:	3307      	adds	r3, #7
 8014832:	f023 0307 	bic.w	r3, r3, #7
 8014836:	3308      	adds	r3, #8
 8014838:	9303      	str	r3, [sp, #12]
 801483a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801483c:	4433      	add	r3, r6
 801483e:	9309      	str	r3, [sp, #36]	; 0x24
 8014840:	e767      	b.n	8014712 <_svfiprintf_r+0x4e>
 8014842:	fb0c 3202 	mla	r2, ip, r2, r3
 8014846:	460c      	mov	r4, r1
 8014848:	2001      	movs	r0, #1
 801484a:	e7a5      	b.n	8014798 <_svfiprintf_r+0xd4>
 801484c:	2300      	movs	r3, #0
 801484e:	3401      	adds	r4, #1
 8014850:	9305      	str	r3, [sp, #20]
 8014852:	4619      	mov	r1, r3
 8014854:	f04f 0c0a 	mov.w	ip, #10
 8014858:	4620      	mov	r0, r4
 801485a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801485e:	3a30      	subs	r2, #48	; 0x30
 8014860:	2a09      	cmp	r2, #9
 8014862:	d903      	bls.n	801486c <_svfiprintf_r+0x1a8>
 8014864:	2b00      	cmp	r3, #0
 8014866:	d0c5      	beq.n	80147f4 <_svfiprintf_r+0x130>
 8014868:	9105      	str	r1, [sp, #20]
 801486a:	e7c3      	b.n	80147f4 <_svfiprintf_r+0x130>
 801486c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014870:	4604      	mov	r4, r0
 8014872:	2301      	movs	r3, #1
 8014874:	e7f0      	b.n	8014858 <_svfiprintf_r+0x194>
 8014876:	ab03      	add	r3, sp, #12
 8014878:	9300      	str	r3, [sp, #0]
 801487a:	462a      	mov	r2, r5
 801487c:	4b0f      	ldr	r3, [pc, #60]	; (80148bc <_svfiprintf_r+0x1f8>)
 801487e:	a904      	add	r1, sp, #16
 8014880:	4638      	mov	r0, r7
 8014882:	f3af 8000 	nop.w
 8014886:	1c42      	adds	r2, r0, #1
 8014888:	4606      	mov	r6, r0
 801488a:	d1d6      	bne.n	801483a <_svfiprintf_r+0x176>
 801488c:	89ab      	ldrh	r3, [r5, #12]
 801488e:	065b      	lsls	r3, r3, #25
 8014890:	f53f af2c 	bmi.w	80146ec <_svfiprintf_r+0x28>
 8014894:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014896:	b01d      	add	sp, #116	; 0x74
 8014898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801489c:	ab03      	add	r3, sp, #12
 801489e:	9300      	str	r3, [sp, #0]
 80148a0:	462a      	mov	r2, r5
 80148a2:	4b06      	ldr	r3, [pc, #24]	; (80148bc <_svfiprintf_r+0x1f8>)
 80148a4:	a904      	add	r1, sp, #16
 80148a6:	4638      	mov	r0, r7
 80148a8:	f000 f87a 	bl	80149a0 <_printf_i>
 80148ac:	e7eb      	b.n	8014886 <_svfiprintf_r+0x1c2>
 80148ae:	bf00      	nop
 80148b0:	08016834 	.word	0x08016834
 80148b4:	0801683e 	.word	0x0801683e
 80148b8:	00000000 	.word	0x00000000
 80148bc:	0801460d 	.word	0x0801460d
 80148c0:	0801683a 	.word	0x0801683a

080148c4 <_printf_common>:
 80148c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148c8:	4616      	mov	r6, r2
 80148ca:	4699      	mov	r9, r3
 80148cc:	688a      	ldr	r2, [r1, #8]
 80148ce:	690b      	ldr	r3, [r1, #16]
 80148d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80148d4:	4293      	cmp	r3, r2
 80148d6:	bfb8      	it	lt
 80148d8:	4613      	movlt	r3, r2
 80148da:	6033      	str	r3, [r6, #0]
 80148dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80148e0:	4607      	mov	r7, r0
 80148e2:	460c      	mov	r4, r1
 80148e4:	b10a      	cbz	r2, 80148ea <_printf_common+0x26>
 80148e6:	3301      	adds	r3, #1
 80148e8:	6033      	str	r3, [r6, #0]
 80148ea:	6823      	ldr	r3, [r4, #0]
 80148ec:	0699      	lsls	r1, r3, #26
 80148ee:	bf42      	ittt	mi
 80148f0:	6833      	ldrmi	r3, [r6, #0]
 80148f2:	3302      	addmi	r3, #2
 80148f4:	6033      	strmi	r3, [r6, #0]
 80148f6:	6825      	ldr	r5, [r4, #0]
 80148f8:	f015 0506 	ands.w	r5, r5, #6
 80148fc:	d106      	bne.n	801490c <_printf_common+0x48>
 80148fe:	f104 0a19 	add.w	sl, r4, #25
 8014902:	68e3      	ldr	r3, [r4, #12]
 8014904:	6832      	ldr	r2, [r6, #0]
 8014906:	1a9b      	subs	r3, r3, r2
 8014908:	42ab      	cmp	r3, r5
 801490a:	dc26      	bgt.n	801495a <_printf_common+0x96>
 801490c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014910:	1e13      	subs	r3, r2, #0
 8014912:	6822      	ldr	r2, [r4, #0]
 8014914:	bf18      	it	ne
 8014916:	2301      	movne	r3, #1
 8014918:	0692      	lsls	r2, r2, #26
 801491a:	d42b      	bmi.n	8014974 <_printf_common+0xb0>
 801491c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014920:	4649      	mov	r1, r9
 8014922:	4638      	mov	r0, r7
 8014924:	47c0      	blx	r8
 8014926:	3001      	adds	r0, #1
 8014928:	d01e      	beq.n	8014968 <_printf_common+0xa4>
 801492a:	6823      	ldr	r3, [r4, #0]
 801492c:	68e5      	ldr	r5, [r4, #12]
 801492e:	6832      	ldr	r2, [r6, #0]
 8014930:	f003 0306 	and.w	r3, r3, #6
 8014934:	2b04      	cmp	r3, #4
 8014936:	bf08      	it	eq
 8014938:	1aad      	subeq	r5, r5, r2
 801493a:	68a3      	ldr	r3, [r4, #8]
 801493c:	6922      	ldr	r2, [r4, #16]
 801493e:	bf0c      	ite	eq
 8014940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014944:	2500      	movne	r5, #0
 8014946:	4293      	cmp	r3, r2
 8014948:	bfc4      	itt	gt
 801494a:	1a9b      	subgt	r3, r3, r2
 801494c:	18ed      	addgt	r5, r5, r3
 801494e:	2600      	movs	r6, #0
 8014950:	341a      	adds	r4, #26
 8014952:	42b5      	cmp	r5, r6
 8014954:	d11a      	bne.n	801498c <_printf_common+0xc8>
 8014956:	2000      	movs	r0, #0
 8014958:	e008      	b.n	801496c <_printf_common+0xa8>
 801495a:	2301      	movs	r3, #1
 801495c:	4652      	mov	r2, sl
 801495e:	4649      	mov	r1, r9
 8014960:	4638      	mov	r0, r7
 8014962:	47c0      	blx	r8
 8014964:	3001      	adds	r0, #1
 8014966:	d103      	bne.n	8014970 <_printf_common+0xac>
 8014968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801496c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014970:	3501      	adds	r5, #1
 8014972:	e7c6      	b.n	8014902 <_printf_common+0x3e>
 8014974:	18e1      	adds	r1, r4, r3
 8014976:	1c5a      	adds	r2, r3, #1
 8014978:	2030      	movs	r0, #48	; 0x30
 801497a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801497e:	4422      	add	r2, r4
 8014980:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014984:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014988:	3302      	adds	r3, #2
 801498a:	e7c7      	b.n	801491c <_printf_common+0x58>
 801498c:	2301      	movs	r3, #1
 801498e:	4622      	mov	r2, r4
 8014990:	4649      	mov	r1, r9
 8014992:	4638      	mov	r0, r7
 8014994:	47c0      	blx	r8
 8014996:	3001      	adds	r0, #1
 8014998:	d0e6      	beq.n	8014968 <_printf_common+0xa4>
 801499a:	3601      	adds	r6, #1
 801499c:	e7d9      	b.n	8014952 <_printf_common+0x8e>
	...

080149a0 <_printf_i>:
 80149a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80149a4:	7e0f      	ldrb	r7, [r1, #24]
 80149a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80149a8:	2f78      	cmp	r7, #120	; 0x78
 80149aa:	4691      	mov	r9, r2
 80149ac:	4680      	mov	r8, r0
 80149ae:	460c      	mov	r4, r1
 80149b0:	469a      	mov	sl, r3
 80149b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80149b6:	d807      	bhi.n	80149c8 <_printf_i+0x28>
 80149b8:	2f62      	cmp	r7, #98	; 0x62
 80149ba:	d80a      	bhi.n	80149d2 <_printf_i+0x32>
 80149bc:	2f00      	cmp	r7, #0
 80149be:	f000 80d8 	beq.w	8014b72 <_printf_i+0x1d2>
 80149c2:	2f58      	cmp	r7, #88	; 0x58
 80149c4:	f000 80a3 	beq.w	8014b0e <_printf_i+0x16e>
 80149c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80149cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80149d0:	e03a      	b.n	8014a48 <_printf_i+0xa8>
 80149d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80149d6:	2b15      	cmp	r3, #21
 80149d8:	d8f6      	bhi.n	80149c8 <_printf_i+0x28>
 80149da:	a101      	add	r1, pc, #4	; (adr r1, 80149e0 <_printf_i+0x40>)
 80149dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80149e0:	08014a39 	.word	0x08014a39
 80149e4:	08014a4d 	.word	0x08014a4d
 80149e8:	080149c9 	.word	0x080149c9
 80149ec:	080149c9 	.word	0x080149c9
 80149f0:	080149c9 	.word	0x080149c9
 80149f4:	080149c9 	.word	0x080149c9
 80149f8:	08014a4d 	.word	0x08014a4d
 80149fc:	080149c9 	.word	0x080149c9
 8014a00:	080149c9 	.word	0x080149c9
 8014a04:	080149c9 	.word	0x080149c9
 8014a08:	080149c9 	.word	0x080149c9
 8014a0c:	08014b59 	.word	0x08014b59
 8014a10:	08014a7d 	.word	0x08014a7d
 8014a14:	08014b3b 	.word	0x08014b3b
 8014a18:	080149c9 	.word	0x080149c9
 8014a1c:	080149c9 	.word	0x080149c9
 8014a20:	08014b7b 	.word	0x08014b7b
 8014a24:	080149c9 	.word	0x080149c9
 8014a28:	08014a7d 	.word	0x08014a7d
 8014a2c:	080149c9 	.word	0x080149c9
 8014a30:	080149c9 	.word	0x080149c9
 8014a34:	08014b43 	.word	0x08014b43
 8014a38:	682b      	ldr	r3, [r5, #0]
 8014a3a:	1d1a      	adds	r2, r3, #4
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	602a      	str	r2, [r5, #0]
 8014a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014a44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014a48:	2301      	movs	r3, #1
 8014a4a:	e0a3      	b.n	8014b94 <_printf_i+0x1f4>
 8014a4c:	6820      	ldr	r0, [r4, #0]
 8014a4e:	6829      	ldr	r1, [r5, #0]
 8014a50:	0606      	lsls	r6, r0, #24
 8014a52:	f101 0304 	add.w	r3, r1, #4
 8014a56:	d50a      	bpl.n	8014a6e <_printf_i+0xce>
 8014a58:	680e      	ldr	r6, [r1, #0]
 8014a5a:	602b      	str	r3, [r5, #0]
 8014a5c:	2e00      	cmp	r6, #0
 8014a5e:	da03      	bge.n	8014a68 <_printf_i+0xc8>
 8014a60:	232d      	movs	r3, #45	; 0x2d
 8014a62:	4276      	negs	r6, r6
 8014a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a68:	485e      	ldr	r0, [pc, #376]	; (8014be4 <_printf_i+0x244>)
 8014a6a:	230a      	movs	r3, #10
 8014a6c:	e019      	b.n	8014aa2 <_printf_i+0x102>
 8014a6e:	680e      	ldr	r6, [r1, #0]
 8014a70:	602b      	str	r3, [r5, #0]
 8014a72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014a76:	bf18      	it	ne
 8014a78:	b236      	sxthne	r6, r6
 8014a7a:	e7ef      	b.n	8014a5c <_printf_i+0xbc>
 8014a7c:	682b      	ldr	r3, [r5, #0]
 8014a7e:	6820      	ldr	r0, [r4, #0]
 8014a80:	1d19      	adds	r1, r3, #4
 8014a82:	6029      	str	r1, [r5, #0]
 8014a84:	0601      	lsls	r1, r0, #24
 8014a86:	d501      	bpl.n	8014a8c <_printf_i+0xec>
 8014a88:	681e      	ldr	r6, [r3, #0]
 8014a8a:	e002      	b.n	8014a92 <_printf_i+0xf2>
 8014a8c:	0646      	lsls	r6, r0, #25
 8014a8e:	d5fb      	bpl.n	8014a88 <_printf_i+0xe8>
 8014a90:	881e      	ldrh	r6, [r3, #0]
 8014a92:	4854      	ldr	r0, [pc, #336]	; (8014be4 <_printf_i+0x244>)
 8014a94:	2f6f      	cmp	r7, #111	; 0x6f
 8014a96:	bf0c      	ite	eq
 8014a98:	2308      	moveq	r3, #8
 8014a9a:	230a      	movne	r3, #10
 8014a9c:	2100      	movs	r1, #0
 8014a9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014aa2:	6865      	ldr	r5, [r4, #4]
 8014aa4:	60a5      	str	r5, [r4, #8]
 8014aa6:	2d00      	cmp	r5, #0
 8014aa8:	bfa2      	ittt	ge
 8014aaa:	6821      	ldrge	r1, [r4, #0]
 8014aac:	f021 0104 	bicge.w	r1, r1, #4
 8014ab0:	6021      	strge	r1, [r4, #0]
 8014ab2:	b90e      	cbnz	r6, 8014ab8 <_printf_i+0x118>
 8014ab4:	2d00      	cmp	r5, #0
 8014ab6:	d04d      	beq.n	8014b54 <_printf_i+0x1b4>
 8014ab8:	4615      	mov	r5, r2
 8014aba:	fbb6 f1f3 	udiv	r1, r6, r3
 8014abe:	fb03 6711 	mls	r7, r3, r1, r6
 8014ac2:	5dc7      	ldrb	r7, [r0, r7]
 8014ac4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014ac8:	4637      	mov	r7, r6
 8014aca:	42bb      	cmp	r3, r7
 8014acc:	460e      	mov	r6, r1
 8014ace:	d9f4      	bls.n	8014aba <_printf_i+0x11a>
 8014ad0:	2b08      	cmp	r3, #8
 8014ad2:	d10b      	bne.n	8014aec <_printf_i+0x14c>
 8014ad4:	6823      	ldr	r3, [r4, #0]
 8014ad6:	07de      	lsls	r6, r3, #31
 8014ad8:	d508      	bpl.n	8014aec <_printf_i+0x14c>
 8014ada:	6923      	ldr	r3, [r4, #16]
 8014adc:	6861      	ldr	r1, [r4, #4]
 8014ade:	4299      	cmp	r1, r3
 8014ae0:	bfde      	ittt	le
 8014ae2:	2330      	movle	r3, #48	; 0x30
 8014ae4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014ae8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014aec:	1b52      	subs	r2, r2, r5
 8014aee:	6122      	str	r2, [r4, #16]
 8014af0:	f8cd a000 	str.w	sl, [sp]
 8014af4:	464b      	mov	r3, r9
 8014af6:	aa03      	add	r2, sp, #12
 8014af8:	4621      	mov	r1, r4
 8014afa:	4640      	mov	r0, r8
 8014afc:	f7ff fee2 	bl	80148c4 <_printf_common>
 8014b00:	3001      	adds	r0, #1
 8014b02:	d14c      	bne.n	8014b9e <_printf_i+0x1fe>
 8014b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b08:	b004      	add	sp, #16
 8014b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b0e:	4835      	ldr	r0, [pc, #212]	; (8014be4 <_printf_i+0x244>)
 8014b10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014b14:	6829      	ldr	r1, [r5, #0]
 8014b16:	6823      	ldr	r3, [r4, #0]
 8014b18:	f851 6b04 	ldr.w	r6, [r1], #4
 8014b1c:	6029      	str	r1, [r5, #0]
 8014b1e:	061d      	lsls	r5, r3, #24
 8014b20:	d514      	bpl.n	8014b4c <_printf_i+0x1ac>
 8014b22:	07df      	lsls	r7, r3, #31
 8014b24:	bf44      	itt	mi
 8014b26:	f043 0320 	orrmi.w	r3, r3, #32
 8014b2a:	6023      	strmi	r3, [r4, #0]
 8014b2c:	b91e      	cbnz	r6, 8014b36 <_printf_i+0x196>
 8014b2e:	6823      	ldr	r3, [r4, #0]
 8014b30:	f023 0320 	bic.w	r3, r3, #32
 8014b34:	6023      	str	r3, [r4, #0]
 8014b36:	2310      	movs	r3, #16
 8014b38:	e7b0      	b.n	8014a9c <_printf_i+0xfc>
 8014b3a:	6823      	ldr	r3, [r4, #0]
 8014b3c:	f043 0320 	orr.w	r3, r3, #32
 8014b40:	6023      	str	r3, [r4, #0]
 8014b42:	2378      	movs	r3, #120	; 0x78
 8014b44:	4828      	ldr	r0, [pc, #160]	; (8014be8 <_printf_i+0x248>)
 8014b46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014b4a:	e7e3      	b.n	8014b14 <_printf_i+0x174>
 8014b4c:	0659      	lsls	r1, r3, #25
 8014b4e:	bf48      	it	mi
 8014b50:	b2b6      	uxthmi	r6, r6
 8014b52:	e7e6      	b.n	8014b22 <_printf_i+0x182>
 8014b54:	4615      	mov	r5, r2
 8014b56:	e7bb      	b.n	8014ad0 <_printf_i+0x130>
 8014b58:	682b      	ldr	r3, [r5, #0]
 8014b5a:	6826      	ldr	r6, [r4, #0]
 8014b5c:	6961      	ldr	r1, [r4, #20]
 8014b5e:	1d18      	adds	r0, r3, #4
 8014b60:	6028      	str	r0, [r5, #0]
 8014b62:	0635      	lsls	r5, r6, #24
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	d501      	bpl.n	8014b6c <_printf_i+0x1cc>
 8014b68:	6019      	str	r1, [r3, #0]
 8014b6a:	e002      	b.n	8014b72 <_printf_i+0x1d2>
 8014b6c:	0670      	lsls	r0, r6, #25
 8014b6e:	d5fb      	bpl.n	8014b68 <_printf_i+0x1c8>
 8014b70:	8019      	strh	r1, [r3, #0]
 8014b72:	2300      	movs	r3, #0
 8014b74:	6123      	str	r3, [r4, #16]
 8014b76:	4615      	mov	r5, r2
 8014b78:	e7ba      	b.n	8014af0 <_printf_i+0x150>
 8014b7a:	682b      	ldr	r3, [r5, #0]
 8014b7c:	1d1a      	adds	r2, r3, #4
 8014b7e:	602a      	str	r2, [r5, #0]
 8014b80:	681d      	ldr	r5, [r3, #0]
 8014b82:	6862      	ldr	r2, [r4, #4]
 8014b84:	2100      	movs	r1, #0
 8014b86:	4628      	mov	r0, r5
 8014b88:	f7eb fb42 	bl	8000210 <memchr>
 8014b8c:	b108      	cbz	r0, 8014b92 <_printf_i+0x1f2>
 8014b8e:	1b40      	subs	r0, r0, r5
 8014b90:	6060      	str	r0, [r4, #4]
 8014b92:	6863      	ldr	r3, [r4, #4]
 8014b94:	6123      	str	r3, [r4, #16]
 8014b96:	2300      	movs	r3, #0
 8014b98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b9c:	e7a8      	b.n	8014af0 <_printf_i+0x150>
 8014b9e:	6923      	ldr	r3, [r4, #16]
 8014ba0:	462a      	mov	r2, r5
 8014ba2:	4649      	mov	r1, r9
 8014ba4:	4640      	mov	r0, r8
 8014ba6:	47d0      	blx	sl
 8014ba8:	3001      	adds	r0, #1
 8014baa:	d0ab      	beq.n	8014b04 <_printf_i+0x164>
 8014bac:	6823      	ldr	r3, [r4, #0]
 8014bae:	079b      	lsls	r3, r3, #30
 8014bb0:	d413      	bmi.n	8014bda <_printf_i+0x23a>
 8014bb2:	68e0      	ldr	r0, [r4, #12]
 8014bb4:	9b03      	ldr	r3, [sp, #12]
 8014bb6:	4298      	cmp	r0, r3
 8014bb8:	bfb8      	it	lt
 8014bba:	4618      	movlt	r0, r3
 8014bbc:	e7a4      	b.n	8014b08 <_printf_i+0x168>
 8014bbe:	2301      	movs	r3, #1
 8014bc0:	4632      	mov	r2, r6
 8014bc2:	4649      	mov	r1, r9
 8014bc4:	4640      	mov	r0, r8
 8014bc6:	47d0      	blx	sl
 8014bc8:	3001      	adds	r0, #1
 8014bca:	d09b      	beq.n	8014b04 <_printf_i+0x164>
 8014bcc:	3501      	adds	r5, #1
 8014bce:	68e3      	ldr	r3, [r4, #12]
 8014bd0:	9903      	ldr	r1, [sp, #12]
 8014bd2:	1a5b      	subs	r3, r3, r1
 8014bd4:	42ab      	cmp	r3, r5
 8014bd6:	dcf2      	bgt.n	8014bbe <_printf_i+0x21e>
 8014bd8:	e7eb      	b.n	8014bb2 <_printf_i+0x212>
 8014bda:	2500      	movs	r5, #0
 8014bdc:	f104 0619 	add.w	r6, r4, #25
 8014be0:	e7f5      	b.n	8014bce <_printf_i+0x22e>
 8014be2:	bf00      	nop
 8014be4:	08016845 	.word	0x08016845
 8014be8:	08016856 	.word	0x08016856

08014bec <__retarget_lock_acquire_recursive>:
 8014bec:	4770      	bx	lr

08014bee <__retarget_lock_release_recursive>:
 8014bee:	4770      	bx	lr

08014bf0 <memmove>:
 8014bf0:	4288      	cmp	r0, r1
 8014bf2:	b510      	push	{r4, lr}
 8014bf4:	eb01 0402 	add.w	r4, r1, r2
 8014bf8:	d902      	bls.n	8014c00 <memmove+0x10>
 8014bfa:	4284      	cmp	r4, r0
 8014bfc:	4623      	mov	r3, r4
 8014bfe:	d807      	bhi.n	8014c10 <memmove+0x20>
 8014c00:	1e43      	subs	r3, r0, #1
 8014c02:	42a1      	cmp	r1, r4
 8014c04:	d008      	beq.n	8014c18 <memmove+0x28>
 8014c06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014c0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014c0e:	e7f8      	b.n	8014c02 <memmove+0x12>
 8014c10:	4402      	add	r2, r0
 8014c12:	4601      	mov	r1, r0
 8014c14:	428a      	cmp	r2, r1
 8014c16:	d100      	bne.n	8014c1a <memmove+0x2a>
 8014c18:	bd10      	pop	{r4, pc}
 8014c1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014c1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014c22:	e7f7      	b.n	8014c14 <memmove+0x24>

08014c24 <_realloc_r>:
 8014c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c28:	4680      	mov	r8, r0
 8014c2a:	4614      	mov	r4, r2
 8014c2c:	460e      	mov	r6, r1
 8014c2e:	b921      	cbnz	r1, 8014c3a <_realloc_r+0x16>
 8014c30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c34:	4611      	mov	r1, r2
 8014c36:	f7ff bc39 	b.w	80144ac <_malloc_r>
 8014c3a:	b92a      	cbnz	r2, 8014c48 <_realloc_r+0x24>
 8014c3c:	f7ff fbca 	bl	80143d4 <_free_r>
 8014c40:	4625      	mov	r5, r4
 8014c42:	4628      	mov	r0, r5
 8014c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c48:	f000 f81b 	bl	8014c82 <_malloc_usable_size_r>
 8014c4c:	4284      	cmp	r4, r0
 8014c4e:	4607      	mov	r7, r0
 8014c50:	d802      	bhi.n	8014c58 <_realloc_r+0x34>
 8014c52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014c56:	d812      	bhi.n	8014c7e <_realloc_r+0x5a>
 8014c58:	4621      	mov	r1, r4
 8014c5a:	4640      	mov	r0, r8
 8014c5c:	f7ff fc26 	bl	80144ac <_malloc_r>
 8014c60:	4605      	mov	r5, r0
 8014c62:	2800      	cmp	r0, #0
 8014c64:	d0ed      	beq.n	8014c42 <_realloc_r+0x1e>
 8014c66:	42bc      	cmp	r4, r7
 8014c68:	4622      	mov	r2, r4
 8014c6a:	4631      	mov	r1, r6
 8014c6c:	bf28      	it	cs
 8014c6e:	463a      	movcs	r2, r7
 8014c70:	f7ff fb9a 	bl	80143a8 <memcpy>
 8014c74:	4631      	mov	r1, r6
 8014c76:	4640      	mov	r0, r8
 8014c78:	f7ff fbac 	bl	80143d4 <_free_r>
 8014c7c:	e7e1      	b.n	8014c42 <_realloc_r+0x1e>
 8014c7e:	4635      	mov	r5, r6
 8014c80:	e7df      	b.n	8014c42 <_realloc_r+0x1e>

08014c82 <_malloc_usable_size_r>:
 8014c82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c86:	1f18      	subs	r0, r3, #4
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	bfbc      	itt	lt
 8014c8c:	580b      	ldrlt	r3, [r1, r0]
 8014c8e:	18c0      	addlt	r0, r0, r3
 8014c90:	4770      	bx	lr
	...

08014c94 <_init>:
 8014c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c96:	bf00      	nop
 8014c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c9a:	bc08      	pop	{r3}
 8014c9c:	469e      	mov	lr, r3
 8014c9e:	4770      	bx	lr

08014ca0 <_fini>:
 8014ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ca2:	bf00      	nop
 8014ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ca6:	bc08      	pop	{r3}
 8014ca8:	469e      	mov	lr, r3
 8014caa:	4770      	bx	lr
