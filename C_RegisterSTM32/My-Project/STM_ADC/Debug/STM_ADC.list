
STM_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f24  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080050f4  080050f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005150  08005150  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005150  08005150  00015150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005158  08005158  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005158  08005158  00015158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800515c  0800515c  0001515c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  20000070  080051d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  080051d0  00020628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a01  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000256c  00000000  00000000  00030aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00033010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  00033c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274ba  00000000  00000000  00034798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb2e  00000000  00000000  0005bc52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6c8e  00000000  00000000  0006a780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016140e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003638  00000000  00000000  00161464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080050dc 	.word	0x080050dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080050dc 	.word	0x080050dc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fc42 	bl	8000e46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f83f 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f999 	bl	80008fc <MX_GPIO_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 80005ca:	f000 f91b 	bl	8000804 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80005ce:	f000 f977 	bl	80008c0 <MX_DMA_Init>
  MX_ADC1_Init();
 80005d2:	f000 f8c5 	bl	8000760 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005d6:	f000 f945 	bl	8000864 <MX_USB_OTG_FS_PCD_Init>
//	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
//	 HAL_Delay(200);


	 //Potentiometer
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	2101      	movs	r1, #1
 80005de:	4815      	ldr	r0, [pc, #84]	; (8000634 <main+0x7c>)
 80005e0:	f001 ffb2 	bl	8002548 <HAL_GPIO_WritePin>

	 HAL_ADC_Start(&hadc1);
 80005e4:	4814      	ldr	r0, [pc, #80]	; (8000638 <main+0x80>)
 80005e6:	f000 fcf3 	bl	8000fd0 <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005ee:	4812      	ldr	r0, [pc, #72]	; (8000638 <main+0x80>)
 80005f0:	f000 fdbc 	bl	800116c <HAL_ADC_PollForConversion>
	 raw = HAL_ADC_GetValue(&hadc1);
 80005f4:	4810      	ldr	r0, [pc, #64]	; (8000638 <main+0x80>)
 80005f6:	f000 ff85 	bl	8001504 <HAL_ADC_GetValue>
 80005fa:	4603      	mov	r3, r0
 80005fc:	81fb      	strh	r3, [r7, #14]

	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	2101      	movs	r1, #1
 8000602:	480c      	ldr	r0, [pc, #48]	; (8000634 <main+0x7c>)
 8000604:	f001 ffa0 	bl	8002548 <HAL_GPIO_WritePin>
	 sprintf(msg, "%hu\r\n", raw);
 8000608:	89fa      	ldrh	r2, [r7, #14]
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	490b      	ldr	r1, [pc, #44]	; (800063c <main+0x84>)
 800060e:	4618      	mov	r0, r3
 8000610:	f004 f936 	bl	8004880 <siprintf>
	 HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff fdfa 	bl	8000210 <strlen>
 800061c:	4603      	mov	r3, r0
 800061e:	b29a      	uxth	r2, r3
 8000620:	1d39      	adds	r1, r7, #4
 8000622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000626:	4806      	ldr	r0, [pc, #24]	; (8000640 <main+0x88>)
 8000628:	f003 f9f8 	bl	8003a1c <HAL_UART_Transmit>
	 HAL_Delay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f000 fc67 	bl	8000f00 <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000632:	e7d2      	b.n	80005da <main+0x22>
 8000634:	40020000 	.word	0x40020000
 8000638:	20000524 	.word	0x20000524
 800063c:	080050f4 	.word	0x080050f4
 8000640:	20000098 	.word	0x20000098

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b0b4      	sub	sp, #208	; 0xd0
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f004 f90c 	bl	8004870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2284      	movs	r2, #132	; 0x84
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f004 f8fd 	bl	8004870 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	4b37      	ldr	r3, [pc, #220]	; (8000754 <SystemClock_Config+0x110>)
 8000678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067a:	4a36      	ldr	r2, [pc, #216]	; (8000754 <SystemClock_Config+0x110>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000680:	6413      	str	r3, [r2, #64]	; 0x40
 8000682:	4b34      	ldr	r3, [pc, #208]	; (8000754 <SystemClock_Config+0x110>)
 8000684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800068e:	4b32      	ldr	r3, [pc, #200]	; (8000758 <SystemClock_Config+0x114>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000696:	4a30      	ldr	r2, [pc, #192]	; (8000758 <SystemClock_Config+0x114>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069c:	6013      	str	r3, [r2, #0]
 800069e:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <SystemClock_Config+0x114>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006aa:	2301      	movs	r3, #1
 80006ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006cc:	2348      	movs	r3, #72	; 0x48
 80006ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006d8:	2303      	movs	r3, #3
 80006da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 f8b6 	bl	8002854 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ee:	f000 f9af 	bl	8000a50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000708:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000712:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000716:	2102      	movs	r1, #2
 8000718:	4618      	mov	r0, r3
 800071a:	f002 fb3f 	bl	8002d9c <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000724:	f000 f994 	bl	8000a50 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <SystemClock_Config+0x118>)
 800072a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800072c:	2300      	movs	r3, #0
 800072e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000730:	2300      	movs	r3, #0
 8000732:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	4618      	mov	r0, r3
 800073c:	f002 fd30 	bl	80031a0 <HAL_RCCEx_PeriphCLKConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x106>
  {
    Error_Handler();
 8000746:	f000 f983 	bl	8000a50 <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	37d0      	adds	r7, #208	; 0xd0
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000
 800075c:	00200100 	.word	0x00200100

08000760 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000772:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000774:	4a21      	ldr	r2, [pc, #132]	; (80007fc <MX_ADC1_Init+0x9c>)
 8000776:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000778:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <MX_ADC1_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800077e:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000784:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078a:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_ADC1_Init+0x98>)
 800078c:	2201      	movs	r2, #1
 800078e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000790:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_ADC1_Init+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007a0:	4a17      	ldr	r2, [pc, #92]	; (8000800 <MX_ADC1_Init+0xa0>)
 80007a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007be:	480e      	ldr	r0, [pc, #56]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007c0:	f000 fbc2 	bl	8000f48 <HAL_ADC_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007ca:	f000 f941 	bl	8000a50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007d6:	2307      	movs	r3, #7
 80007d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007da:	463b      	mov	r3, r7
 80007dc:	4619      	mov	r1, r3
 80007de:	4806      	ldr	r0, [pc, #24]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007e0:	f000 febc 	bl	800155c <HAL_ADC_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007ea:	f000 f931 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000524 	.word	0x20000524
 80007fc:	40012000 	.word	0x40012000
 8000800:	0f000001 	.word	0x0f000001

08000804 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_USART3_UART_Init+0x58>)
 800080a:	4a15      	ldr	r2, [pc, #84]	; (8000860 <MX_USART3_UART_Init+0x5c>)
 800080c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_USART3_UART_Init+0x58>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART3_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_USART3_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART3_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART3_UART_Init+0x58>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART3_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART3_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART3_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART3_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_USART3_UART_Init+0x58>)
 8000848:	f003 f89a 	bl	8003980 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000852:	f000 f8fd 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000098 	.word	0x20000098
 8000860:	40004800 	.word	0x40004800

08000864 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800086e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000872:	2206      	movs	r2, #6
 8000874:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000878:	2202      	movs	r2, #2
 800087a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000884:	2202      	movs	r2, #2
 8000886:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088a:	2201      	movs	r2, #1
 800088c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089c:	2201      	movs	r2, #1
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a8:	f001 fe8b 	bl	80025c2 <HAL_PCD_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008b2:	f000 f8cd 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000011c 	.word	0x2000011c

080008c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_DMA_Init+0x38>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <MX_DMA_Init+0x38>)
 80008cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_DMA_Init+0x38>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	2038      	movs	r0, #56	; 0x38
 80008e4:	f001 f963 	bl	8001bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008e8:	2038      	movs	r0, #56	; 0x38
 80008ea:	f001 f97c 	bl	8001be6 <HAL_NVIC_EnableIRQ>

}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	; 0x30
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	4b4a      	ldr	r3, [pc, #296]	; (8000a3c <MX_GPIO_Init+0x140>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a49      	ldr	r2, [pc, #292]	; (8000a3c <MX_GPIO_Init+0x140>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b47      	ldr	r3, [pc, #284]	; (8000a3c <MX_GPIO_Init+0x140>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	61bb      	str	r3, [r7, #24]
 8000928:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	4b44      	ldr	r3, [pc, #272]	; (8000a3c <MX_GPIO_Init+0x140>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a43      	ldr	r2, [pc, #268]	; (8000a3c <MX_GPIO_Init+0x140>)
 8000930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b41      	ldr	r3, [pc, #260]	; (8000a3c <MX_GPIO_Init+0x140>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <MX_GPIO_Init+0x140>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a3d      	ldr	r2, [pc, #244]	; (8000a3c <MX_GPIO_Init+0x140>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b3b      	ldr	r3, [pc, #236]	; (8000a3c <MX_GPIO_Init+0x140>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b38      	ldr	r3, [pc, #224]	; (8000a3c <MX_GPIO_Init+0x140>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a37      	ldr	r2, [pc, #220]	; (8000a3c <MX_GPIO_Init+0x140>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b35      	ldr	r3, [pc, #212]	; (8000a3c <MX_GPIO_Init+0x140>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	4b32      	ldr	r3, [pc, #200]	; (8000a3c <MX_GPIO_Init+0x140>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a31      	ldr	r2, [pc, #196]	; (8000a3c <MX_GPIO_Init+0x140>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b2f      	ldr	r3, [pc, #188]	; (8000a3c <MX_GPIO_Init+0x140>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098a:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <MX_GPIO_Init+0x140>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a2b      	ldr	r2, [pc, #172]	; (8000a3c <MX_GPIO_Init+0x140>)
 8000990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <MX_GPIO_Init+0x140>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009a8:	4825      	ldr	r0, [pc, #148]	; (8000a40 <MX_GPIO_Init+0x144>)
 80009aa:	f001 fdcd 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2140      	movs	r1, #64	; 0x40
 80009b2:	4824      	ldr	r0, [pc, #144]	; (8000a44 <MX_GPIO_Init+0x148>)
 80009b4:	f001 fdc8 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009be:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <MX_GPIO_Init+0x14c>)
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	481f      	ldr	r0, [pc, #124]	; (8000a4c <MX_GPIO_Init+0x150>)
 80009ce:	f001 fc0f 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009d2:	f244 0381 	movw	r3, #16513	; 0x4081
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4815      	ldr	r0, [pc, #84]	; (8000a40 <MX_GPIO_Init+0x144>)
 80009ec:	f001 fc00 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009f0:	2340      	movs	r3, #64	; 0x40
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	480f      	ldr	r0, [pc, #60]	; (8000a44 <MX_GPIO_Init+0x148>)
 8000a08:	f001 fbf2 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4809      	ldr	r0, [pc, #36]	; (8000a44 <MX_GPIO_Init+0x148>)
 8000a20:	f001 fbe6 	bl	80021f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2100      	movs	r1, #0
 8000a28:	2028      	movs	r0, #40	; 0x28
 8000a2a:	f001 f8c0 	bl	8001bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a2e:	2028      	movs	r0, #40	; 0x28
 8000a30:	f001 f8d9 	bl	8001be6 <HAL_NVIC_EnableIRQ>

}
 8000a34:	bf00      	nop
 8000a36:	3730      	adds	r7, #48	; 0x30
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020400 	.word	0x40020400
 8000a44:	40021800 	.word	0x40021800
 8000a48:	10110000 	.word	0x10110000
 8000a4c:	40020800 	.word	0x40020800

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <Error_Handler+0x8>
	...

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a84:	6453      	str	r3, [r2, #68]	; 0x44
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a30      	ldr	r2, [pc, #192]	; (8000b84 <HAL_ADC_MspInit+0xe0>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d15a      	bne.n	8000b7c <HAL_ADC_MspInit+0xd8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ac6:	4b30      	ldr	r3, [pc, #192]	; (8000b88 <HAL_ADC_MspInit+0xe4>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a2f      	ldr	r2, [pc, #188]	; (8000b88 <HAL_ADC_MspInit+0xe4>)
 8000acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b2d      	ldr	r3, [pc, #180]	; (8000b88 <HAL_ADC_MspInit+0xe4>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <HAL_ADC_MspInit+0xe4>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a29      	ldr	r2, [pc, #164]	; (8000b88 <HAL_ADC_MspInit+0xe4>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b27      	ldr	r3, [pc, #156]	; (8000b88 <HAL_ADC_MspInit+0xe4>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC_Pin;
 8000af6:	2301      	movs	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afa:	2303      	movs	r3, #3
 8000afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4820      	ldr	r0, [pc, #128]	; (8000b8c <HAL_ADC_MspInit+0xe8>)
 8000b0a:	f001 fb71 	bl	80021f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b0e:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <HAL_ADC_MspInit+0xec>)
 8000b10:	4a20      	ldr	r2, [pc, #128]	; (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b12:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b14:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <HAL_ADC_MspInit+0xec>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <HAL_ADC_MspInit+0xec>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <HAL_ADC_MspInit+0xec>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <HAL_ADC_MspInit+0xec>)
 8000b28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b2c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <HAL_ADC_MspInit+0xec>)
 8000b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b34:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b36:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <HAL_ADC_MspInit+0xec>)
 8000b38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b3c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <HAL_ADC_MspInit+0xec>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_ADC_MspInit+0xec>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_ADC_MspInit+0xec>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b50:	480f      	ldr	r0, [pc, #60]	; (8000b90 <HAL_ADC_MspInit+0xec>)
 8000b52:	f001 f863 	bl	8001c1c <HAL_DMA_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000b5c:	f7ff ff78 	bl	8000a50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <HAL_ADC_MspInit+0xec>)
 8000b64:	639a      	str	r2, [r3, #56]	; 0x38
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <HAL_ADC_MspInit+0xec>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	2012      	movs	r0, #18
 8000b72:	f001 f81c 	bl	8001bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b76:	2012      	movs	r0, #18
 8000b78:	f001 f835 	bl	8001be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40012000 	.word	0x40012000
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	2000056c 	.word	0x2000056c
 8000b94:	40026410 	.word	0x40026410

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <HAL_UART_MspInit+0x7c>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d128      	bne.n	8000c0c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a16      	ldr	r2, [pc, #88]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000bd8:	f043 0308 	orr.w	r3, r3, #8
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bfc:	2307      	movs	r3, #7
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <HAL_UART_MspInit+0x84>)
 8000c08:	f001 faf2 	bl	80021f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c0c:	bf00      	nop
 8000c0e:	3728      	adds	r7, #40	; 0x28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40004800 	.word	0x40004800
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020c00 	.word	0x40020c00

08000c20 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c40:	d141      	bne.n	8000cc6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <HAL_PCD_MspInit+0xb0>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a22      	ldr	r2, [pc, #136]	; (8000cd0 <HAL_PCD_MspInit+0xb0>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <HAL_PCD_MspInit+0xb0>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c5a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c6c:	230a      	movs	r3, #10
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	4817      	ldr	r0, [pc, #92]	; (8000cd4 <HAL_PCD_MspInit+0xb4>)
 8000c78:	f001 faba 	bl	80021f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4810      	ldr	r0, [pc, #64]	; (8000cd4 <HAL_PCD_MspInit+0xb4>)
 8000c92:	f001 faad 	bl	80021f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_PCD_MspInit+0xb0>)
 8000c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c9a:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <HAL_PCD_MspInit+0xb0>)
 8000c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca0:	6353      	str	r3, [r2, #52]	; 0x34
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_PCD_MspInit+0xb0>)
 8000ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <HAL_PCD_MspInit+0xb0>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	4a07      	ldr	r2, [pc, #28]	; (8000cd0 <HAL_PCD_MspInit+0xb0>)
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <HAL_PCD_MspInit+0xb0>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	; 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <NMI_Handler+0x4>

08000cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d24:	f000 f8cc 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <ADC_IRQHandler+0x10>)
 8000d32:	f000 faa6 	bl	8001282 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000524 	.word	0x20000524

08000d40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d48:	f001 fc18 	bl	800257c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <DMA2_Stream0_IRQHandler+0x10>)
 8000d56:	f001 f80f 	bl	8001d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000056c 	.word	0x2000056c

08000d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d6c:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <_sbrk+0x5c>)
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <_sbrk+0x60>)
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <_sbrk+0x64>)
 8000d82:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <_sbrk+0x68>)
 8000d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d207      	bcs.n	8000da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d94:	f003 fd42 	bl	800481c <__errno>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000da2:	e009      	b.n	8000db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <_sbrk+0x64>)
 8000db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20050000 	.word	0x20050000
 8000dc4:	00000400 	.word	0x00000400
 8000dc8:	2000008c 	.word	0x2000008c
 8000dcc:	20000628 	.word	0x20000628

08000dd0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <SystemInit+0x20>)
 8000dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <SystemInit+0x20>)
 8000ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dfa:	490e      	ldr	r1, [pc, #56]	; (8000e34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dfc:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e10:	4c0b      	ldr	r4, [pc, #44]	; (8000e40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e1e:	f7ff ffd7 	bl	8000dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e22:	f003 fd01 	bl	8004828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e26:	f7ff fbc7 	bl	80005b8 <main>
  bx  lr    
 8000e2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e2c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e38:	08005160 	.word	0x08005160
  ldr r2, =_sbss
 8000e3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e40:	20000628 	.word	0x20000628

08000e44 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <CAN1_RX0_IRQHandler>

08000e46 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4a:	2003      	movs	r0, #3
 8000e4c:	f000 fea4 	bl	8001b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 f805 	bl	8000e60 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e56:	f7ff fe01 	bl	8000a5c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_InitTick+0x54>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x58>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 febf 	bl	8001c02 <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00e      	b.n	8000eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d80a      	bhi.n	8000eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e9c:	f000 fe87 	bl	8001bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <HAL_InitTick+0x5c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x20>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000614 	.word	0x20000614

08000ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <HAL_GetTick+0x14>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000614 	.word	0x20000614

08000f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f08:	f7ff ffee 	bl	8000ee8 <HAL_GetTick>
 8000f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f18:	d005      	beq.n	8000f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_Delay+0x44>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f26:	bf00      	nop
 8000f28:	f7ff ffde 	bl	8000ee8 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d8f7      	bhi.n	8000f28 <HAL_Delay+0x28>
  {
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008

08000f48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e031      	b.n	8000fc2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d109      	bne.n	8000f7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff fd9c 	bl	8000aa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f003 0310 	and.w	r3, r3, #16
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d116      	bne.n	8000fb4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <HAL_ADC_Init+0x84>)
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	f043 0202 	orr.w	r2, r3, #2
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f000 fc2a 	bl	80017f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f023 0303 	bic.w	r3, r3, #3
 8000faa:	f043 0201 	orr.w	r2, r3, #1
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	641a      	str	r2, [r3, #64]	; 0x40
 8000fb2:	e001      	b.n	8000fb8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	ffffeefd 	.word	0xffffeefd

08000fd0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d101      	bne.n	8000fea <HAL_ADC_Start+0x1a>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e0ad      	b.n	8001146 <HAL_ADC_Start+0x176>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d018      	beq.n	8001032 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001010:	4b50      	ldr	r3, [pc, #320]	; (8001154 <HAL_ADC_Start+0x184>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a50      	ldr	r2, [pc, #320]	; (8001158 <HAL_ADC_Start+0x188>)
 8001016:	fba2 2303 	umull	r2, r3, r2, r3
 800101a:	0c9a      	lsrs	r2, r3, #18
 800101c:	4613      	mov	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001024:	e002      	b.n	800102c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	3b01      	subs	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f9      	bne.n	8001026 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b01      	cmp	r3, #1
 800103e:	d175      	bne.n	800112c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001044:	4b45      	ldr	r3, [pc, #276]	; (800115c <HAL_ADC_Start+0x18c>)
 8001046:	4013      	ands	r3, r2
 8001048:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800105a:	2b00      	cmp	r3, #0
 800105c:	d007      	beq.n	800106e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001066:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800107a:	d106      	bne.n	800108a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001080:	f023 0206 	bic.w	r2, r3, #6
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	645a      	str	r2, [r3, #68]	; 0x44
 8001088:	e002      	b.n	8001090 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010a0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80010a2:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <HAL_ADC_Start+0x190>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 031f 	and.w	r3, r3, #31
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10f      	bne.n	80010ce <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d143      	bne.n	8001144 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	689a      	ldr	r2, [r3, #8]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	e03a      	b.n	8001144 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a24      	ldr	r2, [pc, #144]	; (8001164 <HAL_ADC_Start+0x194>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d10e      	bne.n	80010f6 <HAL_ADC_Start+0x126>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d107      	bne.n	80010f6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010f4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <HAL_ADC_Start+0x190>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0310 	and.w	r3, r3, #16
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d120      	bne.n	8001144 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a18      	ldr	r2, [pc, #96]	; (8001168 <HAL_ADC_Start+0x198>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d11b      	bne.n	8001144 <HAL_ADC_Start+0x174>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d114      	bne.n	8001144 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	e00b      	b.n	8001144 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	f043 0210 	orr.w	r2, r3, #16
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113c:	f043 0201 	orr.w	r2, r3, #1
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000000 	.word	0x20000000
 8001158:	431bde83 	.word	0x431bde83
 800115c:	fffff8fe 	.word	0xfffff8fe
 8001160:	40012300 	.word	0x40012300
 8001164:	40012000 	.word	0x40012000
 8001168:	40012200 	.word	0x40012200

0800116c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001188:	d113      	bne.n	80011b2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001198:	d10b      	bne.n	80011b2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f043 0220 	orr.w	r2, r3, #32
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e063      	b.n	800127a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80011b2:	f7ff fe99 	bl	8000ee8 <HAL_GetTick>
 80011b6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011b8:	e021      	b.n	80011fe <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011c0:	d01d      	beq.n	80011fe <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d007      	beq.n	80011d8 <HAL_ADC_PollForConversion+0x6c>
 80011c8:	f7ff fe8e 	bl	8000ee8 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d212      	bcs.n	80011fe <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d00b      	beq.n	80011fe <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f043 0204 	orr.w	r2, r3, #4
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e03d      	b.n	800127a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b02      	cmp	r3, #2
 800120a:	d1d6      	bne.n	80011ba <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f06f 0212 	mvn.w	r2, #18
 8001214:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d123      	bne.n	8001278 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001234:	2b00      	cmp	r3, #0
 8001236:	d11f      	bne.n	8001278 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001242:	2b00      	cmp	r3, #0
 8001244:	d006      	beq.n	8001254 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001250:	2b00      	cmp	r3, #0
 8001252:	d111      	bne.n	8001278 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d105      	bne.n	8001278 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	f043 0201 	orr.w	r2, r3, #1
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b084      	sub	sp, #16
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b02      	cmp	r3, #2
 800129e:	bf0c      	ite	eq
 80012a0:	2301      	moveq	r3, #1
 80012a2:	2300      	movne	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0320 	and.w	r3, r3, #32
 80012b2:	2b20      	cmp	r3, #32
 80012b4:	bf0c      	ite	eq
 80012b6:	2301      	moveq	r3, #1
 80012b8:	2300      	movne	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d049      	beq.n	8001358 <HAL_ADC_IRQHandler+0xd6>
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d046      	beq.n	8001358 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d105      	bne.n	80012e2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d12b      	bne.n	8001348 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d127      	bne.n	8001348 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001302:	2b00      	cmp	r3, #0
 8001304:	d006      	beq.n	8001314 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001310:	2b00      	cmp	r3, #0
 8001312:	d119      	bne.n	8001348 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0220 	bic.w	r2, r2, #32
 8001322:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d105      	bne.n	8001348 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	f043 0201 	orr.w	r2, r3, #1
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 f8e8 	bl	800151e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f06f 0212 	mvn.w	r2, #18
 8001356:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	2b04      	cmp	r3, #4
 8001364:	bf0c      	ite	eq
 8001366:	2301      	moveq	r3, #1
 8001368:	2300      	movne	r3, #0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001378:	2b80      	cmp	r3, #128	; 0x80
 800137a:	bf0c      	ite	eq
 800137c:	2301      	moveq	r3, #1
 800137e:	2300      	movne	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d057      	beq.n	800143a <HAL_ADC_IRQHandler+0x1b8>
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d054      	beq.n	800143a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f003 0310 	and.w	r3, r3, #16
 8001398:	2b00      	cmp	r3, #0
 800139a:	d105      	bne.n	80013a8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d139      	bne.n	800142a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d006      	beq.n	80013d2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d12b      	bne.n	800142a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d124      	bne.n	800142a <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d11d      	bne.n	800142a <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d119      	bne.n	800142a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001404:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141a:	2b00      	cmp	r3, #0
 800141c:	d105      	bne.n	800142a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f043 0201 	orr.w	r2, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fada 	bl	80019e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f06f 020c 	mvn.w	r2, #12
 8001438:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b01      	cmp	r3, #1
 8001446:	bf0c      	ite	eq
 8001448:	2301      	moveq	r3, #1
 800144a:	2300      	movne	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145a:	2b40      	cmp	r3, #64	; 0x40
 800145c:	bf0c      	ite	eq
 800145e:	2301      	moveq	r3, #1
 8001460:	2300      	movne	r3, #0
 8001462:	b2db      	uxtb	r3, r3
 8001464:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d017      	beq.n	800149c <HAL_ADC_IRQHandler+0x21a>
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d014      	beq.n	800149c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b01      	cmp	r3, #1
 800147e:	d10d      	bne.n	800149c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 f850 	bl	8001532 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f06f 0201 	mvn.w	r2, #1
 800149a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0320 	and.w	r3, r3, #32
 80014a6:	2b20      	cmp	r3, #32
 80014a8:	bf0c      	ite	eq
 80014aa:	2301      	moveq	r3, #1
 80014ac:	2300      	movne	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80014c0:	bf0c      	ite	eq
 80014c2:	2301      	moveq	r3, #1
 80014c4:	2300      	movne	r3, #0
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d015      	beq.n	80014fc <HAL_ADC_IRQHandler+0x27a>
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d012      	beq.n	80014fc <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	f043 0202 	orr.w	r2, r3, #2
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f06f 0220 	mvn.w	r2, #32
 80014ea:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f82a 	bl	8001546 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f06f 0220 	mvn.w	r2, #32
 80014fa:	601a      	str	r2, [r3, #0]
  }
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x1c>
 8001574:	2302      	movs	r3, #2
 8001576:	e12a      	b.n	80017ce <HAL_ADC_ConfigChannel+0x272>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b09      	cmp	r3, #9
 8001586:	d93a      	bls.n	80015fe <HAL_ADC_ConfigChannel+0xa2>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001590:	d035      	beq.n	80015fe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68d9      	ldr	r1, [r3, #12]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	b29b      	uxth	r3, r3
 800159e:	461a      	mov	r2, r3
 80015a0:	4613      	mov	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	4413      	add	r3, r2
 80015a6:	3b1e      	subs	r3, #30
 80015a8:	2207      	movs	r2, #7
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43da      	mvns	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	400a      	ands	r2, r1
 80015b6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a87      	ldr	r2, [pc, #540]	; (80017dc <HAL_ADC_ConfigChannel+0x280>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d10a      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68d9      	ldr	r1, [r3, #12]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	061a      	lsls	r2, r3, #24
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015d6:	e035      	b.n	8001644 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68d9      	ldr	r1, [r3, #12]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	4618      	mov	r0, r3
 80015ea:	4603      	mov	r3, r0
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4403      	add	r3, r0
 80015f0:	3b1e      	subs	r3, #30
 80015f2:	409a      	lsls	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015fc:	e022      	b.n	8001644 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6919      	ldr	r1, [r3, #16]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	b29b      	uxth	r3, r3
 800160a:	461a      	mov	r2, r3
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	2207      	movs	r2, #7
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43da      	mvns	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	400a      	ands	r2, r1
 8001620:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6919      	ldr	r1, [r3, #16]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	b29b      	uxth	r3, r3
 8001632:	4618      	mov	r0, r3
 8001634:	4603      	mov	r3, r0
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4403      	add	r3, r0
 800163a:	409a      	lsls	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b06      	cmp	r3, #6
 800164a:	d824      	bhi.n	8001696 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	3b05      	subs	r3, #5
 800165e:	221f      	movs	r2, #31
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43da      	mvns	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	400a      	ands	r2, r1
 800166c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	b29b      	uxth	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	3b05      	subs	r3, #5
 8001688:	fa00 f203 	lsl.w	r2, r0, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	635a      	str	r2, [r3, #52]	; 0x34
 8001694:	e04c      	b.n	8001730 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b0c      	cmp	r3, #12
 800169c:	d824      	bhi.n	80016e8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	3b23      	subs	r3, #35	; 0x23
 80016b0:	221f      	movs	r2, #31
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	400a      	ands	r2, r1
 80016be:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	4618      	mov	r0, r3
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	3b23      	subs	r3, #35	; 0x23
 80016da:	fa00 f203 	lsl.w	r2, r0, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	631a      	str	r2, [r3, #48]	; 0x30
 80016e6:	e023      	b.n	8001730 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	3b41      	subs	r3, #65	; 0x41
 80016fa:	221f      	movs	r2, #31
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43da      	mvns	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	400a      	ands	r2, r1
 8001708:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	b29b      	uxth	r3, r3
 8001716:	4618      	mov	r0, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	3b41      	subs	r3, #65	; 0x41
 8001724:	fa00 f203 	lsl.w	r2, r0, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a2a      	ldr	r2, [pc, #168]	; (80017e0 <HAL_ADC_ConfigChannel+0x284>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d10a      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x1f4>
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001742:	d105      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001744:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <HAL_ADC_ConfigChannel+0x288>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4a26      	ldr	r2, [pc, #152]	; (80017e4 <HAL_ADC_ConfigChannel+0x288>)
 800174a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800174e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <HAL_ADC_ConfigChannel+0x284>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d109      	bne.n	800176e <HAL_ADC_ConfigChannel+0x212>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b12      	cmp	r3, #18
 8001760:	d105      	bne.n	800176e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001762:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <HAL_ADC_ConfigChannel+0x288>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4a1f      	ldr	r2, [pc, #124]	; (80017e4 <HAL_ADC_ConfigChannel+0x288>)
 8001768:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800176c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a1b      	ldr	r2, [pc, #108]	; (80017e0 <HAL_ADC_ConfigChannel+0x284>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d125      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x268>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a17      	ldr	r2, [pc, #92]	; (80017dc <HAL_ADC_ConfigChannel+0x280>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d003      	beq.n	800178a <HAL_ADC_ConfigChannel+0x22e>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b11      	cmp	r3, #17
 8001788:	d11c      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <HAL_ADC_ConfigChannel+0x288>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4a15      	ldr	r2, [pc, #84]	; (80017e4 <HAL_ADC_ConfigChannel+0x288>)
 8001790:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001794:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a10      	ldr	r2, [pc, #64]	; (80017dc <HAL_ADC_ConfigChannel+0x280>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d111      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_ADC_ConfigChannel+0x28c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a11      	ldr	r2, [pc, #68]	; (80017ec <HAL_ADC_ConfigChannel+0x290>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	0c9a      	lsrs	r2, r3, #18
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80017b6:	e002      	b.n	80017be <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f9      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	10000012 	.word	0x10000012
 80017e0:	40012000 	.word	0x40012000
 80017e4:	40012300 	.word	0x40012300
 80017e8:	20000000 	.word	0x20000000
 80017ec:	431bde83 	.word	0x431bde83

080017f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80017f8:	4b78      	ldr	r3, [pc, #480]	; (80019dc <ADC_Init+0x1ec>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4a77      	ldr	r2, [pc, #476]	; (80019dc <ADC_Init+0x1ec>)
 80017fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001802:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001804:	4b75      	ldr	r3, [pc, #468]	; (80019dc <ADC_Init+0x1ec>)
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	4973      	ldr	r1, [pc, #460]	; (80019dc <ADC_Init+0x1ec>)
 800180e:	4313      	orrs	r3, r2
 8001810:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001820:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6859      	ldr	r1, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	021a      	lsls	r2, r3, #8
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001844:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6859      	ldr	r1, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001866:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6899      	ldr	r1, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	4a58      	ldr	r2, [pc, #352]	; (80019e0 <ADC_Init+0x1f0>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d022      	beq.n	80018ca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001892:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6899      	ldr	r1, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6899      	ldr	r1, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	e00f      	b.n	80018ea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0202 	bic.w	r2, r2, #2
 80018f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6899      	ldr	r1, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	005a      	lsls	r2, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d01b      	beq.n	8001950 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001926:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001936:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6859      	ldr	r1, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	3b01      	subs	r3, #1
 8001944:	035a      	lsls	r2, r3, #13
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	e007      	b.n	8001960 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800195e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800196e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	3b01      	subs	r3, #1
 800197c:	051a      	lsls	r2, r3, #20
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001994:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6899      	ldr	r1, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019a2:	025a      	lsls	r2, r3, #9
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6899      	ldr	r1, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	029a      	lsls	r2, r3, #10
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	609a      	str	r2, [r3, #8]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	40012300 	.word	0x40012300
 80019e0:	0f000001 	.word	0x0f000001

080019e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <__NVIC_SetPriorityGrouping+0x40>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a14:	4013      	ands	r3, r2
 8001a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <__NVIC_SetPriorityGrouping+0x40>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00
 8001a3c:	05fa0000 	.word	0x05fa0000

08001a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <__NVIC_GetPriorityGrouping+0x18>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	f003 0307 	and.w	r3, r3, #7
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	db0b      	blt.n	8001a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	f003 021f 	and.w	r2, r3, #31
 8001a74:	4907      	ldr	r1, [pc, #28]	; (8001a94 <__NVIC_EnableIRQ+0x38>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000e100 	.word	0xe000e100

08001a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6039      	str	r1, [r7, #0]
 8001aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	db0a      	blt.n	8001ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	490c      	ldr	r1, [pc, #48]	; (8001ae4 <__NVIC_SetPriority+0x4c>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	0112      	lsls	r2, r2, #4
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	440b      	add	r3, r1
 8001abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac0:	e00a      	b.n	8001ad8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4908      	ldr	r1, [pc, #32]	; (8001ae8 <__NVIC_SetPriority+0x50>)
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	3b04      	subs	r3, #4
 8001ad0:	0112      	lsls	r2, r2, #4
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	761a      	strb	r2, [r3, #24]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000e100 	.word	0xe000e100
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f1c3 0307 	rsb	r3, r3, #7
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	bf28      	it	cs
 8001b0a:	2304      	movcs	r3, #4
 8001b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3304      	adds	r3, #4
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d902      	bls.n	8001b1c <NVIC_EncodePriority+0x30>
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3b03      	subs	r3, #3
 8001b1a:	e000      	b.n	8001b1e <NVIC_EncodePriority+0x32>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	401a      	ands	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	43d9      	mvns	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	4313      	orrs	r3, r2
         );
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3724      	adds	r7, #36	; 0x24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b64:	d301      	bcc.n	8001b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00f      	b.n	8001b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <SysTick_Config+0x40>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b72:	210f      	movs	r1, #15
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b78:	f7ff ff8e 	bl	8001a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <SysTick_Config+0x40>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b82:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <SysTick_Config+0x40>)
 8001b84:	2207      	movs	r2, #7
 8001b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	e000e010 	.word	0xe000e010

08001b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ff29 	bl	80019f8 <__NVIC_SetPriorityGrouping>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc0:	f7ff ff3e 	bl	8001a40 <__NVIC_GetPriorityGrouping>
 8001bc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68b9      	ldr	r1, [r7, #8]
 8001bca:	6978      	ldr	r0, [r7, #20]
 8001bcc:	f7ff ff8e 	bl	8001aec <NVIC_EncodePriority>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff5d 	bl	8001a98 <__NVIC_SetPriority>
}
 8001bde:	bf00      	nop
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff31 	bl	8001a5c <__NVIC_EnableIRQ>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff ffa2 	bl	8001b54 <SysTick_Config>
 8001c10:	4603      	mov	r3, r0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c28:	f7ff f95e 	bl	8000ee8 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e099      	b.n	8001d6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2202      	movs	r2, #2
 8001c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0201 	bic.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c58:	e00f      	b.n	8001c7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c5a:	f7ff f945 	bl	8000ee8 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b05      	cmp	r3, #5
 8001c66:	d908      	bls.n	8001c7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2203      	movs	r2, #3
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e078      	b.n	8001d6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1e8      	bne.n	8001c5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	4b38      	ldr	r3, [pc, #224]	; (8001d74 <HAL_DMA_Init+0x158>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ca6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d107      	bne.n	8001ce4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f023 0307 	bic.w	r3, r3, #7
 8001cfa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d117      	bne.n	8001d3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00e      	beq.n	8001d3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f9e9 	bl	80020f8 <DMA_CheckFifoParam>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d008      	beq.n	8001d3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2240      	movs	r2, #64	; 0x40
 8001d30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e016      	b.n	8001d6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f9a0 	bl	800208c <DMA_CalcBaseAndBitshift>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	223f      	movs	r2, #63	; 0x3f
 8001d56:	409a      	lsls	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	f010803f 	.word	0xf010803f

08001d78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001d84:	4b92      	ldr	r3, [pc, #584]	; (8001fd0 <HAL_DMA_IRQHandler+0x258>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a92      	ldr	r2, [pc, #584]	; (8001fd4 <HAL_DMA_IRQHandler+0x25c>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	0a9b      	lsrs	r3, r3, #10
 8001d90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da2:	2208      	movs	r2, #8
 8001da4:	409a      	lsls	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d01a      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0204 	bic.w	r2, r2, #4
 8001dca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd0:	2208      	movs	r2, #8
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ddc:	f043 0201 	orr.w	r2, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de8:	2201      	movs	r2, #1
 8001dea:	409a      	lsls	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d012      	beq.n	8001e1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00b      	beq.n	8001e1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e06:	2201      	movs	r2, #1
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e12:	f043 0202 	orr.w	r2, r3, #2
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	2204      	movs	r2, #4
 8001e20:	409a      	lsls	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d012      	beq.n	8001e50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00b      	beq.n	8001e50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e48:	f043 0204 	orr.w	r2, r3, #4
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e54:	2210      	movs	r2, #16
 8001e56:	409a      	lsls	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d043      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d03c      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	2210      	movs	r2, #16
 8001e74:	409a      	lsls	r2, r3
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d018      	beq.n	8001eba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d108      	bne.n	8001ea8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d024      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	4798      	blx	r3
 8001ea6:	e01f      	b.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01b      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	4798      	blx	r3
 8001eb8:	e016      	b.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d107      	bne.n	8001ed8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0208 	bic.w	r2, r2, #8
 8001ed6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eec:	2220      	movs	r2, #32
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 808e 	beq.w	8002016 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 8086 	beq.w	8002016 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	2220      	movs	r2, #32
 8001f10:	409a      	lsls	r2, r3
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b05      	cmp	r3, #5
 8001f20:	d136      	bne.n	8001f90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0216 	bic.w	r2, r2, #22
 8001f30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d103      	bne.n	8001f52 <HAL_DMA_IRQHandler+0x1da>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d007      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0208 	bic.w	r2, r2, #8
 8001f60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f66:	223f      	movs	r2, #63	; 0x3f
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d07d      	beq.n	8002082 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	4798      	blx	r3
        }
        return;
 8001f8e:	e078      	b.n	8002082 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d01c      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d108      	bne.n	8001fbe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d030      	beq.n	8002016 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	4798      	blx	r3
 8001fbc:	e02b      	b.n	8002016 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d027      	beq.n	8002016 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	4798      	blx	r3
 8001fce:	e022      	b.n	8002016 <HAL_DMA_IRQHandler+0x29e>
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10f      	bne.n	8002006 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0210 	bic.w	r2, r2, #16
 8001ff4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201a:	2b00      	cmp	r3, #0
 800201c:	d032      	beq.n	8002084 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d022      	beq.n	8002070 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2205      	movs	r2, #5
 800202e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0201 	bic.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	3301      	adds	r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	429a      	cmp	r2, r3
 800204c:	d307      	bcc.n	800205e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1f2      	bne.n	8002042 <HAL_DMA_IRQHandler+0x2ca>
 800205c:	e000      	b.n	8002060 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800205e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	4798      	blx	r3
 8002080:	e000      	b.n	8002084 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002082:	bf00      	nop
    }
  }
}
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop

0800208c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	3b10      	subs	r3, #16
 800209c:	4a13      	ldr	r2, [pc, #76]	; (80020ec <DMA_CalcBaseAndBitshift+0x60>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020a6:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <DMA_CalcBaseAndBitshift+0x64>)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d908      	bls.n	80020cc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <DMA_CalcBaseAndBitshift+0x68>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	1d1a      	adds	r2, r3, #4
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	659a      	str	r2, [r3, #88]	; 0x58
 80020ca:	e006      	b.n	80020da <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <DMA_CalcBaseAndBitshift+0x68>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	aaaaaaab 	.word	0xaaaaaaab
 80020f0:	08005114 	.word	0x08005114
 80020f4:	fffffc00 	.word	0xfffffc00

080020f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d11f      	bne.n	8002152 <DMA_CheckFifoParam+0x5a>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d856      	bhi.n	80021c6 <DMA_CheckFifoParam+0xce>
 8002118:	a201      	add	r2, pc, #4	; (adr r2, 8002120 <DMA_CheckFifoParam+0x28>)
 800211a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211e:	bf00      	nop
 8002120:	08002131 	.word	0x08002131
 8002124:	08002143 	.word	0x08002143
 8002128:	08002131 	.word	0x08002131
 800212c:	080021c7 	.word	0x080021c7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d046      	beq.n	80021ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002140:	e043      	b.n	80021ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002146:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800214a:	d140      	bne.n	80021ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002150:	e03d      	b.n	80021ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800215a:	d121      	bne.n	80021a0 <DMA_CheckFifoParam+0xa8>
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d837      	bhi.n	80021d2 <DMA_CheckFifoParam+0xda>
 8002162:	a201      	add	r2, pc, #4	; (adr r2, 8002168 <DMA_CheckFifoParam+0x70>)
 8002164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002168:	08002179 	.word	0x08002179
 800216c:	0800217f 	.word	0x0800217f
 8002170:	08002179 	.word	0x08002179
 8002174:	08002191 	.word	0x08002191
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
      break;
 800217c:	e030      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d025      	beq.n	80021d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800218e:	e022      	b.n	80021d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002198:	d11f      	bne.n	80021da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800219e:	e01c      	b.n	80021da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d903      	bls.n	80021ae <DMA_CheckFifoParam+0xb6>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d003      	beq.n	80021b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021ac:	e018      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	73fb      	strb	r3, [r7, #15]
      break;
 80021b2:	e015      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00e      	beq.n	80021de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	73fb      	strb	r3, [r7, #15]
      break;
 80021c4:	e00b      	b.n	80021de <DMA_CheckFifoParam+0xe6>
      break;
 80021c6:	bf00      	nop
 80021c8:	e00a      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      break;
 80021ca:	bf00      	nop
 80021cc:	e008      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      break;
 80021ce:	bf00      	nop
 80021d0:	e006      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      break;
 80021d2:	bf00      	nop
 80021d4:	e004      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      break;
 80021d6:	bf00      	nop
 80021d8:	e002      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80021da:	bf00      	nop
 80021dc:	e000      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      break;
 80021de:	bf00      	nop
    }
  } 
  
  return status; 
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop

080021f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	; 0x24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	e175      	b.n	80024fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002210:	2201      	movs	r2, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	429a      	cmp	r2, r3
 800222a:	f040 8164 	bne.w	80024f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d00b      	beq.n	800224e <HAL_GPIO_Init+0x5e>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d007      	beq.n	800224e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002242:	2b11      	cmp	r3, #17
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b12      	cmp	r3, #18
 800224c:	d130      	bne.n	80022b0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	2203      	movs	r2, #3
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002284:	2201      	movs	r2, #1
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 0201 	and.w	r2, r3, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x100>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b12      	cmp	r3, #18
 80022ee:	d123      	bne.n	8002338 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	08da      	lsrs	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3208      	adds	r2, #8
 80022f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	220f      	movs	r2, #15
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	08da      	lsrs	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3208      	adds	r2, #8
 8002332:	69b9      	ldr	r1, [r7, #24]
 8002334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	2203      	movs	r2, #3
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0203 	and.w	r2, r3, #3
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80be 	beq.w	80024f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237a:	4b66      	ldr	r3, [pc, #408]	; (8002514 <HAL_GPIO_Init+0x324>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	4a65      	ldr	r2, [pc, #404]	; (8002514 <HAL_GPIO_Init+0x324>)
 8002380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002384:	6453      	str	r3, [r2, #68]	; 0x44
 8002386:	4b63      	ldr	r3, [pc, #396]	; (8002514 <HAL_GPIO_Init+0x324>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002392:	4a61      	ldr	r2, [pc, #388]	; (8002518 <HAL_GPIO_Init+0x328>)
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	089b      	lsrs	r3, r3, #2
 8002398:	3302      	adds	r3, #2
 800239a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	220f      	movs	r2, #15
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a58      	ldr	r2, [pc, #352]	; (800251c <HAL_GPIO_Init+0x32c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d037      	beq.n	800242e <HAL_GPIO_Init+0x23e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a57      	ldr	r2, [pc, #348]	; (8002520 <HAL_GPIO_Init+0x330>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d031      	beq.n	800242a <HAL_GPIO_Init+0x23a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a56      	ldr	r2, [pc, #344]	; (8002524 <HAL_GPIO_Init+0x334>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d02b      	beq.n	8002426 <HAL_GPIO_Init+0x236>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a55      	ldr	r2, [pc, #340]	; (8002528 <HAL_GPIO_Init+0x338>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d025      	beq.n	8002422 <HAL_GPIO_Init+0x232>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a54      	ldr	r2, [pc, #336]	; (800252c <HAL_GPIO_Init+0x33c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d01f      	beq.n	800241e <HAL_GPIO_Init+0x22e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a53      	ldr	r2, [pc, #332]	; (8002530 <HAL_GPIO_Init+0x340>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d019      	beq.n	800241a <HAL_GPIO_Init+0x22a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a52      	ldr	r2, [pc, #328]	; (8002534 <HAL_GPIO_Init+0x344>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <HAL_GPIO_Init+0x226>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a51      	ldr	r2, [pc, #324]	; (8002538 <HAL_GPIO_Init+0x348>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00d      	beq.n	8002412 <HAL_GPIO_Init+0x222>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a50      	ldr	r2, [pc, #320]	; (800253c <HAL_GPIO_Init+0x34c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d007      	beq.n	800240e <HAL_GPIO_Init+0x21e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4f      	ldr	r2, [pc, #316]	; (8002540 <HAL_GPIO_Init+0x350>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d101      	bne.n	800240a <HAL_GPIO_Init+0x21a>
 8002406:	2309      	movs	r3, #9
 8002408:	e012      	b.n	8002430 <HAL_GPIO_Init+0x240>
 800240a:	230a      	movs	r3, #10
 800240c:	e010      	b.n	8002430 <HAL_GPIO_Init+0x240>
 800240e:	2308      	movs	r3, #8
 8002410:	e00e      	b.n	8002430 <HAL_GPIO_Init+0x240>
 8002412:	2307      	movs	r3, #7
 8002414:	e00c      	b.n	8002430 <HAL_GPIO_Init+0x240>
 8002416:	2306      	movs	r3, #6
 8002418:	e00a      	b.n	8002430 <HAL_GPIO_Init+0x240>
 800241a:	2305      	movs	r3, #5
 800241c:	e008      	b.n	8002430 <HAL_GPIO_Init+0x240>
 800241e:	2304      	movs	r3, #4
 8002420:	e006      	b.n	8002430 <HAL_GPIO_Init+0x240>
 8002422:	2303      	movs	r3, #3
 8002424:	e004      	b.n	8002430 <HAL_GPIO_Init+0x240>
 8002426:	2302      	movs	r3, #2
 8002428:	e002      	b.n	8002430 <HAL_GPIO_Init+0x240>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <HAL_GPIO_Init+0x240>
 800242e:	2300      	movs	r3, #0
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	f002 0203 	and.w	r2, r2, #3
 8002436:	0092      	lsls	r2, r2, #2
 8002438:	4093      	lsls	r3, r2
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002440:	4935      	ldr	r1, [pc, #212]	; (8002518 <HAL_GPIO_Init+0x328>)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	3302      	adds	r3, #2
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800244e:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <HAL_GPIO_Init+0x354>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002472:	4a34      	ldr	r2, [pc, #208]	; (8002544 <HAL_GPIO_Init+0x354>)
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002478:	4b32      	ldr	r3, [pc, #200]	; (8002544 <HAL_GPIO_Init+0x354>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800249c:	4a29      	ldr	r2, [pc, #164]	; (8002544 <HAL_GPIO_Init+0x354>)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024a2:	4b28      	ldr	r3, [pc, #160]	; (8002544 <HAL_GPIO_Init+0x354>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024c6:	4a1f      	ldr	r2, [pc, #124]	; (8002544 <HAL_GPIO_Init+0x354>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024cc:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <HAL_GPIO_Init+0x354>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024f0:	4a14      	ldr	r2, [pc, #80]	; (8002544 <HAL_GPIO_Init+0x354>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3301      	adds	r3, #1
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	2b0f      	cmp	r3, #15
 8002500:	f67f ae86 	bls.w	8002210 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800
 8002518:	40013800 	.word	0x40013800
 800251c:	40020000 	.word	0x40020000
 8002520:	40020400 	.word	0x40020400
 8002524:	40020800 	.word	0x40020800
 8002528:	40020c00 	.word	0x40020c00
 800252c:	40021000 	.word	0x40021000
 8002530:	40021400 	.word	0x40021400
 8002534:	40021800 	.word	0x40021800
 8002538:	40021c00 	.word	0x40021c00
 800253c:	40022000 	.word	0x40022000
 8002540:	40022400 	.word	0x40022400
 8002544:	40013c00 	.word	0x40013c00

08002548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	807b      	strh	r3, [r7, #2]
 8002554:	4613      	mov	r3, r2
 8002556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002558:	787b      	ldrb	r3, [r7, #1]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800255e:	887a      	ldrh	r2, [r7, #2]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002564:	e003      	b.n	800256e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002566:	887b      	ldrh	r3, [r7, #2]
 8002568:	041a      	lsls	r2, r3, #16
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	619a      	str	r2, [r3, #24]
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	4013      	ands	r3, r2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d006      	beq.n	80025a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002592:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002598:	88fb      	ldrh	r3, [r7, #6]
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f806 	bl	80025ac <HAL_GPIO_EXTI_Callback>
  }
}
 80025a0:	bf00      	nop
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40013c00 	.word	0x40013c00

080025ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c4:	b08f      	sub	sp, #60	; 0x3c
 80025c6:	af0a      	add	r7, sp, #40	; 0x28
 80025c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e116      	b.n	8002802 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe fb16 	bl	8000c20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2203      	movs	r2, #3
 80025f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002604:	2b00      	cmp	r3, #0
 8002606:	d102      	bne.n	800260e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f001 fea2 	bl	800435c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	687e      	ldr	r6, [r7, #4]
 8002620:	466d      	mov	r5, sp
 8002622:	f106 0410 	add.w	r4, r6, #16
 8002626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800262a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800262c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800262e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002632:	e885 0003 	stmia.w	r5, {r0, r1}
 8002636:	1d33      	adds	r3, r6, #4
 8002638:	cb0e      	ldmia	r3, {r1, r2, r3}
 800263a:	6838      	ldr	r0, [r7, #0]
 800263c:	f001 fe36 	bl	80042ac <USB_CoreInit>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2202      	movs	r2, #2
 800264a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e0d7      	b.n	8002802 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f001 fe90 	bl	800437e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]
 8002662:	e04a      	b.n	80026fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	333d      	adds	r3, #61	; 0x3d
 8002674:	2201      	movs	r2, #1
 8002676:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	333c      	adds	r3, #60	; 0x3c
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	b298      	uxth	r0, r3
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	3342      	adds	r3, #66	; 0x42
 80026a0:	4602      	mov	r2, r0
 80026a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026a4:	7bfa      	ldrb	r2, [r7, #15]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	333f      	adds	r3, #63	; 0x3f
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026b8:	7bfa      	ldrb	r2, [r7, #15]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	3344      	adds	r3, #68	; 0x44
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026cc:	7bfa      	ldrb	r2, [r7, #15]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	3348      	adds	r3, #72	; 0x48
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	3350      	adds	r3, #80	; 0x50
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	3301      	adds	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	429a      	cmp	r2, r3
 8002702:	d3af      	bcc.n	8002664 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002704:	2300      	movs	r3, #0
 8002706:	73fb      	strb	r3, [r7, #15]
 8002708:	e044      	b.n	8002794 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	1a9b      	subs	r3, r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002778:	7bfa      	ldrb	r2, [r7, #15]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	3301      	adds	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
 8002794:	7bfa      	ldrb	r2, [r7, #15]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	429a      	cmp	r2, r3
 800279c:	d3b5      	bcc.n	800270a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	687e      	ldr	r6, [r7, #4]
 80027a6:	466d      	mov	r5, sp
 80027a8:	f106 0410 	add.w	r4, r6, #16
 80027ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80027bc:	1d33      	adds	r3, r6, #4
 80027be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027c0:	6838      	ldr	r0, [r7, #0]
 80027c2:	f001 fe07 	bl	80043d4 <USB_DevInit>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e014      	b.n	8002802 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d102      	bne.n	80027f6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f80b 	bl	800280c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f001 ffb9 	bl	8004772 <USB_DevDisconnect>

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800280c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800283a:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_PCDEx_ActivateLPM+0x44>)
 800283c:	4313      	orrs	r3, r2
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	10000003 	.word	0x10000003

08002854 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800285c:	2300      	movs	r3, #0
 800285e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e291      	b.n	8002d8e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 8087 	beq.w	8002986 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002878:	4b96      	ldr	r3, [pc, #600]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 030c 	and.w	r3, r3, #12
 8002880:	2b04      	cmp	r3, #4
 8002882:	d00c      	beq.n	800289e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002884:	4b93      	ldr	r3, [pc, #588]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	2b08      	cmp	r3, #8
 800288e:	d112      	bne.n	80028b6 <HAL_RCC_OscConfig+0x62>
 8002890:	4b90      	ldr	r3, [pc, #576]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002898:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800289c:	d10b      	bne.n	80028b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289e:	4b8d      	ldr	r3, [pc, #564]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d06c      	beq.n	8002984 <HAL_RCC_OscConfig+0x130>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d168      	bne.n	8002984 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e26b      	b.n	8002d8e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028be:	d106      	bne.n	80028ce <HAL_RCC_OscConfig+0x7a>
 80028c0:	4b84      	ldr	r3, [pc, #528]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a83      	ldr	r2, [pc, #524]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 80028c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	e02e      	b.n	800292c <HAL_RCC_OscConfig+0xd8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x9c>
 80028d6:	4b7f      	ldr	r3, [pc, #508]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a7e      	ldr	r2, [pc, #504]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 80028dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	4b7c      	ldr	r3, [pc, #496]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a7b      	ldr	r2, [pc, #492]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 80028e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e01d      	b.n	800292c <HAL_RCC_OscConfig+0xd8>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0xc0>
 80028fa:	4b76      	ldr	r3, [pc, #472]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a75      	ldr	r2, [pc, #468]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 8002900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	4b73      	ldr	r3, [pc, #460]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a72      	ldr	r2, [pc, #456]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 800290c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e00b      	b.n	800292c <HAL_RCC_OscConfig+0xd8>
 8002914:	4b6f      	ldr	r3, [pc, #444]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a6e      	ldr	r2, [pc, #440]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 800291a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4b6c      	ldr	r3, [pc, #432]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a6b      	ldr	r2, [pc, #428]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 8002926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d013      	beq.n	800295c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7fe fad8 	bl	8000ee8 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800293c:	f7fe fad4 	bl	8000ee8 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	; 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e21f      	b.n	8002d8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294e:	4b61      	ldr	r3, [pc, #388]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0xe8>
 800295a:	e014      	b.n	8002986 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7fe fac4 	bl	8000ee8 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002964:	f7fe fac0 	bl	8000ee8 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	; 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e20b      	b.n	8002d8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002976:	4b57      	ldr	r3, [pc, #348]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x110>
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d069      	beq.n	8002a66 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002992:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00b      	beq.n	80029b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800299e:	4b4d      	ldr	r3, [pc, #308]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d11c      	bne.n	80029e4 <HAL_RCC_OscConfig+0x190>
 80029aa:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d116      	bne.n	80029e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b6:	4b47      	ldr	r3, [pc, #284]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d005      	beq.n	80029ce <HAL_RCC_OscConfig+0x17a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d001      	beq.n	80029ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e1df      	b.n	8002d8e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ce:	4b41      	ldr	r3, [pc, #260]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	493d      	ldr	r1, [pc, #244]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e2:	e040      	b.n	8002a66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d023      	beq.n	8002a34 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ec:	4b39      	ldr	r3, [pc, #228]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a38      	ldr	r2, [pc, #224]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7fe fa76 	bl	8000ee8 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a00:	f7fe fa72 	bl	8000ee8 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e1bd      	b.n	8002d8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a12:	4b30      	ldr	r3, [pc, #192]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1e:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4929      	ldr	r1, [pc, #164]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]
 8002a32:	e018      	b.n	8002a66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a34:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a26      	ldr	r2, [pc, #152]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7fe fa52 	bl	8000ee8 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a48:	f7fe fa4e 	bl	8000ee8 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e199      	b.n	8002d8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5a:	4b1e      	ldr	r3, [pc, #120]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d038      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d019      	beq.n	8002aae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7a:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7e:	4a15      	ldr	r2, [pc, #84]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a86:	f7fe fa2f 	bl	8000ee8 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a8e:	f7fe fa2b 	bl	8000ee8 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e176      	b.n	8002d8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 8002aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x23a>
 8002aac:	e01a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aae:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 8002ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab2:	4a08      	ldr	r2, [pc, #32]	; (8002ad4 <HAL_RCC_OscConfig+0x280>)
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aba:	f7fe fa15 	bl	8000ee8 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac0:	e00a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac2:	f7fe fa11 	bl	8000ee8 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d903      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e15c      	b.n	8002d8e <HAL_RCC_OscConfig+0x53a>
 8002ad4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad8:	4b91      	ldr	r3, [pc, #580]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1ee      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 80a4 	beq.w	8002c3a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af2:	4b8b      	ldr	r3, [pc, #556]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10d      	bne.n	8002b1a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afe:	4b88      	ldr	r3, [pc, #544]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	4a87      	ldr	r2, [pc, #540]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b08:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0a:	4b85      	ldr	r3, [pc, #532]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b16:	2301      	movs	r3, #1
 8002b18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b1a:	4b82      	ldr	r3, [pc, #520]	; (8002d24 <HAL_RCC_OscConfig+0x4d0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d118      	bne.n	8002b58 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b26:	4b7f      	ldr	r3, [pc, #508]	; (8002d24 <HAL_RCC_OscConfig+0x4d0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a7e      	ldr	r2, [pc, #504]	; (8002d24 <HAL_RCC_OscConfig+0x4d0>)
 8002b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b32:	f7fe f9d9 	bl	8000ee8 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3a:	f7fe f9d5 	bl	8000ee8 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b64      	cmp	r3, #100	; 0x64
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e120      	b.n	8002d8e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b4c:	4b75      	ldr	r3, [pc, #468]	; (8002d24 <HAL_RCC_OscConfig+0x4d0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_OscConfig+0x31a>
 8002b60:	4b6f      	ldr	r3, [pc, #444]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b64:	4a6e      	ldr	r2, [pc, #440]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b6c:	e02d      	b.n	8002bca <HAL_RCC_OscConfig+0x376>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x33c>
 8002b76:	4b6a      	ldr	r3, [pc, #424]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	4a69      	ldr	r2, [pc, #420]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002b7c:	f023 0301 	bic.w	r3, r3, #1
 8002b80:	6713      	str	r3, [r2, #112]	; 0x70
 8002b82:	4b67      	ldr	r3, [pc, #412]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	4a66      	ldr	r2, [pc, #408]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002b88:	f023 0304 	bic.w	r3, r3, #4
 8002b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8e:	e01c      	b.n	8002bca <HAL_RCC_OscConfig+0x376>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b05      	cmp	r3, #5
 8002b96:	d10c      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x35e>
 8002b98:	4b61      	ldr	r3, [pc, #388]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9c:	4a60      	ldr	r2, [pc, #384]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002b9e:	f043 0304 	orr.w	r3, r3, #4
 8002ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba4:	4b5e      	ldr	r3, [pc, #376]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	4a5d      	ldr	r2, [pc, #372]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb0:	e00b      	b.n	8002bca <HAL_RCC_OscConfig+0x376>
 8002bb2:	4b5b      	ldr	r3, [pc, #364]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb6:	4a5a      	ldr	r2, [pc, #360]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bbe:	4b58      	ldr	r3, [pc, #352]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	4a57      	ldr	r2, [pc, #348]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002bc4:	f023 0304 	bic.w	r3, r3, #4
 8002bc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d015      	beq.n	8002bfe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd2:	f7fe f989 	bl	8000ee8 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd8:	e00a      	b.n	8002bf0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bda:	f7fe f985 	bl	8000ee8 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e0ce      	b.n	8002d8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf0:	4b4b      	ldr	r3, [pc, #300]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ee      	beq.n	8002bda <HAL_RCC_OscConfig+0x386>
 8002bfc:	e014      	b.n	8002c28 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfe:	f7fe f973 	bl	8000ee8 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c04:	e00a      	b.n	8002c1c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c06:	f7fe f96f 	bl	8000ee8 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e0b8      	b.n	8002d8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c1c:	4b40      	ldr	r3, [pc, #256]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1ee      	bne.n	8002c06 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d105      	bne.n	8002c3a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2e:	4b3c      	ldr	r3, [pc, #240]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	4a3b      	ldr	r2, [pc, #236]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 80a4 	beq.w	8002d8c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c44:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 030c 	and.w	r3, r3, #12
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d06b      	beq.n	8002d28 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d149      	bne.n	8002cec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c58:	4b31      	ldr	r3, [pc, #196]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a30      	ldr	r2, [pc, #192]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fe f940 	bl	8000ee8 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fe f93c 	bl	8000ee8 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e087      	b.n	8002d8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7e:	4b28      	ldr	r3, [pc, #160]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69da      	ldr	r2, [r3, #28]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	019b      	lsls	r3, r3, #6
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca0:	085b      	lsrs	r3, r3, #1
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	041b      	lsls	r3, r3, #16
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	061b      	lsls	r3, r3, #24
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	4a1b      	ldr	r2, [pc, #108]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002cb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cb6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb8:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a18      	ldr	r2, [pc, #96]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fe f910 	bl	8000ee8 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ccc:	f7fe f90c 	bl	8000ee8 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e057      	b.n	8002d8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0x478>
 8002cea:	e04f      	b.n	8002d8c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a0b      	ldr	r2, [pc, #44]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fe f8f6 	bl	8000ee8 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d00:	f7fe f8f2 	bl	8000ee8 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e03d      	b.n	8002d8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d12:	4b03      	ldr	r3, [pc, #12]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x4ac>
 8002d1e:	e035      	b.n	8002d8c <HAL_RCC_OscConfig+0x538>
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d28:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <HAL_RCC_OscConfig+0x544>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d028      	beq.n	8002d88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d121      	bne.n	8002d88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d11a      	bne.n	8002d88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d58:	4013      	ands	r3, r2
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d5e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d111      	bne.n	8002d88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	085b      	lsrs	r3, r3, #1
 8002d70:	3b01      	subs	r3, #1
 8002d72:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d107      	bne.n	8002d88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40023800 	.word	0x40023800

08002d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0d0      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002db4:	4b6a      	ldr	r3, [pc, #424]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d910      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b67      	ldr	r3, [pc, #412]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 020f 	bic.w	r2, r3, #15
 8002dca:	4965      	ldr	r1, [pc, #404]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b63      	ldr	r3, [pc, #396]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0b8      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dfc:	4b59      	ldr	r3, [pc, #356]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4a58      	ldr	r2, [pc, #352]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e14:	4b53      	ldr	r3, [pc, #332]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4a52      	ldr	r2, [pc, #328]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e20:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	494d      	ldr	r1, [pc, #308]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d040      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	4b47      	ldr	r3, [pc, #284]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d115      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e07f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5e:	4b41      	ldr	r3, [pc, #260]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e073      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6e:	4b3d      	ldr	r3, [pc, #244]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e06b      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e7e:	4b39      	ldr	r3, [pc, #228]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f023 0203 	bic.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4936      	ldr	r1, [pc, #216]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e90:	f7fe f82a 	bl	8000ee8 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e98:	f7fe f826 	bl	8000ee8 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e053      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	4b2d      	ldr	r3, [pc, #180]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 020c 	and.w	r2, r3, #12
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d1eb      	bne.n	8002e98 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d210      	bcs.n	8002ef0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 020f 	bic.w	r2, r3, #15
 8002ed6:	4922      	ldr	r1, [pc, #136]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e032      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4916      	ldr	r1, [pc, #88]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f1a:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	490e      	ldr	r1, [pc, #56]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f2e:	f000 f821 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002f32:	4602      	mov	r2, r0
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	490a      	ldr	r1, [pc, #40]	; (8002f68 <HAL_RCC_ClockConfig+0x1cc>)
 8002f40:	5ccb      	ldrb	r3, [r1, r3]
 8002f42:	fa22 f303 	lsr.w	r3, r2, r3
 8002f46:	4a09      	ldr	r2, [pc, #36]	; (8002f6c <HAL_RCC_ClockConfig+0x1d0>)
 8002f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_RCC_ClockConfig+0x1d4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fd ff86 	bl	8000e60 <HAL_InitTick>

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023c00 	.word	0x40023c00
 8002f64:	40023800 	.word	0x40023800
 8002f68:	080050fc 	.word	0x080050fc
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	20000004 	.word	0x20000004

08002f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	607b      	str	r3, [r7, #4]
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	2300      	movs	r3, #0
 8002f86:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f8c:	4b67      	ldr	r3, [pc, #412]	; (800312c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d00d      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x40>
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	f200 80bd 	bhi.w	8003118 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d003      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0x3a>
 8002fa6:	e0b7      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fa8:	4b61      	ldr	r3, [pc, #388]	; (8003130 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002faa:	60bb      	str	r3, [r7, #8]
      break;
 8002fac:	e0b7      	b.n	800311e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fae:	4b61      	ldr	r3, [pc, #388]	; (8003134 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002fb0:	60bb      	str	r3, [r7, #8]
      break;
 8002fb2:	e0b4      	b.n	800311e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fb4:	4b5d      	ldr	r3, [pc, #372]	; (800312c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fbc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fbe:	4b5b      	ldr	r3, [pc, #364]	; (800312c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d04d      	beq.n	8003066 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fca:	4b58      	ldr	r3, [pc, #352]	; (800312c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	099b      	lsrs	r3, r3, #6
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fda:	f04f 0100 	mov.w	r1, #0
 8002fde:	ea02 0800 	and.w	r8, r2, r0
 8002fe2:	ea03 0901 	and.w	r9, r3, r1
 8002fe6:	4640      	mov	r0, r8
 8002fe8:	4649      	mov	r1, r9
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	014b      	lsls	r3, r1, #5
 8002ff4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ff8:	0142      	lsls	r2, r0, #5
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	ebb0 0008 	subs.w	r0, r0, r8
 8003002:	eb61 0109 	sbc.w	r1, r1, r9
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	018b      	lsls	r3, r1, #6
 8003010:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003014:	0182      	lsls	r2, r0, #6
 8003016:	1a12      	subs	r2, r2, r0
 8003018:	eb63 0301 	sbc.w	r3, r3, r1
 800301c:	f04f 0000 	mov.w	r0, #0
 8003020:	f04f 0100 	mov.w	r1, #0
 8003024:	00d9      	lsls	r1, r3, #3
 8003026:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800302a:	00d0      	lsls	r0, r2, #3
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	eb12 0208 	adds.w	r2, r2, r8
 8003034:	eb43 0309 	adc.w	r3, r3, r9
 8003038:	f04f 0000 	mov.w	r0, #0
 800303c:	f04f 0100 	mov.w	r1, #0
 8003040:	0259      	lsls	r1, r3, #9
 8003042:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003046:	0250      	lsls	r0, r2, #9
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4610      	mov	r0, r2
 800304e:	4619      	mov	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	461a      	mov	r2, r3
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	f7fd f932 	bl	80002c0 <__aeabi_uldivmod>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4613      	mov	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	e04a      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003066:	4b31      	ldr	r3, [pc, #196]	; (800312c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	099b      	lsrs	r3, r3, #6
 800306c:	461a      	mov	r2, r3
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003076:	f04f 0100 	mov.w	r1, #0
 800307a:	ea02 0400 	and.w	r4, r2, r0
 800307e:	ea03 0501 	and.w	r5, r3, r1
 8003082:	4620      	mov	r0, r4
 8003084:	4629      	mov	r1, r5
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	014b      	lsls	r3, r1, #5
 8003090:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003094:	0142      	lsls	r2, r0, #5
 8003096:	4610      	mov	r0, r2
 8003098:	4619      	mov	r1, r3
 800309a:	1b00      	subs	r0, r0, r4
 800309c:	eb61 0105 	sbc.w	r1, r1, r5
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	018b      	lsls	r3, r1, #6
 80030aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030ae:	0182      	lsls	r2, r0, #6
 80030b0:	1a12      	subs	r2, r2, r0
 80030b2:	eb63 0301 	sbc.w	r3, r3, r1
 80030b6:	f04f 0000 	mov.w	r0, #0
 80030ba:	f04f 0100 	mov.w	r1, #0
 80030be:	00d9      	lsls	r1, r3, #3
 80030c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030c4:	00d0      	lsls	r0, r2, #3
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	1912      	adds	r2, r2, r4
 80030cc:	eb45 0303 	adc.w	r3, r5, r3
 80030d0:	f04f 0000 	mov.w	r0, #0
 80030d4:	f04f 0100 	mov.w	r1, #0
 80030d8:	0299      	lsls	r1, r3, #10
 80030da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030de:	0290      	lsls	r0, r2, #10
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	461a      	mov	r2, r3
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	f7fd f8e6 	bl	80002c0 <__aeabi_uldivmod>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4613      	mov	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	0c1b      	lsrs	r3, r3, #16
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	3301      	adds	r3, #1
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	fbb2 f3f3 	udiv	r3, r2, r3
 8003114:	60bb      	str	r3, [r7, #8]
      break;
 8003116:	e002      	b.n	800311e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003118:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800311a:	60bb      	str	r3, [r7, #8]
      break;
 800311c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800311e:	68bb      	ldr	r3, [r7, #8]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800
 8003130:	00f42400 	.word	0x00f42400
 8003134:	007a1200 	.word	0x007a1200

08003138 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800313c:	4b03      	ldr	r3, [pc, #12]	; (800314c <HAL_RCC_GetHCLKFreq+0x14>)
 800313e:	681b      	ldr	r3, [r3, #0]
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	20000000 	.word	0x20000000

08003150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003154:	f7ff fff0 	bl	8003138 <HAL_RCC_GetHCLKFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	0a9b      	lsrs	r3, r3, #10
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	4903      	ldr	r1, [pc, #12]	; (8003174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40023800 	.word	0x40023800
 8003174:	0800510c 	.word	0x0800510c

08003178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800317c:	f7ff ffdc 	bl	8003138 <HAL_RCC_GetHCLKFreq>
 8003180:	4602      	mov	r2, r0
 8003182:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	0b5b      	lsrs	r3, r3, #13
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	4903      	ldr	r1, [pc, #12]	; (800319c <HAL_RCC_GetPCLK2Freq+0x24>)
 800318e:	5ccb      	ldrb	r3, [r1, r3]
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003194:	4618      	mov	r0, r3
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40023800 	.word	0x40023800
 800319c:	0800510c 	.word	0x0800510c

080031a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d012      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031c8:	4b69      	ldr	r3, [pc, #420]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4a68      	ldr	r2, [pc, #416]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80031d2:	6093      	str	r3, [r2, #8]
 80031d4:	4b66      	ldr	r3, [pc, #408]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031dc:	4964      	ldr	r1, [pc, #400]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80031ea:	2301      	movs	r3, #1
 80031ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d017      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031fa:	4b5d      	ldr	r3, [pc, #372]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003200:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003208:	4959      	ldr	r1, [pc, #356]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003218:	d101      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800321a:	2301      	movs	r3, #1
 800321c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003226:	2301      	movs	r3, #1
 8003228:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d017      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003236:	4b4e      	ldr	r3, [pc, #312]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800323c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	494a      	ldr	r1, [pc, #296]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003254:	d101      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003256:	2301      	movs	r3, #1
 8003258:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003262:	2301      	movs	r3, #1
 8003264:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003272:	2301      	movs	r3, #1
 8003274:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 808b 	beq.w	800339a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003284:	4b3a      	ldr	r3, [pc, #232]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	4a39      	ldr	r2, [pc, #228]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328e:	6413      	str	r3, [r2, #64]	; 0x40
 8003290:	4b37      	ldr	r3, [pc, #220]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800329c:	4b35      	ldr	r3, [pc, #212]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a34      	ldr	r2, [pc, #208]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a8:	f7fd fe1e 	bl	8000ee8 <HAL_GetTick>
 80032ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b0:	f7fd fe1a 	bl	8000ee8 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e357      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032c2:	4b2c      	ldr	r3, [pc, #176]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032ce:	4b28      	ldr	r3, [pc, #160]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d035      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d02e      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032ec:	4b20      	ldr	r3, [pc, #128]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032f6:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	4a1d      	ldr	r2, [pc, #116]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003300:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003302:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003306:	4a1a      	ldr	r2, [pc, #104]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800330e:	4a18      	ldr	r2, [pc, #96]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003314:	4b16      	ldr	r3, [pc, #88]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b01      	cmp	r3, #1
 800331e:	d114      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003320:	f7fd fde2 	bl	8000ee8 <HAL_GetTick>
 8003324:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003326:	e00a      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003328:	f7fd fdde 	bl	8000ee8 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	; 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e319      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333e:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0ee      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003356:	d111      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003364:	4b04      	ldr	r3, [pc, #16]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003366:	400b      	ands	r3, r1
 8003368:	4901      	ldr	r1, [pc, #4]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336a:	4313      	orrs	r3, r2
 800336c:	608b      	str	r3, [r1, #8]
 800336e:	e00b      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003370:	40023800 	.word	0x40023800
 8003374:	40007000 	.word	0x40007000
 8003378:	0ffffcff 	.word	0x0ffffcff
 800337c:	4bb1      	ldr	r3, [pc, #708]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4ab0      	ldr	r2, [pc, #704]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003382:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003386:	6093      	str	r3, [r2, #8]
 8003388:	4bae      	ldr	r3, [pc, #696]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800338a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003394:	49ab      	ldr	r1, [pc, #684]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003396:	4313      	orrs	r3, r2
 8003398:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d010      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033a6:	4ba7      	ldr	r3, [pc, #668]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033ac:	4aa5      	ldr	r2, [pc, #660]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033b6:	4ba3      	ldr	r3, [pc, #652]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	49a0      	ldr	r1, [pc, #640]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033d4:	4b9b      	ldr	r3, [pc, #620]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033e2:	4998      	ldr	r1, [pc, #608]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033f6:	4b93      	ldr	r3, [pc, #588]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003404:	498f      	ldr	r1, [pc, #572]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003418:	4b8a      	ldr	r3, [pc, #552]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003426:	4987      	ldr	r1, [pc, #540]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800343a:	4b82      	ldr	r3, [pc, #520]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003440:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003448:	497e      	ldr	r1, [pc, #504]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800345c:	4b79      	ldr	r3, [pc, #484]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	f023 0203 	bic.w	r2, r3, #3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	4976      	ldr	r1, [pc, #472]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800347e:	4b71      	ldr	r3, [pc, #452]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003484:	f023 020c 	bic.w	r2, r3, #12
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800348c:	496d      	ldr	r1, [pc, #436]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034a0:	4b68      	ldr	r3, [pc, #416]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ae:	4965      	ldr	r1, [pc, #404]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034c2:	4b60      	ldr	r3, [pc, #384]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d0:	495c      	ldr	r1, [pc, #368]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034e4:	4b57      	ldr	r3, [pc, #348]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f2:	4954      	ldr	r1, [pc, #336]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003506:	4b4f      	ldr	r3, [pc, #316]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003514:	494b      	ldr	r1, [pc, #300]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00a      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003528:	4b46      	ldr	r3, [pc, #280]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003536:	4943      	ldr	r1, [pc, #268]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003538:	4313      	orrs	r3, r2
 800353a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800354a:	4b3e      	ldr	r3, [pc, #248]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003550:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003558:	493a      	ldr	r1, [pc, #232]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00a      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800356c:	4b35      	ldr	r3, [pc, #212]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003572:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800357a:	4932      	ldr	r1, [pc, #200]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d011      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800358e:	4b2d      	ldr	r3, [pc, #180]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003594:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800359c:	4929      	ldr	r1, [pc, #164]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ac:	d101      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80035ae:	2301      	movs	r3, #1
 80035b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80035be:	2301      	movs	r3, #1
 80035c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035ce:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035dc:	4919      	ldr	r1, [pc, #100]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00b      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035f0:	4b14      	ldr	r3, [pc, #80]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003600:	4910      	ldr	r1, [pc, #64]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d006      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 80d9 	beq.w	80037ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800361c:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a08      	ldr	r2, [pc, #32]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003622:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003626:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003628:	f7fd fc5e 	bl	8000ee8 <HAL_GetTick>
 800362c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800362e:	e00b      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003630:	f7fd fc5a 	bl	8000ee8 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	; 0x64
 800363c:	d904      	bls.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e197      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003648:	4b6c      	ldr	r3, [pc, #432]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1ed      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d021      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003664:	2b00      	cmp	r3, #0
 8003666:	d11d      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003668:	4b64      	ldr	r3, [pc, #400]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800366a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800366e:	0c1b      	lsrs	r3, r3, #16
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003676:	4b61      	ldr	r3, [pc, #388]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800367c:	0e1b      	lsrs	r3, r3, #24
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	019a      	lsls	r2, r3, #6
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	041b      	lsls	r3, r3, #16
 800368e:	431a      	orrs	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	061b      	lsls	r3, r3, #24
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	071b      	lsls	r3, r3, #28
 800369c:	4957      	ldr	r1, [pc, #348]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d004      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b8:	d00a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d02e      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ce:	d129      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036d0:	4b4a      	ldr	r3, [pc, #296]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d6:	0c1b      	lsrs	r3, r3, #16
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036de:	4b47      	ldr	r3, [pc, #284]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e4:	0f1b      	lsrs	r3, r3, #28
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	019a      	lsls	r2, r3, #6
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	061b      	lsls	r3, r3, #24
 80036fe:	431a      	orrs	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	071b      	lsls	r3, r3, #28
 8003704:	493d      	ldr	r1, [pc, #244]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800370c:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800370e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003712:	f023 021f 	bic.w	r2, r3, #31
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	3b01      	subs	r3, #1
 800371c:	4937      	ldr	r1, [pc, #220]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01d      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003730:	4b32      	ldr	r3, [pc, #200]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003736:	0e1b      	lsrs	r3, r3, #24
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800373e:	4b2f      	ldr	r3, [pc, #188]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003744:	0f1b      	lsrs	r3, r3, #28
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	019a      	lsls	r2, r3, #6
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	041b      	lsls	r3, r3, #16
 8003758:	431a      	orrs	r2, r3
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	061b      	lsls	r3, r3, #24
 800375e:	431a      	orrs	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	071b      	lsls	r3, r3, #28
 8003764:	4925      	ldr	r1, [pc, #148]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d011      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	019a      	lsls	r2, r3, #6
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	041b      	lsls	r3, r3, #16
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	061b      	lsls	r3, r3, #24
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	071b      	lsls	r3, r3, #28
 8003794:	4919      	ldr	r1, [pc, #100]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800379c:	4b17      	ldr	r3, [pc, #92]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a16      	ldr	r2, [pc, #88]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a8:	f7fd fb9e 	bl	8000ee8 <HAL_GetTick>
 80037ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037b0:	f7fd fb9a 	bl	8000ee8 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	; 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e0d7      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037c2:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	f040 80cd 	bne.w	8003970 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80037d6:	4b09      	ldr	r3, [pc, #36]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a08      	ldr	r2, [pc, #32]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e2:	f7fd fb81 	bl	8000ee8 <HAL_GetTick>
 80037e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037e8:	e00a      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037ea:	f7fd fb7d 	bl	8000ee8 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b64      	cmp	r3, #100	; 0x64
 80037f6:	d903      	bls.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e0ba      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80037fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003800:	4b5e      	ldr	r3, [pc, #376]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800380c:	d0ed      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d009      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800382a:	2b00      	cmp	r3, #0
 800382c:	d02e      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d12a      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003836:	4b51      	ldr	r3, [pc, #324]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383c:	0c1b      	lsrs	r3, r3, #16
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003844:	4b4d      	ldr	r3, [pc, #308]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	0f1b      	lsrs	r3, r3, #28
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	019a      	lsls	r2, r3, #6
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	041b      	lsls	r3, r3, #16
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	061b      	lsls	r3, r3, #24
 8003864:	431a      	orrs	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	071b      	lsls	r3, r3, #28
 800386a:	4944      	ldr	r1, [pc, #272]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003872:	4b42      	ldr	r3, [pc, #264]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003878:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	3b01      	subs	r3, #1
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	493d      	ldr	r1, [pc, #244]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d022      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800389c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a0:	d11d      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038a2:	4b36      	ldr	r3, [pc, #216]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a8:	0e1b      	lsrs	r3, r3, #24
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038b0:	4b32      	ldr	r3, [pc, #200]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	0f1b      	lsrs	r3, r3, #28
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	019a      	lsls	r2, r3, #6
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	041b      	lsls	r3, r3, #16
 80038ca:	431a      	orrs	r2, r3
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	061b      	lsls	r3, r3, #24
 80038d0:	431a      	orrs	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	071b      	lsls	r3, r3, #28
 80038d6:	4929      	ldr	r1, [pc, #164]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d028      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038ea:	4b24      	ldr	r3, [pc, #144]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f0:	0e1b      	lsrs	r3, r3, #24
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038f8:	4b20      	ldr	r3, [pc, #128]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	0c1b      	lsrs	r3, r3, #16
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	019a      	lsls	r2, r3, #6
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	041b      	lsls	r3, r3, #16
 8003910:	431a      	orrs	r2, r3
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	061b      	lsls	r3, r3, #24
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	071b      	lsls	r3, r3, #28
 800391e:	4917      	ldr	r1, [pc, #92]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003926:	4b15      	ldr	r3, [pc, #84]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800392c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	4911      	ldr	r1, [pc, #68]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800393c:	4b0f      	ldr	r3, [pc, #60]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a0e      	ldr	r2, [pc, #56]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003946:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003948:	f7fd face 	bl	8000ee8 <HAL_GetTick>
 800394c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003950:	f7fd faca 	bl	8000ee8 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b64      	cmp	r3, #100	; 0x64
 800395c:	d901      	bls.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e007      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003962:	4b06      	ldr	r3, [pc, #24]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800396a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800396e:	d1ef      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3720      	adds	r7, #32
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40023800 	.word	0x40023800

08003980 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e040      	b.n	8003a14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fd f8f8 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2224      	movs	r2, #36	; 0x24
 80039ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0201 	bic.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f8c0 	bl	8003b44 <UART_SetConfig>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e022      	b.n	8003a14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fb16 	bl	8004008 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fb9d 	bl	800414c <UART_CheckIdleState>
 8003a12:	4603      	mov	r3, r0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	; 0x28
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	f040 8081 	bne.w	8003b38 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <HAL_UART_Transmit+0x26>
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e079      	b.n	8003b3a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_UART_Transmit+0x38>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e072      	b.n	8003b3a <HAL_UART_Transmit+0x11e>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2221      	movs	r2, #33	; 0x21
 8003a68:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a6a:	f7fd fa3d 	bl	8000ee8 <HAL_GetTick>
 8003a6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	88fa      	ldrh	r2, [r7, #6]
 8003a74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	88fa      	ldrh	r2, [r7, #6]
 8003a7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a88:	d108      	bne.n	8003a9c <HAL_UART_Transmit+0x80>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d104      	bne.n	8003a9c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	e003      	b.n	8003aa4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003aac:	e02c      	b.n	8003b08 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2180      	movs	r1, #128	; 0x80
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 fb7a 	bl	80041b2 <UART_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e038      	b.n	8003b3a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10b      	bne.n	8003ae6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003adc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	3302      	adds	r3, #2
 8003ae2:	61bb      	str	r3, [r7, #24]
 8003ae4:	e007      	b.n	8003af6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	781a      	ldrb	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	3301      	adds	r3, #1
 8003af4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1cc      	bne.n	8003aae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2140      	movs	r1, #64	; 0x40
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 fb47 	bl	80041b2 <UART_WaitOnFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e005      	b.n	8003b3a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	e000      	b.n	8003b3a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003b38:	2302      	movs	r3, #2
  }
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3720      	adds	r7, #32
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	4ba7      	ldr	r3, [pc, #668]	; (8003e0c <UART_SetConfig+0x2c8>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	6979      	ldr	r1, [r7, #20]
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a95      	ldr	r2, [pc, #596]	; (8003e10 <UART_SetConfig+0x2cc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d120      	bne.n	8003c02 <UART_SetConfig+0xbe>
 8003bc0:	4b94      	ldr	r3, [pc, #592]	; (8003e14 <UART_SetConfig+0x2d0>)
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d816      	bhi.n	8003bfc <UART_SetConfig+0xb8>
 8003bce:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <UART_SetConfig+0x90>)
 8003bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd4:	08003be5 	.word	0x08003be5
 8003bd8:	08003bf1 	.word	0x08003bf1
 8003bdc:	08003beb 	.word	0x08003beb
 8003be0:	08003bf7 	.word	0x08003bf7
 8003be4:	2301      	movs	r3, #1
 8003be6:	77fb      	strb	r3, [r7, #31]
 8003be8:	e14f      	b.n	8003e8a <UART_SetConfig+0x346>
 8003bea:	2302      	movs	r3, #2
 8003bec:	77fb      	strb	r3, [r7, #31]
 8003bee:	e14c      	b.n	8003e8a <UART_SetConfig+0x346>
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	e149      	b.n	8003e8a <UART_SetConfig+0x346>
 8003bf6:	2308      	movs	r3, #8
 8003bf8:	77fb      	strb	r3, [r7, #31]
 8003bfa:	e146      	b.n	8003e8a <UART_SetConfig+0x346>
 8003bfc:	2310      	movs	r3, #16
 8003bfe:	77fb      	strb	r3, [r7, #31]
 8003c00:	e143      	b.n	8003e8a <UART_SetConfig+0x346>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a84      	ldr	r2, [pc, #528]	; (8003e18 <UART_SetConfig+0x2d4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d132      	bne.n	8003c72 <UART_SetConfig+0x12e>
 8003c0c:	4b81      	ldr	r3, [pc, #516]	; (8003e14 <UART_SetConfig+0x2d0>)
 8003c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c12:	f003 030c 	and.w	r3, r3, #12
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d828      	bhi.n	8003c6c <UART_SetConfig+0x128>
 8003c1a:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <UART_SetConfig+0xdc>)
 8003c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c20:	08003c55 	.word	0x08003c55
 8003c24:	08003c6d 	.word	0x08003c6d
 8003c28:	08003c6d 	.word	0x08003c6d
 8003c2c:	08003c6d 	.word	0x08003c6d
 8003c30:	08003c61 	.word	0x08003c61
 8003c34:	08003c6d 	.word	0x08003c6d
 8003c38:	08003c6d 	.word	0x08003c6d
 8003c3c:	08003c6d 	.word	0x08003c6d
 8003c40:	08003c5b 	.word	0x08003c5b
 8003c44:	08003c6d 	.word	0x08003c6d
 8003c48:	08003c6d 	.word	0x08003c6d
 8003c4c:	08003c6d 	.word	0x08003c6d
 8003c50:	08003c67 	.word	0x08003c67
 8003c54:	2300      	movs	r3, #0
 8003c56:	77fb      	strb	r3, [r7, #31]
 8003c58:	e117      	b.n	8003e8a <UART_SetConfig+0x346>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	77fb      	strb	r3, [r7, #31]
 8003c5e:	e114      	b.n	8003e8a <UART_SetConfig+0x346>
 8003c60:	2304      	movs	r3, #4
 8003c62:	77fb      	strb	r3, [r7, #31]
 8003c64:	e111      	b.n	8003e8a <UART_SetConfig+0x346>
 8003c66:	2308      	movs	r3, #8
 8003c68:	77fb      	strb	r3, [r7, #31]
 8003c6a:	e10e      	b.n	8003e8a <UART_SetConfig+0x346>
 8003c6c:	2310      	movs	r3, #16
 8003c6e:	77fb      	strb	r3, [r7, #31]
 8003c70:	e10b      	b.n	8003e8a <UART_SetConfig+0x346>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a69      	ldr	r2, [pc, #420]	; (8003e1c <UART_SetConfig+0x2d8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d120      	bne.n	8003cbe <UART_SetConfig+0x17a>
 8003c7c:	4b65      	ldr	r3, [pc, #404]	; (8003e14 <UART_SetConfig+0x2d0>)
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c86:	2b30      	cmp	r3, #48	; 0x30
 8003c88:	d013      	beq.n	8003cb2 <UART_SetConfig+0x16e>
 8003c8a:	2b30      	cmp	r3, #48	; 0x30
 8003c8c:	d814      	bhi.n	8003cb8 <UART_SetConfig+0x174>
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d009      	beq.n	8003ca6 <UART_SetConfig+0x162>
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	d810      	bhi.n	8003cb8 <UART_SetConfig+0x174>
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <UART_SetConfig+0x15c>
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d006      	beq.n	8003cac <UART_SetConfig+0x168>
 8003c9e:	e00b      	b.n	8003cb8 <UART_SetConfig+0x174>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	77fb      	strb	r3, [r7, #31]
 8003ca4:	e0f1      	b.n	8003e8a <UART_SetConfig+0x346>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	77fb      	strb	r3, [r7, #31]
 8003caa:	e0ee      	b.n	8003e8a <UART_SetConfig+0x346>
 8003cac:	2304      	movs	r3, #4
 8003cae:	77fb      	strb	r3, [r7, #31]
 8003cb0:	e0eb      	b.n	8003e8a <UART_SetConfig+0x346>
 8003cb2:	2308      	movs	r3, #8
 8003cb4:	77fb      	strb	r3, [r7, #31]
 8003cb6:	e0e8      	b.n	8003e8a <UART_SetConfig+0x346>
 8003cb8:	2310      	movs	r3, #16
 8003cba:	77fb      	strb	r3, [r7, #31]
 8003cbc:	e0e5      	b.n	8003e8a <UART_SetConfig+0x346>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a57      	ldr	r2, [pc, #348]	; (8003e20 <UART_SetConfig+0x2dc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d120      	bne.n	8003d0a <UART_SetConfig+0x1c6>
 8003cc8:	4b52      	ldr	r3, [pc, #328]	; (8003e14 <UART_SetConfig+0x2d0>)
 8003cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cd2:	2bc0      	cmp	r3, #192	; 0xc0
 8003cd4:	d013      	beq.n	8003cfe <UART_SetConfig+0x1ba>
 8003cd6:	2bc0      	cmp	r3, #192	; 0xc0
 8003cd8:	d814      	bhi.n	8003d04 <UART_SetConfig+0x1c0>
 8003cda:	2b80      	cmp	r3, #128	; 0x80
 8003cdc:	d009      	beq.n	8003cf2 <UART_SetConfig+0x1ae>
 8003cde:	2b80      	cmp	r3, #128	; 0x80
 8003ce0:	d810      	bhi.n	8003d04 <UART_SetConfig+0x1c0>
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <UART_SetConfig+0x1a8>
 8003ce6:	2b40      	cmp	r3, #64	; 0x40
 8003ce8:	d006      	beq.n	8003cf8 <UART_SetConfig+0x1b4>
 8003cea:	e00b      	b.n	8003d04 <UART_SetConfig+0x1c0>
 8003cec:	2300      	movs	r3, #0
 8003cee:	77fb      	strb	r3, [r7, #31]
 8003cf0:	e0cb      	b.n	8003e8a <UART_SetConfig+0x346>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	77fb      	strb	r3, [r7, #31]
 8003cf6:	e0c8      	b.n	8003e8a <UART_SetConfig+0x346>
 8003cf8:	2304      	movs	r3, #4
 8003cfa:	77fb      	strb	r3, [r7, #31]
 8003cfc:	e0c5      	b.n	8003e8a <UART_SetConfig+0x346>
 8003cfe:	2308      	movs	r3, #8
 8003d00:	77fb      	strb	r3, [r7, #31]
 8003d02:	e0c2      	b.n	8003e8a <UART_SetConfig+0x346>
 8003d04:	2310      	movs	r3, #16
 8003d06:	77fb      	strb	r3, [r7, #31]
 8003d08:	e0bf      	b.n	8003e8a <UART_SetConfig+0x346>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a45      	ldr	r2, [pc, #276]	; (8003e24 <UART_SetConfig+0x2e0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d125      	bne.n	8003d60 <UART_SetConfig+0x21c>
 8003d14:	4b3f      	ldr	r3, [pc, #252]	; (8003e14 <UART_SetConfig+0x2d0>)
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d22:	d017      	beq.n	8003d54 <UART_SetConfig+0x210>
 8003d24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d28:	d817      	bhi.n	8003d5a <UART_SetConfig+0x216>
 8003d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d2e:	d00b      	beq.n	8003d48 <UART_SetConfig+0x204>
 8003d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d34:	d811      	bhi.n	8003d5a <UART_SetConfig+0x216>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <UART_SetConfig+0x1fe>
 8003d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d3e:	d006      	beq.n	8003d4e <UART_SetConfig+0x20a>
 8003d40:	e00b      	b.n	8003d5a <UART_SetConfig+0x216>
 8003d42:	2300      	movs	r3, #0
 8003d44:	77fb      	strb	r3, [r7, #31]
 8003d46:	e0a0      	b.n	8003e8a <UART_SetConfig+0x346>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	77fb      	strb	r3, [r7, #31]
 8003d4c:	e09d      	b.n	8003e8a <UART_SetConfig+0x346>
 8003d4e:	2304      	movs	r3, #4
 8003d50:	77fb      	strb	r3, [r7, #31]
 8003d52:	e09a      	b.n	8003e8a <UART_SetConfig+0x346>
 8003d54:	2308      	movs	r3, #8
 8003d56:	77fb      	strb	r3, [r7, #31]
 8003d58:	e097      	b.n	8003e8a <UART_SetConfig+0x346>
 8003d5a:	2310      	movs	r3, #16
 8003d5c:	77fb      	strb	r3, [r7, #31]
 8003d5e:	e094      	b.n	8003e8a <UART_SetConfig+0x346>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a30      	ldr	r2, [pc, #192]	; (8003e28 <UART_SetConfig+0x2e4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d125      	bne.n	8003db6 <UART_SetConfig+0x272>
 8003d6a:	4b2a      	ldr	r3, [pc, #168]	; (8003e14 <UART_SetConfig+0x2d0>)
 8003d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d78:	d017      	beq.n	8003daa <UART_SetConfig+0x266>
 8003d7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d7e:	d817      	bhi.n	8003db0 <UART_SetConfig+0x26c>
 8003d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d84:	d00b      	beq.n	8003d9e <UART_SetConfig+0x25a>
 8003d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d8a:	d811      	bhi.n	8003db0 <UART_SetConfig+0x26c>
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <UART_SetConfig+0x254>
 8003d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d94:	d006      	beq.n	8003da4 <UART_SetConfig+0x260>
 8003d96:	e00b      	b.n	8003db0 <UART_SetConfig+0x26c>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	77fb      	strb	r3, [r7, #31]
 8003d9c:	e075      	b.n	8003e8a <UART_SetConfig+0x346>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	77fb      	strb	r3, [r7, #31]
 8003da2:	e072      	b.n	8003e8a <UART_SetConfig+0x346>
 8003da4:	2304      	movs	r3, #4
 8003da6:	77fb      	strb	r3, [r7, #31]
 8003da8:	e06f      	b.n	8003e8a <UART_SetConfig+0x346>
 8003daa:	2308      	movs	r3, #8
 8003dac:	77fb      	strb	r3, [r7, #31]
 8003dae:	e06c      	b.n	8003e8a <UART_SetConfig+0x346>
 8003db0:	2310      	movs	r3, #16
 8003db2:	77fb      	strb	r3, [r7, #31]
 8003db4:	e069      	b.n	8003e8a <UART_SetConfig+0x346>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a1c      	ldr	r2, [pc, #112]	; (8003e2c <UART_SetConfig+0x2e8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d137      	bne.n	8003e30 <UART_SetConfig+0x2ec>
 8003dc0:	4b14      	ldr	r3, [pc, #80]	; (8003e14 <UART_SetConfig+0x2d0>)
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003dca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dce:	d017      	beq.n	8003e00 <UART_SetConfig+0x2bc>
 8003dd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dd4:	d817      	bhi.n	8003e06 <UART_SetConfig+0x2c2>
 8003dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dda:	d00b      	beq.n	8003df4 <UART_SetConfig+0x2b0>
 8003ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de0:	d811      	bhi.n	8003e06 <UART_SetConfig+0x2c2>
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <UART_SetConfig+0x2aa>
 8003de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dea:	d006      	beq.n	8003dfa <UART_SetConfig+0x2b6>
 8003dec:	e00b      	b.n	8003e06 <UART_SetConfig+0x2c2>
 8003dee:	2300      	movs	r3, #0
 8003df0:	77fb      	strb	r3, [r7, #31]
 8003df2:	e04a      	b.n	8003e8a <UART_SetConfig+0x346>
 8003df4:	2302      	movs	r3, #2
 8003df6:	77fb      	strb	r3, [r7, #31]
 8003df8:	e047      	b.n	8003e8a <UART_SetConfig+0x346>
 8003dfa:	2304      	movs	r3, #4
 8003dfc:	77fb      	strb	r3, [r7, #31]
 8003dfe:	e044      	b.n	8003e8a <UART_SetConfig+0x346>
 8003e00:	2308      	movs	r3, #8
 8003e02:	77fb      	strb	r3, [r7, #31]
 8003e04:	e041      	b.n	8003e8a <UART_SetConfig+0x346>
 8003e06:	2310      	movs	r3, #16
 8003e08:	77fb      	strb	r3, [r7, #31]
 8003e0a:	e03e      	b.n	8003e8a <UART_SetConfig+0x346>
 8003e0c:	efff69f3 	.word	0xefff69f3
 8003e10:	40011000 	.word	0x40011000
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40004400 	.word	0x40004400
 8003e1c:	40004800 	.word	0x40004800
 8003e20:	40004c00 	.word	0x40004c00
 8003e24:	40005000 	.word	0x40005000
 8003e28:	40011400 	.word	0x40011400
 8003e2c:	40007800 	.word	0x40007800
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a71      	ldr	r2, [pc, #452]	; (8003ffc <UART_SetConfig+0x4b8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d125      	bne.n	8003e86 <UART_SetConfig+0x342>
 8003e3a:	4b71      	ldr	r3, [pc, #452]	; (8004000 <UART_SetConfig+0x4bc>)
 8003e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e44:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e48:	d017      	beq.n	8003e7a <UART_SetConfig+0x336>
 8003e4a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e4e:	d817      	bhi.n	8003e80 <UART_SetConfig+0x33c>
 8003e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e54:	d00b      	beq.n	8003e6e <UART_SetConfig+0x32a>
 8003e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e5a:	d811      	bhi.n	8003e80 <UART_SetConfig+0x33c>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <UART_SetConfig+0x324>
 8003e60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e64:	d006      	beq.n	8003e74 <UART_SetConfig+0x330>
 8003e66:	e00b      	b.n	8003e80 <UART_SetConfig+0x33c>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	e00d      	b.n	8003e8a <UART_SetConfig+0x346>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	77fb      	strb	r3, [r7, #31]
 8003e72:	e00a      	b.n	8003e8a <UART_SetConfig+0x346>
 8003e74:	2304      	movs	r3, #4
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e007      	b.n	8003e8a <UART_SetConfig+0x346>
 8003e7a:	2308      	movs	r3, #8
 8003e7c:	77fb      	strb	r3, [r7, #31]
 8003e7e:	e004      	b.n	8003e8a <UART_SetConfig+0x346>
 8003e80:	2310      	movs	r3, #16
 8003e82:	77fb      	strb	r3, [r7, #31]
 8003e84:	e001      	b.n	8003e8a <UART_SetConfig+0x346>
 8003e86:	2310      	movs	r3, #16
 8003e88:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e92:	d15b      	bne.n	8003f4c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003e94:	7ffb      	ldrb	r3, [r7, #31]
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d827      	bhi.n	8003eea <UART_SetConfig+0x3a6>
 8003e9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <UART_SetConfig+0x35c>)
 8003e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea0:	08003ec5 	.word	0x08003ec5
 8003ea4:	08003ecd 	.word	0x08003ecd
 8003ea8:	08003ed5 	.word	0x08003ed5
 8003eac:	08003eeb 	.word	0x08003eeb
 8003eb0:	08003edb 	.word	0x08003edb
 8003eb4:	08003eeb 	.word	0x08003eeb
 8003eb8:	08003eeb 	.word	0x08003eeb
 8003ebc:	08003eeb 	.word	0x08003eeb
 8003ec0:	08003ee3 	.word	0x08003ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec4:	f7ff f944 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 8003ec8:	61b8      	str	r0, [r7, #24]
        break;
 8003eca:	e013      	b.n	8003ef4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ecc:	f7ff f954 	bl	8003178 <HAL_RCC_GetPCLK2Freq>
 8003ed0:	61b8      	str	r0, [r7, #24]
        break;
 8003ed2:	e00f      	b.n	8003ef4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed4:	4b4b      	ldr	r3, [pc, #300]	; (8004004 <UART_SetConfig+0x4c0>)
 8003ed6:	61bb      	str	r3, [r7, #24]
        break;
 8003ed8:	e00c      	b.n	8003ef4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eda:	f7ff f84b 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8003ede:	61b8      	str	r0, [r7, #24]
        break;
 8003ee0:	e008      	b.n	8003ef4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ee6:	61bb      	str	r3, [r7, #24]
        break;
 8003ee8:	e004      	b.n	8003ef4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	77bb      	strb	r3, [r7, #30]
        break;
 8003ef2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d074      	beq.n	8003fe4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	005a      	lsls	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	085b      	lsrs	r3, r3, #1
 8003f04:	441a      	add	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b0f      	cmp	r3, #15
 8003f16:	d916      	bls.n	8003f46 <UART_SetConfig+0x402>
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1e:	d212      	bcs.n	8003f46 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	f023 030f 	bic.w	r3, r3, #15
 8003f28:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	085b      	lsrs	r3, r3, #1
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	89fb      	ldrh	r3, [r7, #14]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	89fa      	ldrh	r2, [r7, #14]
 8003f42:	60da      	str	r2, [r3, #12]
 8003f44:	e04e      	b.n	8003fe4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	77bb      	strb	r3, [r7, #30]
 8003f4a:	e04b      	b.n	8003fe4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f4c:	7ffb      	ldrb	r3, [r7, #31]
 8003f4e:	2b08      	cmp	r3, #8
 8003f50:	d827      	bhi.n	8003fa2 <UART_SetConfig+0x45e>
 8003f52:	a201      	add	r2, pc, #4	; (adr r2, 8003f58 <UART_SetConfig+0x414>)
 8003f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f58:	08003f7d 	.word	0x08003f7d
 8003f5c:	08003f85 	.word	0x08003f85
 8003f60:	08003f8d 	.word	0x08003f8d
 8003f64:	08003fa3 	.word	0x08003fa3
 8003f68:	08003f93 	.word	0x08003f93
 8003f6c:	08003fa3 	.word	0x08003fa3
 8003f70:	08003fa3 	.word	0x08003fa3
 8003f74:	08003fa3 	.word	0x08003fa3
 8003f78:	08003f9b 	.word	0x08003f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f7c:	f7ff f8e8 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 8003f80:	61b8      	str	r0, [r7, #24]
        break;
 8003f82:	e013      	b.n	8003fac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f84:	f7ff f8f8 	bl	8003178 <HAL_RCC_GetPCLK2Freq>
 8003f88:	61b8      	str	r0, [r7, #24]
        break;
 8003f8a:	e00f      	b.n	8003fac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f8c:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <UART_SetConfig+0x4c0>)
 8003f8e:	61bb      	str	r3, [r7, #24]
        break;
 8003f90:	e00c      	b.n	8003fac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f92:	f7fe ffef 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8003f96:	61b8      	str	r0, [r7, #24]
        break;
 8003f98:	e008      	b.n	8003fac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f9e:	61bb      	str	r3, [r7, #24]
        break;
 8003fa0:	e004      	b.n	8003fac <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	77bb      	strb	r3, [r7, #30]
        break;
 8003faa:	bf00      	nop
    }

    if (pclk != 0U)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d018      	beq.n	8003fe4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	085a      	lsrs	r2, r3, #1
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	441a      	add	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	2b0f      	cmp	r3, #15
 8003fcc:	d908      	bls.n	8003fe0 <UART_SetConfig+0x49c>
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd4:	d204      	bcs.n	8003fe0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	60da      	str	r2, [r3, #12]
 8003fde:	e001      	b.n	8003fe4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003ff0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3720      	adds	r7, #32
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40007c00 	.word	0x40007c00
 8004000:	40023800 	.word	0x40023800
 8004004:	00f42400 	.word	0x00f42400

08004008 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d01a      	beq.n	800411e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004106:	d10a      	bne.n	800411e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	605a      	str	r2, [r3, #4]
  }
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af02      	add	r7, sp, #8
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800415c:	f7fc fec4 	bl	8000ee8 <HAL_GetTick>
 8004160:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b08      	cmp	r3, #8
 800416e:	d10e      	bne.n	800418e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f817 	bl	80041b2 <UART_WaitOnFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e00d      	b.n	80041aa <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2220      	movs	r2, #32
 8004192:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2220      	movs	r2, #32
 8004198:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	60f8      	str	r0, [r7, #12]
 80041ba:	60b9      	str	r1, [r7, #8]
 80041bc:	603b      	str	r3, [r7, #0]
 80041be:	4613      	mov	r3, r2
 80041c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c2:	e05e      	b.n	8004282 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041ca:	d05a      	beq.n	8004282 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041cc:	f7fc fe8c 	bl	8000ee8 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d302      	bcc.n	80041e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d11b      	bne.n	800421a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0201 	bic.w	r2, r2, #1
 8004200:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2220      	movs	r2, #32
 800420c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e043      	b.n	80042a2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d02c      	beq.n	8004282 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004236:	d124      	bne.n	8004282 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004240:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004250:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0201 	bic.w	r2, r2, #1
 8004260:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e00f      	b.n	80042a2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4013      	ands	r3, r2
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	429a      	cmp	r2, r3
 8004290:	bf0c      	ite	eq
 8004292:	2301      	moveq	r3, #1
 8004294:	2300      	movne	r3, #0
 8004296:	b2db      	uxtb	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	429a      	cmp	r2, r3
 800429e:	d091      	beq.n	80041c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042ac:	b084      	sub	sp, #16
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	f107 001c 	add.w	r0, r7, #28
 80042ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d120      	bne.n	8004306 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	4b20      	ldr	r3, [pc, #128]	; (8004358 <USB_CoreInit+0xac>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d105      	bne.n	80042fa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fa5a 	bl	80047b4 <USB_CoreReset>
 8004300:	4603      	mov	r3, r0
 8004302:	73fb      	strb	r3, [r7, #15]
 8004304:	e010      	b.n	8004328 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fa4e 	bl	80047b4 <USB_CoreReset>
 8004318:	4603      	mov	r3, r0
 800431a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432a:	2b01      	cmp	r3, #1
 800432c:	d10b      	bne.n	8004346 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f043 0206 	orr.w	r2, r3, #6
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f043 0220 	orr.w	r2, r3, #32
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004346:	7bfb      	ldrb	r3, [r7, #15]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004352:	b004      	add	sp, #16
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	ffbdffbf 	.word	0xffbdffbf

0800435c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f023 0201 	bic.w	r2, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	460b      	mov	r3, r1
 8004388:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d106      	bne.n	80043aa <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	60da      	str	r2, [r3, #12]
 80043a8:	e00b      	b.n	80043c2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80043aa:	78fb      	ldrb	r3, [r7, #3]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d106      	bne.n	80043be <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	60da      	str	r2, [r3, #12]
 80043bc:	e001      	b.n	80043c2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e003      	b.n	80043ca <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80043c2:	2032      	movs	r0, #50	; 0x32
 80043c4:	f7fc fd9c 	bl	8000f00 <HAL_Delay>

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043d4:	b084      	sub	sp, #16
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b086      	sub	sp, #24
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80043e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043ee:	2300      	movs	r3, #0
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	e009      	b.n	8004408 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	3340      	adds	r3, #64	; 0x40
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	2200      	movs	r2, #0
 8004400:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	3301      	adds	r3, #1
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	2b0e      	cmp	r3, #14
 800440c:	d9f2      	bls.n	80043f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800440e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004410:	2b00      	cmp	r3, #0
 8004412:	d11c      	bne.n	800444e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004422:	f043 0302 	orr.w	r3, r3, #2
 8004426:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	e005      	b.n	800445a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004460:	461a      	mov	r2, r3
 8004462:	2300      	movs	r3, #0
 8004464:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446c:	4619      	mov	r1, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004474:	461a      	mov	r2, r3
 8004476:	680b      	ldr	r3, [r1, #0]
 8004478:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800447a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447c:	2b01      	cmp	r3, #1
 800447e:	d10c      	bne.n	800449a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d104      	bne.n	8004490 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004486:	2100      	movs	r1, #0
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f959 	bl	8004740 <USB_SetDevSpeed>
 800448e:	e018      	b.n	80044c2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004490:	2101      	movs	r1, #1
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f954 	bl	8004740 <USB_SetDevSpeed>
 8004498:	e013      	b.n	80044c2 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800449a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449c:	2b03      	cmp	r3, #3
 800449e:	d10c      	bne.n	80044ba <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80044a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d104      	bne.n	80044b0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80044a6:	2100      	movs	r1, #0
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f949 	bl	8004740 <USB_SetDevSpeed>
 80044ae:	e008      	b.n	80044c2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80044b0:	2101      	movs	r1, #1
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f944 	bl	8004740 <USB_SetDevSpeed>
 80044b8:	e003      	b.n	80044c2 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044ba:	2103      	movs	r1, #3
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f93f 	bl	8004740 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044c2:	2110      	movs	r1, #16
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f8f3 	bl	80046b0 <USB_FlushTxFifo>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f911 	bl	80046fc <USB_FlushRxFifo>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ea:	461a      	mov	r2, r3
 80044ec:	2300      	movs	r3, #0
 80044ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f6:	461a      	mov	r2, r3
 80044f8:	2300      	movs	r3, #0
 80044fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004502:	461a      	mov	r2, r3
 8004504:	2300      	movs	r3, #0
 8004506:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004508:	2300      	movs	r3, #0
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	e043      	b.n	8004596 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004524:	d118      	bne.n	8004558 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10a      	bne.n	8004542 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004538:	461a      	mov	r2, r3
 800453a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	e013      	b.n	800456a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454e:	461a      	mov	r2, r3
 8004550:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	e008      	b.n	800456a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004564:	461a      	mov	r2, r3
 8004566:	2300      	movs	r3, #0
 8004568:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4413      	add	r3, r2
 8004572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004576:	461a      	mov	r2, r3
 8004578:	2300      	movs	r3, #0
 800457a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004588:	461a      	mov	r2, r3
 800458a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800458e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	3301      	adds	r3, #1
 8004594:	613b      	str	r3, [r7, #16]
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	429a      	cmp	r2, r3
 800459c:	d3b7      	bcc.n	800450e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800459e:	2300      	movs	r3, #0
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	e043      	b.n	800462c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045ba:	d118      	bne.n	80045ee <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ce:	461a      	mov	r2, r3
 80045d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	e013      	b.n	8004600 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e4:	461a      	mov	r2, r3
 80045e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	e008      	b.n	8004600 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fa:	461a      	mov	r2, r3
 80045fc:	2300      	movs	r3, #0
 80045fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460c:	461a      	mov	r2, r3
 800460e:	2300      	movs	r3, #0
 8004610:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461e:	461a      	mov	r2, r3
 8004620:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004624:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	3301      	adds	r3, #1
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	429a      	cmp	r2, r3
 8004632:	d3b7      	bcc.n	80045a4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004642:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004646:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004654:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004658:	2b00      	cmp	r3, #0
 800465a:	d105      	bne.n	8004668 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	f043 0210 	orr.w	r2, r3, #16
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699a      	ldr	r2, [r3, #24]
 800466c:	4b0e      	ldr	r3, [pc, #56]	; (80046a8 <USB_DevInit+0x2d4>)
 800466e:	4313      	orrs	r3, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004676:	2b00      	cmp	r3, #0
 8004678:	d005      	beq.n	8004686 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f043 0208 	orr.w	r2, r3, #8
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004688:	2b01      	cmp	r3, #1
 800468a:	d105      	bne.n	8004698 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	699a      	ldr	r2, [r3, #24]
 8004690:	4b06      	ldr	r3, [pc, #24]	; (80046ac <USB_DevInit+0x2d8>)
 8004692:	4313      	orrs	r3, r2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004698:	7dfb      	ldrb	r3, [r7, #23]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046a4:	b004      	add	sp, #16
 80046a6:	4770      	bx	lr
 80046a8:	803c3800 	.word	0x803c3800
 80046ac:	40000004 	.word	0x40000004

080046b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	019b      	lsls	r3, r3, #6
 80046c2:	f043 0220 	orr.w	r2, r3, #32
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3301      	adds	r3, #1
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4a09      	ldr	r2, [pc, #36]	; (80046f8 <USB_FlushTxFifo+0x48>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d901      	bls.n	80046dc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e006      	b.n	80046ea <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	f003 0320 	and.w	r3, r3, #32
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	d0f0      	beq.n	80046ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	00030d40 	.word	0x00030d40

080046fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2210      	movs	r2, #16
 800470c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3301      	adds	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4a09      	ldr	r2, [pc, #36]	; (800473c <USB_FlushRxFifo+0x40>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d901      	bls.n	8004720 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e006      	b.n	800472e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f003 0310 	and.w	r3, r3, #16
 8004728:	2b10      	cmp	r3, #16
 800472a:	d0f0      	beq.n	800470e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	00030d40 	.word	0x00030d40

08004740 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	460b      	mov	r3, r1
 800474a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	68f9      	ldr	r1, [r7, #12]
 800475c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004760:	4313      	orrs	r3, r2
 8004762:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004772:	b480      	push	{r7}
 8004774:	b085      	sub	sp, #20
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800478c:	f023 0303 	bic.w	r3, r3, #3
 8004790:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047a0:	f043 0302 	orr.w	r3, r3, #2
 80047a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3301      	adds	r3, #1
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4a13      	ldr	r2, [pc, #76]	; (8004818 <USB_CoreReset+0x64>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d901      	bls.n	80047d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e01b      	b.n	800480a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	daf2      	bge.n	80047c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80047da:	2300      	movs	r3, #0
 80047dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f043 0201 	orr.w	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3301      	adds	r3, #1
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4a09      	ldr	r2, [pc, #36]	; (8004818 <USB_CoreReset+0x64>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d901      	bls.n	80047fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e006      	b.n	800480a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b01      	cmp	r3, #1
 8004806:	d0f0      	beq.n	80047ea <USB_CoreReset+0x36>

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	00030d40 	.word	0x00030d40

0800481c <__errno>:
 800481c:	4b01      	ldr	r3, [pc, #4]	; (8004824 <__errno+0x8>)
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	2000000c 	.word	0x2000000c

08004828 <__libc_init_array>:
 8004828:	b570      	push	{r4, r5, r6, lr}
 800482a:	4d0d      	ldr	r5, [pc, #52]	; (8004860 <__libc_init_array+0x38>)
 800482c:	4c0d      	ldr	r4, [pc, #52]	; (8004864 <__libc_init_array+0x3c>)
 800482e:	1b64      	subs	r4, r4, r5
 8004830:	10a4      	asrs	r4, r4, #2
 8004832:	2600      	movs	r6, #0
 8004834:	42a6      	cmp	r6, r4
 8004836:	d109      	bne.n	800484c <__libc_init_array+0x24>
 8004838:	4d0b      	ldr	r5, [pc, #44]	; (8004868 <__libc_init_array+0x40>)
 800483a:	4c0c      	ldr	r4, [pc, #48]	; (800486c <__libc_init_array+0x44>)
 800483c:	f000 fc4e 	bl	80050dc <_init>
 8004840:	1b64      	subs	r4, r4, r5
 8004842:	10a4      	asrs	r4, r4, #2
 8004844:	2600      	movs	r6, #0
 8004846:	42a6      	cmp	r6, r4
 8004848:	d105      	bne.n	8004856 <__libc_init_array+0x2e>
 800484a:	bd70      	pop	{r4, r5, r6, pc}
 800484c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004850:	4798      	blx	r3
 8004852:	3601      	adds	r6, #1
 8004854:	e7ee      	b.n	8004834 <__libc_init_array+0xc>
 8004856:	f855 3b04 	ldr.w	r3, [r5], #4
 800485a:	4798      	blx	r3
 800485c:	3601      	adds	r6, #1
 800485e:	e7f2      	b.n	8004846 <__libc_init_array+0x1e>
 8004860:	08005158 	.word	0x08005158
 8004864:	08005158 	.word	0x08005158
 8004868:	08005158 	.word	0x08005158
 800486c:	0800515c 	.word	0x0800515c

08004870 <memset>:
 8004870:	4402      	add	r2, r0
 8004872:	4603      	mov	r3, r0
 8004874:	4293      	cmp	r3, r2
 8004876:	d100      	bne.n	800487a <memset+0xa>
 8004878:	4770      	bx	lr
 800487a:	f803 1b01 	strb.w	r1, [r3], #1
 800487e:	e7f9      	b.n	8004874 <memset+0x4>

08004880 <siprintf>:
 8004880:	b40e      	push	{r1, r2, r3}
 8004882:	b500      	push	{lr}
 8004884:	b09c      	sub	sp, #112	; 0x70
 8004886:	ab1d      	add	r3, sp, #116	; 0x74
 8004888:	9002      	str	r0, [sp, #8]
 800488a:	9006      	str	r0, [sp, #24]
 800488c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004890:	4809      	ldr	r0, [pc, #36]	; (80048b8 <siprintf+0x38>)
 8004892:	9107      	str	r1, [sp, #28]
 8004894:	9104      	str	r1, [sp, #16]
 8004896:	4909      	ldr	r1, [pc, #36]	; (80048bc <siprintf+0x3c>)
 8004898:	f853 2b04 	ldr.w	r2, [r3], #4
 800489c:	9105      	str	r1, [sp, #20]
 800489e:	6800      	ldr	r0, [r0, #0]
 80048a0:	9301      	str	r3, [sp, #4]
 80048a2:	a902      	add	r1, sp, #8
 80048a4:	f000 f868 	bl	8004978 <_svfiprintf_r>
 80048a8:	9b02      	ldr	r3, [sp, #8]
 80048aa:	2200      	movs	r2, #0
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	b01c      	add	sp, #112	; 0x70
 80048b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80048b4:	b003      	add	sp, #12
 80048b6:	4770      	bx	lr
 80048b8:	2000000c 	.word	0x2000000c
 80048bc:	ffff0208 	.word	0xffff0208

080048c0 <__ssputs_r>:
 80048c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c4:	688e      	ldr	r6, [r1, #8]
 80048c6:	429e      	cmp	r6, r3
 80048c8:	4682      	mov	sl, r0
 80048ca:	460c      	mov	r4, r1
 80048cc:	4690      	mov	r8, r2
 80048ce:	461f      	mov	r7, r3
 80048d0:	d838      	bhi.n	8004944 <__ssputs_r+0x84>
 80048d2:	898a      	ldrh	r2, [r1, #12]
 80048d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048d8:	d032      	beq.n	8004940 <__ssputs_r+0x80>
 80048da:	6825      	ldr	r5, [r4, #0]
 80048dc:	6909      	ldr	r1, [r1, #16]
 80048de:	eba5 0901 	sub.w	r9, r5, r1
 80048e2:	6965      	ldr	r5, [r4, #20]
 80048e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048ec:	3301      	adds	r3, #1
 80048ee:	444b      	add	r3, r9
 80048f0:	106d      	asrs	r5, r5, #1
 80048f2:	429d      	cmp	r5, r3
 80048f4:	bf38      	it	cc
 80048f6:	461d      	movcc	r5, r3
 80048f8:	0553      	lsls	r3, r2, #21
 80048fa:	d531      	bpl.n	8004960 <__ssputs_r+0xa0>
 80048fc:	4629      	mov	r1, r5
 80048fe:	f000 fb47 	bl	8004f90 <_malloc_r>
 8004902:	4606      	mov	r6, r0
 8004904:	b950      	cbnz	r0, 800491c <__ssputs_r+0x5c>
 8004906:	230c      	movs	r3, #12
 8004908:	f8ca 3000 	str.w	r3, [sl]
 800490c:	89a3      	ldrh	r3, [r4, #12]
 800490e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004912:	81a3      	strh	r3, [r4, #12]
 8004914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800491c:	6921      	ldr	r1, [r4, #16]
 800491e:	464a      	mov	r2, r9
 8004920:	f000 fabe 	bl	8004ea0 <memcpy>
 8004924:	89a3      	ldrh	r3, [r4, #12]
 8004926:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800492a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492e:	81a3      	strh	r3, [r4, #12]
 8004930:	6126      	str	r6, [r4, #16]
 8004932:	6165      	str	r5, [r4, #20]
 8004934:	444e      	add	r6, r9
 8004936:	eba5 0509 	sub.w	r5, r5, r9
 800493a:	6026      	str	r6, [r4, #0]
 800493c:	60a5      	str	r5, [r4, #8]
 800493e:	463e      	mov	r6, r7
 8004940:	42be      	cmp	r6, r7
 8004942:	d900      	bls.n	8004946 <__ssputs_r+0x86>
 8004944:	463e      	mov	r6, r7
 8004946:	4632      	mov	r2, r6
 8004948:	6820      	ldr	r0, [r4, #0]
 800494a:	4641      	mov	r1, r8
 800494c:	f000 fab6 	bl	8004ebc <memmove>
 8004950:	68a3      	ldr	r3, [r4, #8]
 8004952:	6822      	ldr	r2, [r4, #0]
 8004954:	1b9b      	subs	r3, r3, r6
 8004956:	4432      	add	r2, r6
 8004958:	60a3      	str	r3, [r4, #8]
 800495a:	6022      	str	r2, [r4, #0]
 800495c:	2000      	movs	r0, #0
 800495e:	e7db      	b.n	8004918 <__ssputs_r+0x58>
 8004960:	462a      	mov	r2, r5
 8004962:	f000 fb6f 	bl	8005044 <_realloc_r>
 8004966:	4606      	mov	r6, r0
 8004968:	2800      	cmp	r0, #0
 800496a:	d1e1      	bne.n	8004930 <__ssputs_r+0x70>
 800496c:	6921      	ldr	r1, [r4, #16]
 800496e:	4650      	mov	r0, sl
 8004970:	f000 fabe 	bl	8004ef0 <_free_r>
 8004974:	e7c7      	b.n	8004906 <__ssputs_r+0x46>
	...

08004978 <_svfiprintf_r>:
 8004978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800497c:	4698      	mov	r8, r3
 800497e:	898b      	ldrh	r3, [r1, #12]
 8004980:	061b      	lsls	r3, r3, #24
 8004982:	b09d      	sub	sp, #116	; 0x74
 8004984:	4607      	mov	r7, r0
 8004986:	460d      	mov	r5, r1
 8004988:	4614      	mov	r4, r2
 800498a:	d50e      	bpl.n	80049aa <_svfiprintf_r+0x32>
 800498c:	690b      	ldr	r3, [r1, #16]
 800498e:	b963      	cbnz	r3, 80049aa <_svfiprintf_r+0x32>
 8004990:	2140      	movs	r1, #64	; 0x40
 8004992:	f000 fafd 	bl	8004f90 <_malloc_r>
 8004996:	6028      	str	r0, [r5, #0]
 8004998:	6128      	str	r0, [r5, #16]
 800499a:	b920      	cbnz	r0, 80049a6 <_svfiprintf_r+0x2e>
 800499c:	230c      	movs	r3, #12
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049a4:	e0d1      	b.n	8004b4a <_svfiprintf_r+0x1d2>
 80049a6:	2340      	movs	r3, #64	; 0x40
 80049a8:	616b      	str	r3, [r5, #20]
 80049aa:	2300      	movs	r3, #0
 80049ac:	9309      	str	r3, [sp, #36]	; 0x24
 80049ae:	2320      	movs	r3, #32
 80049b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80049b8:	2330      	movs	r3, #48	; 0x30
 80049ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004b64 <_svfiprintf_r+0x1ec>
 80049be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049c2:	f04f 0901 	mov.w	r9, #1
 80049c6:	4623      	mov	r3, r4
 80049c8:	469a      	mov	sl, r3
 80049ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049ce:	b10a      	cbz	r2, 80049d4 <_svfiprintf_r+0x5c>
 80049d0:	2a25      	cmp	r2, #37	; 0x25
 80049d2:	d1f9      	bne.n	80049c8 <_svfiprintf_r+0x50>
 80049d4:	ebba 0b04 	subs.w	fp, sl, r4
 80049d8:	d00b      	beq.n	80049f2 <_svfiprintf_r+0x7a>
 80049da:	465b      	mov	r3, fp
 80049dc:	4622      	mov	r2, r4
 80049de:	4629      	mov	r1, r5
 80049e0:	4638      	mov	r0, r7
 80049e2:	f7ff ff6d 	bl	80048c0 <__ssputs_r>
 80049e6:	3001      	adds	r0, #1
 80049e8:	f000 80aa 	beq.w	8004b40 <_svfiprintf_r+0x1c8>
 80049ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049ee:	445a      	add	r2, fp
 80049f0:	9209      	str	r2, [sp, #36]	; 0x24
 80049f2:	f89a 3000 	ldrb.w	r3, [sl]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 80a2 	beq.w	8004b40 <_svfiprintf_r+0x1c8>
 80049fc:	2300      	movs	r3, #0
 80049fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a06:	f10a 0a01 	add.w	sl, sl, #1
 8004a0a:	9304      	str	r3, [sp, #16]
 8004a0c:	9307      	str	r3, [sp, #28]
 8004a0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a12:	931a      	str	r3, [sp, #104]	; 0x68
 8004a14:	4654      	mov	r4, sl
 8004a16:	2205      	movs	r2, #5
 8004a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a1c:	4851      	ldr	r0, [pc, #324]	; (8004b64 <_svfiprintf_r+0x1ec>)
 8004a1e:	f7fb fbff 	bl	8000220 <memchr>
 8004a22:	9a04      	ldr	r2, [sp, #16]
 8004a24:	b9d8      	cbnz	r0, 8004a5e <_svfiprintf_r+0xe6>
 8004a26:	06d0      	lsls	r0, r2, #27
 8004a28:	bf44      	itt	mi
 8004a2a:	2320      	movmi	r3, #32
 8004a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a30:	0711      	lsls	r1, r2, #28
 8004a32:	bf44      	itt	mi
 8004a34:	232b      	movmi	r3, #43	; 0x2b
 8004a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8004a40:	d015      	beq.n	8004a6e <_svfiprintf_r+0xf6>
 8004a42:	9a07      	ldr	r2, [sp, #28]
 8004a44:	4654      	mov	r4, sl
 8004a46:	2000      	movs	r0, #0
 8004a48:	f04f 0c0a 	mov.w	ip, #10
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a52:	3b30      	subs	r3, #48	; 0x30
 8004a54:	2b09      	cmp	r3, #9
 8004a56:	d94e      	bls.n	8004af6 <_svfiprintf_r+0x17e>
 8004a58:	b1b0      	cbz	r0, 8004a88 <_svfiprintf_r+0x110>
 8004a5a:	9207      	str	r2, [sp, #28]
 8004a5c:	e014      	b.n	8004a88 <_svfiprintf_r+0x110>
 8004a5e:	eba0 0308 	sub.w	r3, r0, r8
 8004a62:	fa09 f303 	lsl.w	r3, r9, r3
 8004a66:	4313      	orrs	r3, r2
 8004a68:	9304      	str	r3, [sp, #16]
 8004a6a:	46a2      	mov	sl, r4
 8004a6c:	e7d2      	b.n	8004a14 <_svfiprintf_r+0x9c>
 8004a6e:	9b03      	ldr	r3, [sp, #12]
 8004a70:	1d19      	adds	r1, r3, #4
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	9103      	str	r1, [sp, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bfbb      	ittet	lt
 8004a7a:	425b      	neglt	r3, r3
 8004a7c:	f042 0202 	orrlt.w	r2, r2, #2
 8004a80:	9307      	strge	r3, [sp, #28]
 8004a82:	9307      	strlt	r3, [sp, #28]
 8004a84:	bfb8      	it	lt
 8004a86:	9204      	strlt	r2, [sp, #16]
 8004a88:	7823      	ldrb	r3, [r4, #0]
 8004a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8004a8c:	d10c      	bne.n	8004aa8 <_svfiprintf_r+0x130>
 8004a8e:	7863      	ldrb	r3, [r4, #1]
 8004a90:	2b2a      	cmp	r3, #42	; 0x2a
 8004a92:	d135      	bne.n	8004b00 <_svfiprintf_r+0x188>
 8004a94:	9b03      	ldr	r3, [sp, #12]
 8004a96:	1d1a      	adds	r2, r3, #4
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	9203      	str	r2, [sp, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bfb8      	it	lt
 8004aa0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004aa4:	3402      	adds	r4, #2
 8004aa6:	9305      	str	r3, [sp, #20]
 8004aa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b74 <_svfiprintf_r+0x1fc>
 8004aac:	7821      	ldrb	r1, [r4, #0]
 8004aae:	2203      	movs	r2, #3
 8004ab0:	4650      	mov	r0, sl
 8004ab2:	f7fb fbb5 	bl	8000220 <memchr>
 8004ab6:	b140      	cbz	r0, 8004aca <_svfiprintf_r+0x152>
 8004ab8:	2340      	movs	r3, #64	; 0x40
 8004aba:	eba0 000a 	sub.w	r0, r0, sl
 8004abe:	fa03 f000 	lsl.w	r0, r3, r0
 8004ac2:	9b04      	ldr	r3, [sp, #16]
 8004ac4:	4303      	orrs	r3, r0
 8004ac6:	3401      	adds	r4, #1
 8004ac8:	9304      	str	r3, [sp, #16]
 8004aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ace:	4826      	ldr	r0, [pc, #152]	; (8004b68 <_svfiprintf_r+0x1f0>)
 8004ad0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ad4:	2206      	movs	r2, #6
 8004ad6:	f7fb fba3 	bl	8000220 <memchr>
 8004ada:	2800      	cmp	r0, #0
 8004adc:	d038      	beq.n	8004b50 <_svfiprintf_r+0x1d8>
 8004ade:	4b23      	ldr	r3, [pc, #140]	; (8004b6c <_svfiprintf_r+0x1f4>)
 8004ae0:	bb1b      	cbnz	r3, 8004b2a <_svfiprintf_r+0x1b2>
 8004ae2:	9b03      	ldr	r3, [sp, #12]
 8004ae4:	3307      	adds	r3, #7
 8004ae6:	f023 0307 	bic.w	r3, r3, #7
 8004aea:	3308      	adds	r3, #8
 8004aec:	9303      	str	r3, [sp, #12]
 8004aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004af0:	4433      	add	r3, r6
 8004af2:	9309      	str	r3, [sp, #36]	; 0x24
 8004af4:	e767      	b.n	80049c6 <_svfiprintf_r+0x4e>
 8004af6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004afa:	460c      	mov	r4, r1
 8004afc:	2001      	movs	r0, #1
 8004afe:	e7a5      	b.n	8004a4c <_svfiprintf_r+0xd4>
 8004b00:	2300      	movs	r3, #0
 8004b02:	3401      	adds	r4, #1
 8004b04:	9305      	str	r3, [sp, #20]
 8004b06:	4619      	mov	r1, r3
 8004b08:	f04f 0c0a 	mov.w	ip, #10
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b12:	3a30      	subs	r2, #48	; 0x30
 8004b14:	2a09      	cmp	r2, #9
 8004b16:	d903      	bls.n	8004b20 <_svfiprintf_r+0x1a8>
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0c5      	beq.n	8004aa8 <_svfiprintf_r+0x130>
 8004b1c:	9105      	str	r1, [sp, #20]
 8004b1e:	e7c3      	b.n	8004aa8 <_svfiprintf_r+0x130>
 8004b20:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b24:	4604      	mov	r4, r0
 8004b26:	2301      	movs	r3, #1
 8004b28:	e7f0      	b.n	8004b0c <_svfiprintf_r+0x194>
 8004b2a:	ab03      	add	r3, sp, #12
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	462a      	mov	r2, r5
 8004b30:	4b0f      	ldr	r3, [pc, #60]	; (8004b70 <_svfiprintf_r+0x1f8>)
 8004b32:	a904      	add	r1, sp, #16
 8004b34:	4638      	mov	r0, r7
 8004b36:	f3af 8000 	nop.w
 8004b3a:	1c42      	adds	r2, r0, #1
 8004b3c:	4606      	mov	r6, r0
 8004b3e:	d1d6      	bne.n	8004aee <_svfiprintf_r+0x176>
 8004b40:	89ab      	ldrh	r3, [r5, #12]
 8004b42:	065b      	lsls	r3, r3, #25
 8004b44:	f53f af2c 	bmi.w	80049a0 <_svfiprintf_r+0x28>
 8004b48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b4a:	b01d      	add	sp, #116	; 0x74
 8004b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b50:	ab03      	add	r3, sp, #12
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	462a      	mov	r2, r5
 8004b56:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <_svfiprintf_r+0x1f8>)
 8004b58:	a904      	add	r1, sp, #16
 8004b5a:	4638      	mov	r0, r7
 8004b5c:	f000 f87a 	bl	8004c54 <_printf_i>
 8004b60:	e7eb      	b.n	8004b3a <_svfiprintf_r+0x1c2>
 8004b62:	bf00      	nop
 8004b64:	0800511c 	.word	0x0800511c
 8004b68:	08005126 	.word	0x08005126
 8004b6c:	00000000 	.word	0x00000000
 8004b70:	080048c1 	.word	0x080048c1
 8004b74:	08005122 	.word	0x08005122

08004b78 <_printf_common>:
 8004b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b7c:	4616      	mov	r6, r2
 8004b7e:	4699      	mov	r9, r3
 8004b80:	688a      	ldr	r2, [r1, #8]
 8004b82:	690b      	ldr	r3, [r1, #16]
 8004b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	bfb8      	it	lt
 8004b8c:	4613      	movlt	r3, r2
 8004b8e:	6033      	str	r3, [r6, #0]
 8004b90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b94:	4607      	mov	r7, r0
 8004b96:	460c      	mov	r4, r1
 8004b98:	b10a      	cbz	r2, 8004b9e <_printf_common+0x26>
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	6033      	str	r3, [r6, #0]
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	0699      	lsls	r1, r3, #26
 8004ba2:	bf42      	ittt	mi
 8004ba4:	6833      	ldrmi	r3, [r6, #0]
 8004ba6:	3302      	addmi	r3, #2
 8004ba8:	6033      	strmi	r3, [r6, #0]
 8004baa:	6825      	ldr	r5, [r4, #0]
 8004bac:	f015 0506 	ands.w	r5, r5, #6
 8004bb0:	d106      	bne.n	8004bc0 <_printf_common+0x48>
 8004bb2:	f104 0a19 	add.w	sl, r4, #25
 8004bb6:	68e3      	ldr	r3, [r4, #12]
 8004bb8:	6832      	ldr	r2, [r6, #0]
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	42ab      	cmp	r3, r5
 8004bbe:	dc26      	bgt.n	8004c0e <_printf_common+0x96>
 8004bc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bc4:	1e13      	subs	r3, r2, #0
 8004bc6:	6822      	ldr	r2, [r4, #0]
 8004bc8:	bf18      	it	ne
 8004bca:	2301      	movne	r3, #1
 8004bcc:	0692      	lsls	r2, r2, #26
 8004bce:	d42b      	bmi.n	8004c28 <_printf_common+0xb0>
 8004bd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	47c0      	blx	r8
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d01e      	beq.n	8004c1c <_printf_common+0xa4>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	68e5      	ldr	r5, [r4, #12]
 8004be2:	6832      	ldr	r2, [r6, #0]
 8004be4:	f003 0306 	and.w	r3, r3, #6
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	bf08      	it	eq
 8004bec:	1aad      	subeq	r5, r5, r2
 8004bee:	68a3      	ldr	r3, [r4, #8]
 8004bf0:	6922      	ldr	r2, [r4, #16]
 8004bf2:	bf0c      	ite	eq
 8004bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bf8:	2500      	movne	r5, #0
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	bfc4      	itt	gt
 8004bfe:	1a9b      	subgt	r3, r3, r2
 8004c00:	18ed      	addgt	r5, r5, r3
 8004c02:	2600      	movs	r6, #0
 8004c04:	341a      	adds	r4, #26
 8004c06:	42b5      	cmp	r5, r6
 8004c08:	d11a      	bne.n	8004c40 <_printf_common+0xc8>
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	e008      	b.n	8004c20 <_printf_common+0xa8>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	4652      	mov	r2, sl
 8004c12:	4649      	mov	r1, r9
 8004c14:	4638      	mov	r0, r7
 8004c16:	47c0      	blx	r8
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d103      	bne.n	8004c24 <_printf_common+0xac>
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c24:	3501      	adds	r5, #1
 8004c26:	e7c6      	b.n	8004bb6 <_printf_common+0x3e>
 8004c28:	18e1      	adds	r1, r4, r3
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	2030      	movs	r0, #48	; 0x30
 8004c2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c32:	4422      	add	r2, r4
 8004c34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c3c:	3302      	adds	r3, #2
 8004c3e:	e7c7      	b.n	8004bd0 <_printf_common+0x58>
 8004c40:	2301      	movs	r3, #1
 8004c42:	4622      	mov	r2, r4
 8004c44:	4649      	mov	r1, r9
 8004c46:	4638      	mov	r0, r7
 8004c48:	47c0      	blx	r8
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d0e6      	beq.n	8004c1c <_printf_common+0xa4>
 8004c4e:	3601      	adds	r6, #1
 8004c50:	e7d9      	b.n	8004c06 <_printf_common+0x8e>
	...

08004c54 <_printf_i>:
 8004c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c58:	460c      	mov	r4, r1
 8004c5a:	4691      	mov	r9, r2
 8004c5c:	7e27      	ldrb	r7, [r4, #24]
 8004c5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c60:	2f78      	cmp	r7, #120	; 0x78
 8004c62:	4680      	mov	r8, r0
 8004c64:	469a      	mov	sl, r3
 8004c66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c6a:	d807      	bhi.n	8004c7c <_printf_i+0x28>
 8004c6c:	2f62      	cmp	r7, #98	; 0x62
 8004c6e:	d80a      	bhi.n	8004c86 <_printf_i+0x32>
 8004c70:	2f00      	cmp	r7, #0
 8004c72:	f000 80d8 	beq.w	8004e26 <_printf_i+0x1d2>
 8004c76:	2f58      	cmp	r7, #88	; 0x58
 8004c78:	f000 80a3 	beq.w	8004dc2 <_printf_i+0x16e>
 8004c7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c84:	e03a      	b.n	8004cfc <_printf_i+0xa8>
 8004c86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c8a:	2b15      	cmp	r3, #21
 8004c8c:	d8f6      	bhi.n	8004c7c <_printf_i+0x28>
 8004c8e:	a001      	add	r0, pc, #4	; (adr r0, 8004c94 <_printf_i+0x40>)
 8004c90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c94:	08004ced 	.word	0x08004ced
 8004c98:	08004d01 	.word	0x08004d01
 8004c9c:	08004c7d 	.word	0x08004c7d
 8004ca0:	08004c7d 	.word	0x08004c7d
 8004ca4:	08004c7d 	.word	0x08004c7d
 8004ca8:	08004c7d 	.word	0x08004c7d
 8004cac:	08004d01 	.word	0x08004d01
 8004cb0:	08004c7d 	.word	0x08004c7d
 8004cb4:	08004c7d 	.word	0x08004c7d
 8004cb8:	08004c7d 	.word	0x08004c7d
 8004cbc:	08004c7d 	.word	0x08004c7d
 8004cc0:	08004e0d 	.word	0x08004e0d
 8004cc4:	08004d31 	.word	0x08004d31
 8004cc8:	08004def 	.word	0x08004def
 8004ccc:	08004c7d 	.word	0x08004c7d
 8004cd0:	08004c7d 	.word	0x08004c7d
 8004cd4:	08004e2f 	.word	0x08004e2f
 8004cd8:	08004c7d 	.word	0x08004c7d
 8004cdc:	08004d31 	.word	0x08004d31
 8004ce0:	08004c7d 	.word	0x08004c7d
 8004ce4:	08004c7d 	.word	0x08004c7d
 8004ce8:	08004df7 	.word	0x08004df7
 8004cec:	680b      	ldr	r3, [r1, #0]
 8004cee:	1d1a      	adds	r2, r3, #4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	600a      	str	r2, [r1, #0]
 8004cf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0a3      	b.n	8004e48 <_printf_i+0x1f4>
 8004d00:	6825      	ldr	r5, [r4, #0]
 8004d02:	6808      	ldr	r0, [r1, #0]
 8004d04:	062e      	lsls	r6, r5, #24
 8004d06:	f100 0304 	add.w	r3, r0, #4
 8004d0a:	d50a      	bpl.n	8004d22 <_printf_i+0xce>
 8004d0c:	6805      	ldr	r5, [r0, #0]
 8004d0e:	600b      	str	r3, [r1, #0]
 8004d10:	2d00      	cmp	r5, #0
 8004d12:	da03      	bge.n	8004d1c <_printf_i+0xc8>
 8004d14:	232d      	movs	r3, #45	; 0x2d
 8004d16:	426d      	negs	r5, r5
 8004d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d1c:	485e      	ldr	r0, [pc, #376]	; (8004e98 <_printf_i+0x244>)
 8004d1e:	230a      	movs	r3, #10
 8004d20:	e019      	b.n	8004d56 <_printf_i+0x102>
 8004d22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d26:	6805      	ldr	r5, [r0, #0]
 8004d28:	600b      	str	r3, [r1, #0]
 8004d2a:	bf18      	it	ne
 8004d2c:	b22d      	sxthne	r5, r5
 8004d2e:	e7ef      	b.n	8004d10 <_printf_i+0xbc>
 8004d30:	680b      	ldr	r3, [r1, #0]
 8004d32:	6825      	ldr	r5, [r4, #0]
 8004d34:	1d18      	adds	r0, r3, #4
 8004d36:	6008      	str	r0, [r1, #0]
 8004d38:	0628      	lsls	r0, r5, #24
 8004d3a:	d501      	bpl.n	8004d40 <_printf_i+0xec>
 8004d3c:	681d      	ldr	r5, [r3, #0]
 8004d3e:	e002      	b.n	8004d46 <_printf_i+0xf2>
 8004d40:	0669      	lsls	r1, r5, #25
 8004d42:	d5fb      	bpl.n	8004d3c <_printf_i+0xe8>
 8004d44:	881d      	ldrh	r5, [r3, #0]
 8004d46:	4854      	ldr	r0, [pc, #336]	; (8004e98 <_printf_i+0x244>)
 8004d48:	2f6f      	cmp	r7, #111	; 0x6f
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2308      	moveq	r3, #8
 8004d4e:	230a      	movne	r3, #10
 8004d50:	2100      	movs	r1, #0
 8004d52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d56:	6866      	ldr	r6, [r4, #4]
 8004d58:	60a6      	str	r6, [r4, #8]
 8004d5a:	2e00      	cmp	r6, #0
 8004d5c:	bfa2      	ittt	ge
 8004d5e:	6821      	ldrge	r1, [r4, #0]
 8004d60:	f021 0104 	bicge.w	r1, r1, #4
 8004d64:	6021      	strge	r1, [r4, #0]
 8004d66:	b90d      	cbnz	r5, 8004d6c <_printf_i+0x118>
 8004d68:	2e00      	cmp	r6, #0
 8004d6a:	d04d      	beq.n	8004e08 <_printf_i+0x1b4>
 8004d6c:	4616      	mov	r6, r2
 8004d6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d72:	fb03 5711 	mls	r7, r3, r1, r5
 8004d76:	5dc7      	ldrb	r7, [r0, r7]
 8004d78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d7c:	462f      	mov	r7, r5
 8004d7e:	42bb      	cmp	r3, r7
 8004d80:	460d      	mov	r5, r1
 8004d82:	d9f4      	bls.n	8004d6e <_printf_i+0x11a>
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d10b      	bne.n	8004da0 <_printf_i+0x14c>
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	07df      	lsls	r7, r3, #31
 8004d8c:	d508      	bpl.n	8004da0 <_printf_i+0x14c>
 8004d8e:	6923      	ldr	r3, [r4, #16]
 8004d90:	6861      	ldr	r1, [r4, #4]
 8004d92:	4299      	cmp	r1, r3
 8004d94:	bfde      	ittt	le
 8004d96:	2330      	movle	r3, #48	; 0x30
 8004d98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d9c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004da0:	1b92      	subs	r2, r2, r6
 8004da2:	6122      	str	r2, [r4, #16]
 8004da4:	f8cd a000 	str.w	sl, [sp]
 8004da8:	464b      	mov	r3, r9
 8004daa:	aa03      	add	r2, sp, #12
 8004dac:	4621      	mov	r1, r4
 8004dae:	4640      	mov	r0, r8
 8004db0:	f7ff fee2 	bl	8004b78 <_printf_common>
 8004db4:	3001      	adds	r0, #1
 8004db6:	d14c      	bne.n	8004e52 <_printf_i+0x1fe>
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dbc:	b004      	add	sp, #16
 8004dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc2:	4835      	ldr	r0, [pc, #212]	; (8004e98 <_printf_i+0x244>)
 8004dc4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	680e      	ldr	r6, [r1, #0]
 8004dcc:	061f      	lsls	r7, r3, #24
 8004dce:	f856 5b04 	ldr.w	r5, [r6], #4
 8004dd2:	600e      	str	r6, [r1, #0]
 8004dd4:	d514      	bpl.n	8004e00 <_printf_i+0x1ac>
 8004dd6:	07d9      	lsls	r1, r3, #31
 8004dd8:	bf44      	itt	mi
 8004dda:	f043 0320 	orrmi.w	r3, r3, #32
 8004dde:	6023      	strmi	r3, [r4, #0]
 8004de0:	b91d      	cbnz	r5, 8004dea <_printf_i+0x196>
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	f023 0320 	bic.w	r3, r3, #32
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	2310      	movs	r3, #16
 8004dec:	e7b0      	b.n	8004d50 <_printf_i+0xfc>
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	f043 0320 	orr.w	r3, r3, #32
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	2378      	movs	r3, #120	; 0x78
 8004df8:	4828      	ldr	r0, [pc, #160]	; (8004e9c <_printf_i+0x248>)
 8004dfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dfe:	e7e3      	b.n	8004dc8 <_printf_i+0x174>
 8004e00:	065e      	lsls	r6, r3, #25
 8004e02:	bf48      	it	mi
 8004e04:	b2ad      	uxthmi	r5, r5
 8004e06:	e7e6      	b.n	8004dd6 <_printf_i+0x182>
 8004e08:	4616      	mov	r6, r2
 8004e0a:	e7bb      	b.n	8004d84 <_printf_i+0x130>
 8004e0c:	680b      	ldr	r3, [r1, #0]
 8004e0e:	6826      	ldr	r6, [r4, #0]
 8004e10:	6960      	ldr	r0, [r4, #20]
 8004e12:	1d1d      	adds	r5, r3, #4
 8004e14:	600d      	str	r5, [r1, #0]
 8004e16:	0635      	lsls	r5, r6, #24
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	d501      	bpl.n	8004e20 <_printf_i+0x1cc>
 8004e1c:	6018      	str	r0, [r3, #0]
 8004e1e:	e002      	b.n	8004e26 <_printf_i+0x1d2>
 8004e20:	0671      	lsls	r1, r6, #25
 8004e22:	d5fb      	bpl.n	8004e1c <_printf_i+0x1c8>
 8004e24:	8018      	strh	r0, [r3, #0]
 8004e26:	2300      	movs	r3, #0
 8004e28:	6123      	str	r3, [r4, #16]
 8004e2a:	4616      	mov	r6, r2
 8004e2c:	e7ba      	b.n	8004da4 <_printf_i+0x150>
 8004e2e:	680b      	ldr	r3, [r1, #0]
 8004e30:	1d1a      	adds	r2, r3, #4
 8004e32:	600a      	str	r2, [r1, #0]
 8004e34:	681e      	ldr	r6, [r3, #0]
 8004e36:	6862      	ldr	r2, [r4, #4]
 8004e38:	2100      	movs	r1, #0
 8004e3a:	4630      	mov	r0, r6
 8004e3c:	f7fb f9f0 	bl	8000220 <memchr>
 8004e40:	b108      	cbz	r0, 8004e46 <_printf_i+0x1f2>
 8004e42:	1b80      	subs	r0, r0, r6
 8004e44:	6060      	str	r0, [r4, #4]
 8004e46:	6863      	ldr	r3, [r4, #4]
 8004e48:	6123      	str	r3, [r4, #16]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e50:	e7a8      	b.n	8004da4 <_printf_i+0x150>
 8004e52:	6923      	ldr	r3, [r4, #16]
 8004e54:	4632      	mov	r2, r6
 8004e56:	4649      	mov	r1, r9
 8004e58:	4640      	mov	r0, r8
 8004e5a:	47d0      	blx	sl
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	d0ab      	beq.n	8004db8 <_printf_i+0x164>
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	079b      	lsls	r3, r3, #30
 8004e64:	d413      	bmi.n	8004e8e <_printf_i+0x23a>
 8004e66:	68e0      	ldr	r0, [r4, #12]
 8004e68:	9b03      	ldr	r3, [sp, #12]
 8004e6a:	4298      	cmp	r0, r3
 8004e6c:	bfb8      	it	lt
 8004e6e:	4618      	movlt	r0, r3
 8004e70:	e7a4      	b.n	8004dbc <_printf_i+0x168>
 8004e72:	2301      	movs	r3, #1
 8004e74:	4632      	mov	r2, r6
 8004e76:	4649      	mov	r1, r9
 8004e78:	4640      	mov	r0, r8
 8004e7a:	47d0      	blx	sl
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d09b      	beq.n	8004db8 <_printf_i+0x164>
 8004e80:	3501      	adds	r5, #1
 8004e82:	68e3      	ldr	r3, [r4, #12]
 8004e84:	9903      	ldr	r1, [sp, #12]
 8004e86:	1a5b      	subs	r3, r3, r1
 8004e88:	42ab      	cmp	r3, r5
 8004e8a:	dcf2      	bgt.n	8004e72 <_printf_i+0x21e>
 8004e8c:	e7eb      	b.n	8004e66 <_printf_i+0x212>
 8004e8e:	2500      	movs	r5, #0
 8004e90:	f104 0619 	add.w	r6, r4, #25
 8004e94:	e7f5      	b.n	8004e82 <_printf_i+0x22e>
 8004e96:	bf00      	nop
 8004e98:	0800512d 	.word	0x0800512d
 8004e9c:	0800513e 	.word	0x0800513e

08004ea0 <memcpy>:
 8004ea0:	440a      	add	r2, r1
 8004ea2:	4291      	cmp	r1, r2
 8004ea4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004ea8:	d100      	bne.n	8004eac <memcpy+0xc>
 8004eaa:	4770      	bx	lr
 8004eac:	b510      	push	{r4, lr}
 8004eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eb6:	4291      	cmp	r1, r2
 8004eb8:	d1f9      	bne.n	8004eae <memcpy+0xe>
 8004eba:	bd10      	pop	{r4, pc}

08004ebc <memmove>:
 8004ebc:	4288      	cmp	r0, r1
 8004ebe:	b510      	push	{r4, lr}
 8004ec0:	eb01 0402 	add.w	r4, r1, r2
 8004ec4:	d902      	bls.n	8004ecc <memmove+0x10>
 8004ec6:	4284      	cmp	r4, r0
 8004ec8:	4623      	mov	r3, r4
 8004eca:	d807      	bhi.n	8004edc <memmove+0x20>
 8004ecc:	1e43      	subs	r3, r0, #1
 8004ece:	42a1      	cmp	r1, r4
 8004ed0:	d008      	beq.n	8004ee4 <memmove+0x28>
 8004ed2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ed6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eda:	e7f8      	b.n	8004ece <memmove+0x12>
 8004edc:	4402      	add	r2, r0
 8004ede:	4601      	mov	r1, r0
 8004ee0:	428a      	cmp	r2, r1
 8004ee2:	d100      	bne.n	8004ee6 <memmove+0x2a>
 8004ee4:	bd10      	pop	{r4, pc}
 8004ee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004eea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004eee:	e7f7      	b.n	8004ee0 <memmove+0x24>

08004ef0 <_free_r>:
 8004ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ef2:	2900      	cmp	r1, #0
 8004ef4:	d048      	beq.n	8004f88 <_free_r+0x98>
 8004ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004efa:	9001      	str	r0, [sp, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f1a1 0404 	sub.w	r4, r1, #4
 8004f02:	bfb8      	it	lt
 8004f04:	18e4      	addlt	r4, r4, r3
 8004f06:	f000 f8d3 	bl	80050b0 <__malloc_lock>
 8004f0a:	4a20      	ldr	r2, [pc, #128]	; (8004f8c <_free_r+0x9c>)
 8004f0c:	9801      	ldr	r0, [sp, #4]
 8004f0e:	6813      	ldr	r3, [r2, #0]
 8004f10:	4615      	mov	r5, r2
 8004f12:	b933      	cbnz	r3, 8004f22 <_free_r+0x32>
 8004f14:	6063      	str	r3, [r4, #4]
 8004f16:	6014      	str	r4, [r2, #0]
 8004f18:	b003      	add	sp, #12
 8004f1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f1e:	f000 b8cd 	b.w	80050bc <__malloc_unlock>
 8004f22:	42a3      	cmp	r3, r4
 8004f24:	d90b      	bls.n	8004f3e <_free_r+0x4e>
 8004f26:	6821      	ldr	r1, [r4, #0]
 8004f28:	1862      	adds	r2, r4, r1
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	bf04      	itt	eq
 8004f2e:	681a      	ldreq	r2, [r3, #0]
 8004f30:	685b      	ldreq	r3, [r3, #4]
 8004f32:	6063      	str	r3, [r4, #4]
 8004f34:	bf04      	itt	eq
 8004f36:	1852      	addeq	r2, r2, r1
 8004f38:	6022      	streq	r2, [r4, #0]
 8004f3a:	602c      	str	r4, [r5, #0]
 8004f3c:	e7ec      	b.n	8004f18 <_free_r+0x28>
 8004f3e:	461a      	mov	r2, r3
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	b10b      	cbz	r3, 8004f48 <_free_r+0x58>
 8004f44:	42a3      	cmp	r3, r4
 8004f46:	d9fa      	bls.n	8004f3e <_free_r+0x4e>
 8004f48:	6811      	ldr	r1, [r2, #0]
 8004f4a:	1855      	adds	r5, r2, r1
 8004f4c:	42a5      	cmp	r5, r4
 8004f4e:	d10b      	bne.n	8004f68 <_free_r+0x78>
 8004f50:	6824      	ldr	r4, [r4, #0]
 8004f52:	4421      	add	r1, r4
 8004f54:	1854      	adds	r4, r2, r1
 8004f56:	42a3      	cmp	r3, r4
 8004f58:	6011      	str	r1, [r2, #0]
 8004f5a:	d1dd      	bne.n	8004f18 <_free_r+0x28>
 8004f5c:	681c      	ldr	r4, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	6053      	str	r3, [r2, #4]
 8004f62:	4421      	add	r1, r4
 8004f64:	6011      	str	r1, [r2, #0]
 8004f66:	e7d7      	b.n	8004f18 <_free_r+0x28>
 8004f68:	d902      	bls.n	8004f70 <_free_r+0x80>
 8004f6a:	230c      	movs	r3, #12
 8004f6c:	6003      	str	r3, [r0, #0]
 8004f6e:	e7d3      	b.n	8004f18 <_free_r+0x28>
 8004f70:	6825      	ldr	r5, [r4, #0]
 8004f72:	1961      	adds	r1, r4, r5
 8004f74:	428b      	cmp	r3, r1
 8004f76:	bf04      	itt	eq
 8004f78:	6819      	ldreq	r1, [r3, #0]
 8004f7a:	685b      	ldreq	r3, [r3, #4]
 8004f7c:	6063      	str	r3, [r4, #4]
 8004f7e:	bf04      	itt	eq
 8004f80:	1949      	addeq	r1, r1, r5
 8004f82:	6021      	streq	r1, [r4, #0]
 8004f84:	6054      	str	r4, [r2, #4]
 8004f86:	e7c7      	b.n	8004f18 <_free_r+0x28>
 8004f88:	b003      	add	sp, #12
 8004f8a:	bd30      	pop	{r4, r5, pc}
 8004f8c:	20000090 	.word	0x20000090

08004f90 <_malloc_r>:
 8004f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f92:	1ccd      	adds	r5, r1, #3
 8004f94:	f025 0503 	bic.w	r5, r5, #3
 8004f98:	3508      	adds	r5, #8
 8004f9a:	2d0c      	cmp	r5, #12
 8004f9c:	bf38      	it	cc
 8004f9e:	250c      	movcc	r5, #12
 8004fa0:	2d00      	cmp	r5, #0
 8004fa2:	4606      	mov	r6, r0
 8004fa4:	db01      	blt.n	8004faa <_malloc_r+0x1a>
 8004fa6:	42a9      	cmp	r1, r5
 8004fa8:	d903      	bls.n	8004fb2 <_malloc_r+0x22>
 8004faa:	230c      	movs	r3, #12
 8004fac:	6033      	str	r3, [r6, #0]
 8004fae:	2000      	movs	r0, #0
 8004fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fb2:	f000 f87d 	bl	80050b0 <__malloc_lock>
 8004fb6:	4921      	ldr	r1, [pc, #132]	; (800503c <_malloc_r+0xac>)
 8004fb8:	680a      	ldr	r2, [r1, #0]
 8004fba:	4614      	mov	r4, r2
 8004fbc:	b99c      	cbnz	r4, 8004fe6 <_malloc_r+0x56>
 8004fbe:	4f20      	ldr	r7, [pc, #128]	; (8005040 <_malloc_r+0xb0>)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	b923      	cbnz	r3, 8004fce <_malloc_r+0x3e>
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f000 f862 	bl	8005090 <_sbrk_r>
 8004fcc:	6038      	str	r0, [r7, #0]
 8004fce:	4629      	mov	r1, r5
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	f000 f85d 	bl	8005090 <_sbrk_r>
 8004fd6:	1c43      	adds	r3, r0, #1
 8004fd8:	d123      	bne.n	8005022 <_malloc_r+0x92>
 8004fda:	230c      	movs	r3, #12
 8004fdc:	6033      	str	r3, [r6, #0]
 8004fde:	4630      	mov	r0, r6
 8004fe0:	f000 f86c 	bl	80050bc <__malloc_unlock>
 8004fe4:	e7e3      	b.n	8004fae <_malloc_r+0x1e>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	1b5b      	subs	r3, r3, r5
 8004fea:	d417      	bmi.n	800501c <_malloc_r+0x8c>
 8004fec:	2b0b      	cmp	r3, #11
 8004fee:	d903      	bls.n	8004ff8 <_malloc_r+0x68>
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	441c      	add	r4, r3
 8004ff4:	6025      	str	r5, [r4, #0]
 8004ff6:	e004      	b.n	8005002 <_malloc_r+0x72>
 8004ff8:	6863      	ldr	r3, [r4, #4]
 8004ffa:	42a2      	cmp	r2, r4
 8004ffc:	bf0c      	ite	eq
 8004ffe:	600b      	streq	r3, [r1, #0]
 8005000:	6053      	strne	r3, [r2, #4]
 8005002:	4630      	mov	r0, r6
 8005004:	f000 f85a 	bl	80050bc <__malloc_unlock>
 8005008:	f104 000b 	add.w	r0, r4, #11
 800500c:	1d23      	adds	r3, r4, #4
 800500e:	f020 0007 	bic.w	r0, r0, #7
 8005012:	1ac2      	subs	r2, r0, r3
 8005014:	d0cc      	beq.n	8004fb0 <_malloc_r+0x20>
 8005016:	1a1b      	subs	r3, r3, r0
 8005018:	50a3      	str	r3, [r4, r2]
 800501a:	e7c9      	b.n	8004fb0 <_malloc_r+0x20>
 800501c:	4622      	mov	r2, r4
 800501e:	6864      	ldr	r4, [r4, #4]
 8005020:	e7cc      	b.n	8004fbc <_malloc_r+0x2c>
 8005022:	1cc4      	adds	r4, r0, #3
 8005024:	f024 0403 	bic.w	r4, r4, #3
 8005028:	42a0      	cmp	r0, r4
 800502a:	d0e3      	beq.n	8004ff4 <_malloc_r+0x64>
 800502c:	1a21      	subs	r1, r4, r0
 800502e:	4630      	mov	r0, r6
 8005030:	f000 f82e 	bl	8005090 <_sbrk_r>
 8005034:	3001      	adds	r0, #1
 8005036:	d1dd      	bne.n	8004ff4 <_malloc_r+0x64>
 8005038:	e7cf      	b.n	8004fda <_malloc_r+0x4a>
 800503a:	bf00      	nop
 800503c:	20000090 	.word	0x20000090
 8005040:	20000094 	.word	0x20000094

08005044 <_realloc_r>:
 8005044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005046:	4607      	mov	r7, r0
 8005048:	4614      	mov	r4, r2
 800504a:	460e      	mov	r6, r1
 800504c:	b921      	cbnz	r1, 8005058 <_realloc_r+0x14>
 800504e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005052:	4611      	mov	r1, r2
 8005054:	f7ff bf9c 	b.w	8004f90 <_malloc_r>
 8005058:	b922      	cbnz	r2, 8005064 <_realloc_r+0x20>
 800505a:	f7ff ff49 	bl	8004ef0 <_free_r>
 800505e:	4625      	mov	r5, r4
 8005060:	4628      	mov	r0, r5
 8005062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005064:	f000 f830 	bl	80050c8 <_malloc_usable_size_r>
 8005068:	42a0      	cmp	r0, r4
 800506a:	d20f      	bcs.n	800508c <_realloc_r+0x48>
 800506c:	4621      	mov	r1, r4
 800506e:	4638      	mov	r0, r7
 8005070:	f7ff ff8e 	bl	8004f90 <_malloc_r>
 8005074:	4605      	mov	r5, r0
 8005076:	2800      	cmp	r0, #0
 8005078:	d0f2      	beq.n	8005060 <_realloc_r+0x1c>
 800507a:	4631      	mov	r1, r6
 800507c:	4622      	mov	r2, r4
 800507e:	f7ff ff0f 	bl	8004ea0 <memcpy>
 8005082:	4631      	mov	r1, r6
 8005084:	4638      	mov	r0, r7
 8005086:	f7ff ff33 	bl	8004ef0 <_free_r>
 800508a:	e7e9      	b.n	8005060 <_realloc_r+0x1c>
 800508c:	4635      	mov	r5, r6
 800508e:	e7e7      	b.n	8005060 <_realloc_r+0x1c>

08005090 <_sbrk_r>:
 8005090:	b538      	push	{r3, r4, r5, lr}
 8005092:	4d06      	ldr	r5, [pc, #24]	; (80050ac <_sbrk_r+0x1c>)
 8005094:	2300      	movs	r3, #0
 8005096:	4604      	mov	r4, r0
 8005098:	4608      	mov	r0, r1
 800509a:	602b      	str	r3, [r5, #0]
 800509c:	f7fb fe62 	bl	8000d64 <_sbrk>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d102      	bne.n	80050aa <_sbrk_r+0x1a>
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	b103      	cbz	r3, 80050aa <_sbrk_r+0x1a>
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	20000618 	.word	0x20000618

080050b0 <__malloc_lock>:
 80050b0:	4801      	ldr	r0, [pc, #4]	; (80050b8 <__malloc_lock+0x8>)
 80050b2:	f000 b811 	b.w	80050d8 <__retarget_lock_acquire_recursive>
 80050b6:	bf00      	nop
 80050b8:	20000620 	.word	0x20000620

080050bc <__malloc_unlock>:
 80050bc:	4801      	ldr	r0, [pc, #4]	; (80050c4 <__malloc_unlock+0x8>)
 80050be:	f000 b80c 	b.w	80050da <__retarget_lock_release_recursive>
 80050c2:	bf00      	nop
 80050c4:	20000620 	.word	0x20000620

080050c8 <_malloc_usable_size_r>:
 80050c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050cc:	1f18      	subs	r0, r3, #4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	bfbc      	itt	lt
 80050d2:	580b      	ldrlt	r3, [r1, r0]
 80050d4:	18c0      	addlt	r0, r0, r3
 80050d6:	4770      	bx	lr

080050d8 <__retarget_lock_acquire_recursive>:
 80050d8:	4770      	bx	lr

080050da <__retarget_lock_release_recursive>:
 80050da:	4770      	bx	lr

080050dc <_init>:
 80050dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050de:	bf00      	nop
 80050e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e2:	bc08      	pop	{r3}
 80050e4:	469e      	mov	lr, r3
 80050e6:	4770      	bx	lr

080050e8 <_fini>:
 80050e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ea:	bf00      	nop
 80050ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ee:	bc08      	pop	{r3}
 80050f0:	469e      	mov	lr, r3
 80050f2:	4770      	bx	lr
